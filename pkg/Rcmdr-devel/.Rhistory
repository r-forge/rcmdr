library(RcmdrDevel)
capabilities()
capabilities()$X11
capabilities()["X11"]
capabilities("X11")
library(rJava)
library(tcltk2)
apropos("ttkstyle")
apropos("ttk")
rJava
install.packages("rJava")
rJava
library(rJava)
?require
hasJava <- function(){
require("rJava", quietly=TRUE)
}
hasJava()
print(hasJava())
print(require("mofo", quietly=TRUE))
require("mofo", quietly=TRUE))
require("mofo", quietly=TRUE)
warn <- options(warn=2)
warn
require("mofo", quietly=TRUE)
options(warn)
require("mofo", quietly=TRUE)
hasJava <- function(){
warn <- options(warn=2)
on.exit(options(warn))
return(require("rJava", quietly=TRUE)))
}
hasJava <- function(){
warn <- options(warn=2)
on.exit(options(warn))
return(require("rJava", quietly=TRUE))
}
options("warn")
hasJava()
apropos("visible")
?withVisible
options("warn")
hasJava <- function(){
warn <- options(warn=2)
on.exit(options(warn))
require("rJava", quietly=TRUE)
}
hasJava()
?try
source('C:/temp/hasJava.R')
hasJava()
debug(hasJava)
hasJava()
warn
res
?options
source('C:/temp/hasJava.R')
hasJava()
print(hasJava())
options("show.error.messages")
options("warn")
source('C:/temp/hasJava.R')
print(hasJava())
library("rJava", lib.loc="C:/R/R-3.1.1/library")
detach("package:rJava", unload=TRUE)
print(hasJava())
source('C:/temp/hasJava.R')
print(hasJava())
source('C:/temp/hasJava.R')
print(hasJava())
library(RcmdrDevel)
Commander()
help(package="tcltk2")
tcltk2::tk2theme("clam")
install.packages("CCTpack")
library(CCTpack)
cctgui()
getOptions("Rcmdr")[["theme"]]
getOption("Rcmdr")[["theme"]]
getOption("Rcmdr")
library(Rcmdr)
getOption("Rcmdr")
getOption("Rcmdr")[["theme"]]
tk2theme()
tcltk2::tk2theme()
tcltk2::tk2theme.list()
tcltk2::tk2theme("winnative")
tcltk2::tk2theme("clam")
tcltk2::tk2theme("alt")
tcltk2::tk2theme("default")
tcltk2::tk2theme("alt")
tcltk2::tk2theme("classic")
tcltk2::tk2theme("xpnative")
tcltk2::tk2theme("alt")
tcltk2::tk2theme("clearlooks")
help(package="tcltk2")
tcltk2::tk2theme("aqua")
tcltk2::tk2theme("acqua")
tcltk2::tk2theme("keramik")
tcltk2::tk2theme("plastik")
tcltk2::tk2theme("radiance")
tcltk2::tk2theme("alt")
tcltk2::tk2theme("aquablue")
tcltk2::tk2theme("radiance")
tcltk2::tk2theme("aquablue")
tcltk2::tk2theme("vista")
.Tcl("ttk::style configure TMenubutton.border selected color red")
.Tcl("ttk::style configure TMenubutton.border -selected color red")
.Tcl("ttk::style configure TMenubutton.border -color red")
.Tcl("ttk::style configure TMenubutton -lightcolor red")
.Tcl("ttk::style configure TMenubutton -background [list selected red]")
.Tcl("ttk::style configure TMenubutton -background [list selected $colors(-dark)]")
.Tcl("ttk::style configure TMenubutton -background [list focus red]")
.Tcl("ttk::style configure TMenubutton -border [list selected red]")
library(RcmdrDevel)
tcltk2::tktheme()
tcltk2::tk2theme()
tcltk2::tk2theme.list()
apropos("union")
?union
union("a", c("b", "c", "d"))
union("a", c("a", "b", "c", "d"))
getRcmdr("retain.messages")
?warning
library(RcmdrDevel)
options(Rcmdr=list(theme="clam"))
Commander()
options(Rcmdr=list(theme="mofo"))
Commander()
c(1, 2) + 1:3
?tk2theme
??tk2theme
tcltk2::tk2theme.list()
tcltk2::tk2theme()
options(Rcmdr=list(theme="mofo"))
library(RcmdrDevel)
union("b", c("a", "c", "d"))
library(RcmdrDevel)
traceback()
source('D:/R-package-sources/Scratch/Rcmdr-debug.R')
source('D:/R-package-sources/Rcmdr-svn/pkg/Rcmdr-devel/R/file-menu.R')
Commander()
source('D:/R-package-sources/Scratch/Rcmdr-debug.R')
Commander()
all.themes
current.theme
options("Rcmdr")
source('D:/R-package-sources/Rcmdr-svn/pkg/Rcmdr-devel/R/file-menu.R')
Commander()
options("Rcmdr")
library(RcmdrDevel)
traceback()
source('D:/R-package-sources/Scratch/Rcmdr-debug.R')
Commander()
source('D:/R-package-sources/Rcmdr-svn/pkg/Rcmdr-devel/R/file-menu.R')
Commander()
source('D:/R-package-sources/Rcmdr-svn/pkg/Rcmdr-devel/R/file-menu.R')
Commander()
source('D:/R-package-sources/Rcmdr-svn/pkg/Rcmdr-devel/R/file-menu.R')
Commander()
source('D:/R-package-sources/Rcmdr-svn/pkg/Rcmdr-devel/R/file-menu.R')
Commander()
library(RcmdrDevel)
source('D:/R-package-sources/Scratch/Rcmdr-debug.R')
Commander()
source('D:/R-package-sources/Rcmdr-svn/pkg/Rcmdr-devel/R/file-menu.R')
Commander()
options
library(RcmdrDevel)
help(package="Rcmdr")
library(RcmdrDevel)
numSummary(Mroz[,c("age", "k5")], groups=Mroz$lfp, statistics=c("mean",
"sd", "IQR", "quantiles", "cv", "skewness", "kurtosis"), quantiles=c(0,.25,
.5,.75,1), type="2")
numSummary(Mroz[,c("age", "k5")], groups=Mroz$lfp, statistics=c("mean",
"sd", "IQR", "quantiles", "skewness", "kurtosis"), quantiles=c(0,.25,
.5,.75,1), type="2")
numSummary(Mroz[,c("age", "k5")], groups=Mroz$lfp, statistics="cv", quantiles=c(0,.25,
.5,.75,1), type="2")
help(package="car")
library(RcmdrDevel)
?available.packages
res <- installed.packages()
head(res)
tools::package_dependencies("Hmisc", db=installed.packages(), which="Depends")
tools::package_dependencies("Hmisc", db=installed.packages(), which="Depends", recursive=TRUE)
source('D:/R-package-sources/Rcmdr-svn/pkg/Rcmdr-devel/R/utilities.R')
library(RcmdrDevel)
putRcmdr("suppress.X11.warnings", FALSE)
source('C:/temp/Library.R')
search()
Library("Hmisc")
traceback()
Commander()
Library("Hmisc")
search()
library(RcmdrDevel)
putRcmdr("suppress.X11.warnings", FALSE)
source('D:/R-package-sources/Rcmdr-svn/pkg/Rcmdr-devel/R/utilities.R')
source('C:/temp/Library.R')
debug(Library)
search()
Library("Hmisc")
putRcmdr("suppress.X11.warnings", FALSE)
Library("Hmisc")
dependencies
source('C:/temp/Library.R')
Library("Hmisc")
search()
library(RcmdrDevel)
search()
putRcmdr("suppress.X11.warnings", FALSE)
source('C:/temp/Library.R')
source('D:/R-package-sources/Rcmdr-svn/pkg/Rcmdr-devel/R/utilities.R')
source('C:/temp/Library.R')
Library("Hmisc")
putRcmdr("suppress.X11.warnings", FALSE)
Library("Hmisc")
search()
debug(Library)
Library("Hmisc")
debug(.loaded)
debug(.library)
package
loaded
pkg
package
source('C:/temp/Library.R')
putRcmdr("installed.packages", installed.packages())
source('C:/temp/Library.R')
search()
Library("Hmisc")
search()
library(RcmdrDevel)
search()
help.search("dir.exists")
getAnywhere("dir.exists")
library(RcmdrDevel)
library(Rcmdr)
source('D:/R-package-sources/Scratch/Rcmdr-debug.R')
source('D:/R-package-sources/Scratch/Rcmdr-scratch.R')
Commander()
installSoftware()
source('D:/R-package-sources/Scratch/Rcmdr-scratch.R')
?browseURL
source('D:/R-package-sources/Scratch/Rcmdr-scratch.R')
Commander()
installSoftware()
traceback()
labelRcmdr
source('D:/R-package-sources/Scratch/Rcmdr-scratch.R')
installSoftware()
source('D:/R-package-sources/Scratch/Rcmdr-scratch.R')
installSoftware()
source('D:/R-package-sources/Scratch/Rcmdr-scratch.R')
installSoftware()\
installSoftware()
source('D:/R-package-sources/Scratch/Rcmdr-scratch.R')
installSoftware()
source('D:/R-package-sources/Scratch/Rcmdr-scratch.R')
installSoftware()
source('D:/R-package-sources/Scratch/Rcmdr-scratch.R')
installSoftware()
source('D:/R-package-sources/Scratch/Rcmdr-scratch.R')
installSoftware()
source('D:/R-package-sources/Scratch/Rcmdr-scratch.R')
installSoftware()
source('D:/R-package-sources/Scratch/Rcmdr-scratch.R')
installSoftware()
args(checkBoxes)
source('D:/R-package-sources/Scratch/Rcmdr-scratch.R')
args(checkBoxes)
installSoftware()
source('D:/R-package-sources/Scratch/Rcmdr-scratch.R')
installSoftware()
library(Rcmdr)
setwd("c:/temp")
source('D:/R-package-sources/Rcmdr-svn/pkg/Rcmdr-devel/R/file-menu.R')
library(Rcmdr)
?AuxiliarySoftware
library(Rcmdr)
?AuxiliarySoftware
