{
    "collab_server" : "",
    "contents" : "\n# The R Commander and command logger\n\n# last modified 2016-05-31 by John Fox\n\n# contributions by Milan Bouchet-Valat, Richard Heiberger, Duncan Murdoch, Erich Neuwirth, Brian Ripley\n\nCommander <- function(){\n    library(Rcmdr, quietly=TRUE)\n\n    # set up RcmdrEnv\n    RcmdrEnv.on.path <- getOption(\"Rcmdr\")[[\"RcmdrEnv.on.path\"]]\n    if (is.null(RcmdrEnv.on.path)) RcmdrEnv.on.path <- FALSE\n    if (RcmdrEnv.on.path){\n        RcmdrEnv <- function() {\n            pos <-  match(\"RcmdrEnv\", search())\n            if (is.na(pos)) { # Must create it\n                RcmdrAttach <- base::attach\n                RcmdrEnv <- list()\n                RcmdrAttach(RcmdrEnv, pos = length(search()) - 1)\n                rm(RcmdrEnv)\n                pos <- match(\"RcmdrEnv\", search())\n            }\n            return(pos.to.env(pos))\n        }\n        \n        # the following two lines to be commented-out for debugging:\n        assignInMyNamespace(\"RcmdrEnv\", RcmdrEnv)        \n        assignInMyNamespace(\".RcmdrEnv\", NULL)\n        \n    }\n    RStudioP <- function() nzchar(Sys.getenv(\"RSTUDIO_USER_IDENTITY\")) # to detect RStudio\n    DESCRIPTION <- readLines(file.path(find.package(\"Rcmdr\"), \"DESCRIPTION\")[1])\n    RcmdrVersion <- trim.blanks(sub(\"^Version:\", \"\",\n        grep(\"^Version:\", DESCRIPTION, value=TRUE)))\n    putRcmdr(\"quotes\", options(useFancyQuotes=FALSE))\n    putRcmdr(\"messageNumber\", 0)\n    if (exists(\".RcmdrEnv\") && is.environment(RcmdrEnv()) &&\n            exists(\"commanderWindow\", RcmdrEnv()) &&\n            !is.null(get(\"commanderWindow\", RcmdrEnv()))) {\n        return(invisible(NULL))\n    }\n    \n    # check for auxiliary software\n    putRcmdr(\"capabilities\", RcmdrCapabilities())\n    \n    # the following function used to apply Rcmdr options with specified defaults\n    #   if global == TRUE, store option\n    setOption <- function(option, default, global=TRUE) {\n        opt <- if (is.null(current[option][[1]])) default else current[option][[1]]\n        if (global) putRcmdr(option, opt)\n        opt\n    }\n    current <- getOption(\"Rcmdr\")\n    \n    # define icons\n    setOption(\"suppress.icon.images\", FALSE)\n    icon.images <- !getRcmdr(\"suppress.icon.images\")\n    tkimage.create(\"photo\", \"::image::RlogoIcon\", file = system.file(\"etc\", \"R-logo.gif\", package=\"Rcmdr\"))\n    tkimage.create(\"photo\", \"::image::okIcon\", \n        file = if (icon.images) system.file(\"etc\", \"ok.gif\", package=\"Rcmdr\") else system.file(\"etc\", \"blank.gif\", package=\"Rcmdr\"))\n    tkimage.create(\"photo\", \"::image::cancelIcon\", file = if (icon.images) system.file(\"etc\", \"cancel.gif\", package=\"Rcmdr\") \n        else system.file(\"etc\", \"blank.gif\", package=\"Rcmdr\"))\n    tkimage.create(\"photo\", \"::image::helpIcon\", file = if (icon.images) system.file(\"etc\", \"help.gif\", package=\"Rcmdr\")\n        else system.file(\"etc\", \"blank.gif\", package=\"Rcmdr\"))\n    tkimage.create(\"photo\", \"::image::resetIcon\", file = if (icon.images) system.file(\"etc\", \"reset.gif\", package=\"Rcmdr\")\n        else system.file(\"etc\", \"blank.gif\", package=\"Rcmdr\"))\n    tkimage.create(\"photo\", \"::image::applyIcon\", file = if (icon.images) system.file(\"etc\", \"apply.gif\", package=\"Rcmdr\")\n        else system.file(\"etc\", \"blank.gif\", package=\"Rcmdr\"))\n    tkimage.create(\"photo\", \"::image::submitIcon\", file = system.file(\"etc\", \"submit.gif\", package=\"Rcmdr\"))\n    tkimage.create(\"photo\", \"::image::editIcon\", file = system.file(\"etc\", \"edit.gif\", package=\"Rcmdr\"))\n    tkimage.create(\"photo\", \"::image::viewIcon\", file = system.file(\"etc\", \"view.gif\", package=\"Rcmdr\"))\n    tkimage.create(\"photo\", \"::image::dataIcon\", file = system.file(\"etc\", \"data.gif\", package=\"Rcmdr\"))\n    tkimage.create(\"photo\", \"::image::modelIcon\", file = system.file(\"etc\", \"model.gif\", package=\"Rcmdr\"))\n    tkimage.create(\"photo\", \"::image::removeIcon\", file = system.file(\"etc\", \"remove.gif\", package=\"Rcmdr\"))\n    tkimage.create(\"photo\", \"::image::copyIcon\", file = system.file(\"etc\", \"copy.gif\", package=\"Rcmdr\"))\n    tkimage.create(\"photo\", \"::image::cutIcon\", file = system.file(\"etc\", \"cut.gif\", package=\"Rcmdr\"))\n    tkimage.create(\"photo\", \"::image::deleteIcon\", file = system.file(\"etc\", \"delete.gif\", package=\"Rcmdr\"))\n    tkimage.create(\"photo\", \"::image::findIcon\", file = system.file(\"etc\", \"find.gif\", package=\"Rcmdr\"))\n    tkimage.create(\"photo\", \"::image::pasteIcon\", file = system.file(\"etc\", \"paste.gif\", package=\"Rcmdr\"))\n    tkimage.create(\"photo\", \"::image::redoIcon\", file = system.file(\"etc\", \"redo.gif\", package=\"Rcmdr\"))\n    tkimage.create(\"photo\", \"::image::undoIcon\", file = system.file(\"etc\", \"undo.gif\", package=\"Rcmdr\"))\n    \n    # locate Rcmdr etc directory and directory for menus (usually the same)\n    etc <- setOption(\"etc\", system.file(\"etc\", package=\"Rcmdr\"))\n    etcMenus <- setOption(\"etcMenus\", etc)\n    putRcmdr(\"etcMenus\", etcMenus)\n    \n    # standard edit actions\n    onCopy <- function(){\n        focused <- tkfocus()\n        if ((tclvalue(focused) != LogWindow()$ID) && (tclvalue(focused) != OutputWindow()$ID) && \n                (tclvalue(focused) != MessagesWindow()$ID) && (tclvalue(focused) != RmdWindow()$ID) && (tclvalue(focused) != RnwWindow()$ID))\n            focused <- LogWindow()\n        selection <- strsplit(tclvalue(tktag.ranges(focused, \"sel\")), \" \")[[1]]\n        if (is.na(selection[1])) return()\n        text <- tclvalue(tkget(focused, selection[1], selection[2]))\n        tkclipboard.clear()\n        tkclipboard.append(text)\n    }\n    onDelete <- function(){\n        focused <- tkfocus()\n        if ((tclvalue(focused) != LogWindow()$ID) && (tclvalue(focused) != OutputWindow()$ID) && \n                (tclvalue(focused) != MessagesWindow()$ID) && (tclvalue(focused) != RmdWindow()$ID) && (tclvalue(focused) != RnwWindow()$ID))\n            focused <- LogWindow()\n        selection <- strsplit(tclvalue(tktag.ranges(focused, \"sel\")), \" \")[[1]]\n        if (is.na(selection[1])) return()\n        tkdelete(focused, selection[1], selection[2])\n    }\n    onCut <- function(){\n        onCopy()\n        onDelete()\n    }\n    onPaste <- function(){\n        onDelete()\n        focused <- tkfocus()\n        if ((tclvalue(focused) != LogWindow()$ID) && (tclvalue(focused) != OutputWindow()$ID)  && \n                (tclvalue(focused) != MessagesWindow()$ID) && (tclvalue(focused) != RmdWindow()$ID) && (tclvalue(focused) != RnwWindow()$ID))\n            focused <- LogWindow()\n        text <- tclvalue(.Tcl(\"selection get -selection CLIPBOARD\"))\n        if (length(text) == 0) return()\n        tkinsert(focused, \"insert\", text)\n    }\n    onFind <- function(){\n        focused <- tkfocus()\n        if ((tclvalue(focused) != LogWindow()$ID) && (tclvalue(focused) != OutputWindow()$ID)  && \n                (tclvalue(focused) != MessagesWindow()$ID) && (tclvalue(focused) != RmdWindow()$ID) && (tclvalue(focused) != RnwWindow()$ID))\n            focused <- LogWindow()\n        initializeDialog(title=gettextRcmdr(\"Find\"))\n        textFrame <- tkframe(top)\n        textVar <- tclVar(getRcmdr(\"last.search\"))\n        textEntry <- ttkentry(textFrame, width=\"20\", textvariable=textVar)\n        checkBoxes(frame=\"optionsFrame\", boxes=c(\"regexpr\", \"case\"), initialValues=c(\"0\", \"1\"),\n            labels=gettextRcmdr(c(\"Regular-expression search\", \"Case sensitive\")))\n        radioButtons(name=\"direction\", buttons=c(\"foward\", \"backward\"), labels=gettextRcmdr(c(\"Forward\", \"Backward\")),\n            values=c(\"-forward\", \"-backward\"), title=gettextRcmdr(\"Search Direction\"))\n        onOK <- function(){\n            text <- tclvalue(textVar)\n            putRcmdr(\"last.search\", text)\n            if (text == \"\"){\n                errorCondition(recall=onFind, message=gettextRcmdr(\"No search text specified.\"))\n                return()\n            }\n            type <- if (tclvalue(regexprVariable) == 1) \"-regexp\" else \"-exact\"\n            case <- tclvalue(caseVariable) == 1\n            direction <- tclvalue(directionVariable)\n            stop <- if (direction == \"-forward\") \"end\" else \"1.0\"\n            where.txt <- if (case) tksearch(focused, type, direction, \"--\", text, \"insert\", stop)\n            else tksearch(focused, type, direction, \"-nocase\", \"--\", text, \"insert\", stop)\n            where.txt <- tclvalue(where.txt)\n            if (where.txt == \"\") {\n                Message(message=gettextRcmdr(\"Text not found.\"),\n                    type=\"note\")\n                if (GrabFocus()) tkgrab.release(top)\n                tkdestroy(top)\n                tkfocus(CommanderWindow())\n                return()\n            }\n            if (GrabFocus()) tkgrab.release(top)\n            tkfocus(focused)\n            tkmark.set(focused, \"insert\", where.txt)\n            tksee(focused, where.txt)\n            tkdestroy(top)\n        }\n        .exit <- function(){\n            text <- tclvalue(textVar)\n            putRcmdr(\"last.search\", text)\n            return(\"\")\n        }\n        OKCancelHelp()\n        tkgrid(labelRcmdr(textFrame, text=gettextRcmdr(\"Search for:\")), textEntry, sticky=\"w\")\n        tkgrid(textFrame, sticky=\"w\")\n        tkgrid(optionsFrame, sticky=\"w\")\n        tkgrid(directionFrame, sticky=\"w\")\n        tkgrid(buttonsFrame, sticky=\"w\")\n        dialogSuffix(focus=textEntry)\n    }\n    onSelectAll <- function() {\n        focused <- tkfocus()\n        if ((tclvalue(focused) != LogWindow()$ID) && (tclvalue(focused) != OutputWindow()$ID) \n            && (tclvalue(focused) != MessagesWindow()$ID) && (tclvalue(focused) != RmdWindow()$ID) && (tclvalue(focused) != RnwWindow()$ID))\n            focused <- LogWindow()\n        tktag.add(focused, \"sel\", \"1.0\", \"end\")\n        tkfocus(focused)\n    }\n    onClear <- function(){\n        onSelectAll()\n        onDelete()\n    }\n    onUndo <- function(){\n        focused <- tkfocus()\n        if ((tclvalue(focused) != LogWindow()$ID) && (tclvalue(focused) != OutputWindow()$ID) && \n                (tclvalue(focused) != MessagesWindow()$ID) && (tclvalue(focused) != RmdWindow()$ID) && (tclvalue(focused) != RnwWindow()$ID))\n            focused <- LogWindow()\n        tcl(focused, \"edit\", \"undo\")\n    }\n    onRedo <- function(){\n        focused <- tkfocus()\n        if ((tclvalue(focused) != LogWindow()$ID) && (tclvalue(focused) != OutputWindow()$ID) && \n                (tclvalue(focused) != MessagesWindow()$ID) && (tclvalue(focused) != RmdWindow()$ID) && (tclvalue(focused) != RnwWindow()$ID))\n            focused <- LogWindow()\n        tcl(focused, \"edit\", \"redo\")\n    }\n    \n    # various initializations\n    messageTag(reset=TRUE)\n    putRcmdr(\"installed.packages\", installed.packages())\n    putRcmdr(\"RcmdrVersion\", RcmdrVersion)\n    putRcmdr(\".activeDataSet\", NULL)\n    putRcmdr(\".activeModel\", NULL)\n    putRcmdr(\"nrow\", NULL)\n    putRcmdr(\"ncol\", NULL)\n    putRcmdr(\"logFileName\", NULL)\n    putRcmdr(\"RmdFileName\", \"RcmdrMarkdown.Rmd\")\n    putRcmdr(\"RnwFileName\", \"RcmdrKnitr.Rnw\")\n    putRcmdr(\"outputFileName\", NULL)\n    putRcmdr(\"saveFileName\", NULL)\n    putRcmdr(\"modelNumber\", 0)\n    putRcmdr(\"reset.model\", FALSE)\n    putRcmdr(\"rgl\", FALSE)\n    putRcmdr(\"rgl.command\", FALSE)\n    putRcmdr(\"Identify3d\", NULL)\n    putRcmdr(\"open.dialog.here\", NULL)\n    putRcmdr(\"restoreTab\", FALSE)\n    putRcmdr(\"cancelDialogReopen\", FALSE)\n    putRcmdr(\"last.search\", \"\")\n    \n    setOption(\"use.rgl\", TRUE)\n\n    # set up Rcmdr default and text (log) fonts, Tk scaling factor\n    default.font.family.val <- tclvalue(.Tcl(\"font actual TkDefaultFont -family\"))\n    default.font.family.val <- gsub(\"\\\\{\", \"\", gsub(\"\\\\}\", \"\", default.font.family.val))\n    default.font.family <- setOption(\"default.font.family\", default.font.family.val)\n    if (!(\"RcmdrDefaultFont\" %in% as.character(.Tcl(\"font names\")))){\n        .Tcl(paste(\"font create RcmdrDefaultFont\", tclvalue(tkfont.actual(\"TkDefaultFont\"))))\n        .Tcl(\"option add *font RcmdrDefaultFont\")\n    }\n    \n    .Tcl(paste(\"font configure RcmdrDefaultFont -family {\", default.font.family, \"}\", sep=\"\"))\n    \n    if (!(\"RcmdrTitleFont\" %in% as.character(.Tcl(\"font names\")))){\n        .Tcl(paste(\"font create RcmdrTitleFont\", tclvalue(tkfont.actual(\"TkDefaultFont\"))))\n    }\n    .Tcl(paste(\"font configure RcmdrTitleFont -family {\", default.font.family, \"}\", sep=\"\"))\n    if (!(\"RcmdrOutputMessagesFont\" %in% as.character(.Tcl(\"font names\")))){\n        .Tcl(paste(\"font create RcmdrOutputMessagesFont\", tclvalue(tkfont.actual(\"RcmdrTitleFont\"))))\n    }\n    .Tcl(paste(\"font configure RcmdrTitleFont -family {\", default.font.family, \"}\", sep=\"\"))\n    .Tcl(paste(\"font configure RcmdrOutputMessagesFont -family {\", default.font.family, \"}\", sep=\"\"))\n    \n    .Tcl(paste(\"font configure TkDefaultFont -family {\",  default.font.family, \"}\", sep=\"\"))\n    log.font.family.val <- tclvalue(.Tcl(\"font actual TkFixedFont -family\"))\n    log.font.family.val <- gsub(\"\\\\{\", \"\", gsub(\"\\\\}\", \"\", log.font.family.val))\n    log.font.family <- setOption(\"log.font.family\", log.font.family.val)\n    if (!(\"RcmdrLogFont\" %in% as.character(.Tcl(\"font names\")))){\n        .Tcl(paste(\"font create RcmdrLogFont\", tclvalue(tkfont.actual(\"TkFixedFont\"))))\n    }\n    .Tcl(paste(\"font configure RcmdrLogFont -family {\", log.font.family, \"}\", sep=\"\"))\n    .Tcl(paste(\"font configure TkFixedFont -family {\",  log.font.family, \"}\", sep=\"\"))\n    putRcmdr(\"logFont\", \"RcmdrLogFont\")    \n    scale.factor <- current$scale.factor\n\n    if (!is.null(scale.factor)) .Tcl(paste(\"tk scaling \", scale.factor, sep=\"\"))\n    # set various font sizes \n    if (WindowsP()){\n      default.font.size.val <- abs(as.numeric(.Tcl(\"font actual TkDefaultFont -size\")))\n      if (is.na(default.font.size.val)) default.font.size.val <- 10\n    }\n    else default.font.size.val <- 10\n    default.font.size <- setOption(\"default.font.size\", default.font.size.val)\n    tkfont.configure(\"RcmdrDefaultFont\", size=default.font.size)\n    tkfont.configure(\"RcmdrTitleFont\", size=default.font.size)\n    tkfont.configure(\"RcmdrOutputMessagesFont\", size=default.font.size)\n    tkfont.configure(\"TkDefaultFont\", size=default.font.size)\n    tkfont.configure(\"TkTextFont\", size=default.font.size)\n    tkfont.configure(\"TkCaptionFont\", size=default.font.size)\n    log.font.size <- setOption(\"log.font.size\", 10)\n    tkfont.configure(\"RcmdrLogFont\", size=log.font.size)\n    tkfont.configure(\"TkFixedFont\", size=log.font.size)    \n    \n    .Tcl(\"ttk::style configure TButton -font RcmdrDefaultFont\")\n    .Tcl(\"ttk::style configure TLabel -font RcmdrDefaultFont\")\n    .Tcl(\"ttk::style configure TCheckbutton -font RcmdrDefaultFont\")\n    .Tcl(\"ttk::style configure TRadiobutton -font RcmdrDefaultFont\")\n    \n    # set various options\n    setOption(\"default.contrasts\", c(\"contr.Treatment\", \"contr.poly\"))\n    standard.title.color <- as.character(.Tcl(\"ttk::style lookup TLabelframe.Label -foreground\"))\n    title.color <- setOption(\"title.color\", standard.title.color) \n    if (tolower(title.color) == \"black\" || title.color == \"#000000\"){\n        tkfont.configure(\"RcmdrTitleFont\", weight=\"bold\")\n    }\n    else tkfont.configure(\"RcmdrTitleFont\", weight=\"normal\")\n    .Tcl(\"ttk::style configure TNotebook.Tab -font RcmdrDefaultFont\")\n    .Tcl(paste(\"ttk::style configure TNotebook.Tab -foreground\", title.color))\n    setOption(\"number.messages\", TRUE)\n    setOption(\"log.commands\", TRUE)\n    setOption(\"use.knitr\", FALSE)\n    setOption(\"use.markdown\", !getRcmdr(\"use.knitr\"))\n    if ((!packageAvailable(\"markdown\") && !packageAvailable(\"rmarkdown\")) || (!packageAvailable(\"knitr\"))) \n        putRcmdr(\"use.markdown\", FALSE)\n    if (!packageAvailable(\"knitr\") || !getRcmdr(\"capabilities\")$pdflatex) putRcmdr(\"use.knitr\", FALSE)\n    setOption(\"rmd.output.format\", \"html\")\n    putRcmdr(\"startNewCommandBlock\", TRUE)\n    putRcmdr(\"startNewKnitrCommandBlock\", TRUE)\n    putRcmdr(\"rmd.generated\", FALSE)\n    putRcmdr(\"rnw.generated\", FALSE)\n    setOption(\"RStudio\", RStudioP())\n    setOption(\"console.output\", getRcmdr(\"RStudio\"))\n    setOption(\"retain.selections\", TRUE)\n    putRcmdr(\"dialog.values\", list())\n    putRcmdr(\"dialog.values.noreset\", list())\n    putRcmdr(\"savedTable\", NULL)\n    log.height <- as.character(setOption(\"log.height\", if (!getRcmdr(\"log.commands\")) 0 else 10))\n    log.width <- as.character(setOption(\"log.width\", 80))\n    output.height <- as.character(setOption(\"output.height\",\n        if (getRcmdr(\"console.output\")) 0\n        else if ((as.numeric(log.height) != 0) || (!getRcmdr(\"log.commands\"))) 2*as.numeric(log.height)\n        else 20))\n    messages.height <- as.character(setOption(\"messages.height\", 3))\n    putRcmdr(\"saveOptions\", options(warn=1, contrasts=getRcmdr(\"default.contrasts\"), width=as.numeric(log.width),\n        na.action=\"na.exclude\", graphics.record=TRUE))\n    setOption(\"ask.to.exit\", TRUE)\n    setOption(\"ask.on.exit\", TRUE)\n    setOption(\"double.click\", FALSE)\n    setOption(\"sort.names\", TRUE)\n    setOption(\"grab.focus\", TRUE)\n    setOption(\"attach.data.set\", FALSE)\n    setOption(\"log.text.color\", \"black\")\n    setOption(\"command.text.color\", \"darkred\")\n    setOption(\"output.text.color\", \"darkblue\")\n    setOption(\"error.text.color\", \"red\")\n    setOption(\"warning.text.color\", \"darkgreen\")\n    setOption(\"prefixes\", c(\"Rcmdr> \", \"Rcmdr+ \", \"RcmdrMsg: \", \"RcmdrMsg+ \"))\n    setOption(\"multiple.select.mode\", \"extended\")\n    setOption(\"suppress.X11.warnings\",\n        interactive() && .Platform$GUI == \"X11\") # to address problem in X11 (Linux or Mac OS X)\n    setOption(\"showData.threshold\", 100)\n    setOption(\"editDataset.threshold\", 10000)\n    setOption(\"retain.messages\", TRUE)\n    setOption(\"crisp.dialogs\",  TRUE)\n    setOption(\"length.output.stack\", 10)\n    setOption(\"length.command.stack\", 10)\n    setOption(\"quit.R.on.close\", FALSE)\n    putRcmdr(\"outputStack\", as.list(rep(NA, getRcmdr(\"length.output.stack\"))))\n    putRcmdr(\"commandStack\", as.list(rep(NA, getRcmdr(\"length.command.stack\"))))\n    setOption(\"variable.list.height\", 6)\n    setOption(\"variable.list.width\", c(20, Inf))\n    all.themes <- tk2theme.list()\n    current.theme <- tk2theme()\n    all.themes <- union(all.themes, current.theme)\n    setOption(\"theme\", current.theme)\n    theme <- (getRcmdr(\"theme\"))\n    if (!(theme %in% all.themes)){\n        warning(gettextRcmdr(\"non-existent theme\"), ', \"', theme,  '\"\\n  ', \n            gettextRcmdr(\"theme set to\"), ' \"', current.theme, '\"')\n        theme <- current.theme\n    }\n    putRcmdr(\"theme\", theme)\n    tk2theme(theme)\n    placement <- setOption(\"placement\", \"\", global=FALSE)\n    \n    putRcmdr(\"open.showData.windows\", list())\n    \n    # platform-specific issues\n    if (getRcmdr(\"suppress.X11.warnings\")) {\n        putRcmdr(\"messages.connection\", file(open = \"w+\"))\n        sink(getRcmdr(\"messages.connection\"), type=\"message\")\n    }\n    if (!(WindowsP())) {\n        putRcmdr(\"oldPager\", options(pager=RcmdrPager))\n    }\n    putRcmdr(\"restore.help_type\", getOption(\"help_type\"))\n    setOption(\"help_type\", \"html\")\n    options(help_type=getRcmdr(\"help_type\"))\n#    putRcmdr(\"restore.use.external.help\", FALSE)\n    putRcmdr(\"restore.device\", getOption(\"device\"))\n    if (RStudioP()){\n        if (WindowsP()) options(device=\"windows\")\n        else if (MacOSXP()) options(device=\"quartz\")\n        else options(device=\"x11\")\n    }\n    setOption(\"tkwait.dialog\", FALSE)\n    if (getRcmdr(\"tkwait.dialog\")) putRcmdr(\"editDataset.threshold\", 0)\n    if (MacOSXP()){\n        #       PATH <- system2(\"/usr/libexec/path_helper\", \"-s\", stdout=TRUE)\n        #       PATH <- sub(\"\\\"; export PATH;$\", \"\", sub(\"^PATH=\\\\\\\"\", \"\", PATH))\n        #       Sys.setenv(PATH=PATH)\n        PATH <- Sys.getenv(\"PATH\")\n        PATH <- unlist(strsplit(PATH, .Platform$path.sep, fixed=TRUE))\n        if (MacOSXP(\"15.0.0\")){\n            if (length(grep(\"^/Library/TeX/texbin$\", PATH)) == 0) {\n                PATH[length(PATH) + 1] <- \"/Library/TeX/texbin\"\n                Sys.setenv(PATH=paste(PATH, collapse=.Platform$path.sep))\n            }\n        }\n        else{\n            if (length(grep(\"^/usr/texbin$\", PATH)) == 0) {\n                PATH[length(PATH) + 1] <- \"/usr/texbin\"\n                Sys.setenv(PATH=paste(PATH, collapse=.Platform$path.sep))\n            }\n        }\n    }\n    \n    # source additional .R files, plug-ins preferred\n    source.files <- list.files(etc, pattern=\"\\\\.[Rr]$\")\n    for (file in source.files) {\n        source(file.path(etc, file))\n        cat(paste(gettextRcmdr(\"Sourced:\"), file, \"\\n\"))\n    }\n    \n    # collect plug-ins to be used\n    Plugins <- options()$Rcmdr$plugins\n    allPlugins <- listPlugins(loaded=TRUE)\n    for (plugin in Plugins){\n        if (!require(plugin, character.only=TRUE)){\n            putRcmdr(\"commanderWindow\", NULL)\n            stop(sprintf(gettextRcmdr(\"the plug-in package %s is missing\"), plugin))\n        }\n        if (!is.element(plugin, allPlugins)){\n            putRcmdr(\"commanderWindow\", NULL)\n            stop(sprintf(gettextRcmdr(\"the package %s is not an Rcmdr plug-in\"), plugin))\n        }\n    }\n    \n    # build Rcmdr menus\n    Menus <- read.table(file.path(etcMenus, \"Rcmdr-menus.txt\"), colClasses = \"character\")\n    addMenus <- function(Menus){\n        removeMenus <- function(what){\n            children <- Menus[Menus[,3] == what, 2]\n            which <- what == Menus[,2] |  what == Menus[,5]\n            Menus <<- Menus[!which,]\n            for (child in children) removeMenus(child)\n        }\n        nms <- c(\"type\", \"menuOrItem\", \"operationOrParent\", \"label\",\n            \"commandOrMenu\", \"activation\", \"install\")\n        names(Menus) <- nms\n        for (plugin in Plugins) {\n            MenusToAdd <- read.table(file.path(path.package(package=plugin)[1], \"etc/menus.txt\"),\n                colClasses = \"character\")\n            names(MenusToAdd) <- nms\n            for (i in 1:nrow(MenusToAdd)){\n                line <- MenusToAdd[i,]\n                line[, \"label\"] <- gettext(line[,\"label\"], domain=paste(\"R=\", plugin, sep=\"\"))\n                if (line[1, \"type\"] == \"remove\"){\n                    removeMenus(line[1, \"menuOrItem\"])\n                    next\n                }\n                if (line[1, \"type\"] == \"menu\"){\n                    where <- if (line[1, \"operationOrParent\"] == \"topMenu\") 0\n                    else max(which((Menus[, \"type\"] == \"menu\") &\n                            (Menus[, \"menuOrItem\"] == line[1, \"operationOrParent\"])))\n                }\n                else if (line[1, \"type\"] == \"item\"){\n                    if ((line[1, \"operationOrParent\"] == \"command\") || (line[1, \"operationOrParent\"] == \"separator\")){\n                        which <- which(((Menus[, \"operationOrParent\"] == \"command\") | \n                                (Menus[, \"operationOrParent\"] == \"separator\")) &\n                                (Menus[, \"menuOrItem\"] == line[1, \"menuOrItem\"]))\n                        where <- if (length(which) == 0)\n                            which((Menus[, \"type\"] == \"menu\")\n                                & (Menus[, \"menuOrItem\"] == line[1, \"menuOrItem\"]))\n                        else max(which)\n                    }\n                    else if (line[1, \"operationOrParent\"] == \"cascade\"){\n                        where <- if (line[1, \"menuOrItem\"] != \"topMenu\")\n                            max(which((Menus[, \"operationOrParent\"] == \"cascade\") &\n                                    (Menus[, \"menuOrItem\"] == line[1, \"menuOrItem\"]) | (Menus[, \"commandOrMenu\"] == line[1, \"menuOrItem\"])))\n                        else {\n                            max(which((Menus[, \"operationOrParent\"] == \"cascade\") &\n                                    (Menus[, \"menuOrItem\"] == \"topMenu\") &\n                                    (Menus[, \"commandOrMenu\"] != \"toolsMenu\") &\n                                    (Menus[, \"commandOrMenu\"] != \"helpMenu\")))\n                        }\n                    }\n                    else stop(sprintf(gettextRcmdr('unrecognized operation, \"%s\", in plugin menu line %i'),\n                        line[1, \"operation\"], i))\n                }\n                else stop(sprintf(gettextRcmdr('unrecognized type, \"%s\", in plugin menu line %i'),\n                    line[1, \"type\"], i))\n                Menus <- insertRows(Menus, line, where)\n            }\n        }\n        Menus\n    }\n    Menus <- addMenus(Menus)\n    menuNames <- Menus[Menus[,1] == \"menu\",]\n    duplicateMenus <- duplicated(menuNames)\n    if (any(duplicateMenus)) stop(paste(gettextRcmdr(\"Duplicate menu names:\"),\n        menuNames[duplicateMenus]))\n    .Menus <- menus <- list()\n    menuItems <- 0\n    oldMenu <- ncol(Menus) == 6\n    setOption(\"suppress.menus\", FALSE)\n    if (RExcelSupported()) # contributed by Erich Neuwirth\n        putRExcel(\".rexcel.menu.dataframe\", Menus)\n    modelClasses <- scan(file.path(etc, \"model-classes.txt\"), what=\"\", quiet=TRUE, comment.char=\"#\") # default recognized models\n    \n    # process plug-ins\n    for (plugin in Plugins){\n        description <- readLines(file.path(path.package(package=plugin)[1], \"DESCRIPTION\"))\n        addModels <- description[grep(\"Models:\", description)]\n        addModels <- gsub(\" \", \"\", sub(\"^Models:\", \"\", addModels))\n        addModels <- unlist(strsplit(addModels, \",\"))\n        addRcmdrModels <- description[grep(\"RcmdrModels:\", description)]\n        addRcmdrModels <- gsub(\" \", \"\", sub(\"^RcmdrModels:\", \"\", addRcmdrModels))\n        addRcmdrModels <- unlist(strsplit(addRcmdrModels, \",\"))\n        if (length(addModels) > 0) modelClasses <- c(modelClasses, addModels)\n        if (length(addRcmdrModels) > 0) modelClasses <- c(modelClasses, addRcmdrModels)\n    }\n    putRcmdr(\"modelClasses\", modelClasses)\n    \n    # data-set edit\n    onEdit <- function(){\n        if (activeDataSet() == FALSE) {\n            tkfocus(CommanderWindow())\n            return()\n        }\n        dsnameValue <- ActiveDataSet()\n        size <- eval(parse(text=paste(\"prod(dim(\", dsnameValue, \"))\", sep=\"\"))) #  prod(dim(save.dataset))\n        if (size < 1 || size > getRcmdr(\"editDataset.threshold\")){\n            save.dataset <- get(dsnameValue, envir=.GlobalEnv)\n            command <- paste(\"fix(\", dsnameValue, \")\", sep=\"\")\n            result <- justDoIt(command)\n            if (class(result)[1] !=  \"try-error\"){ \t\t\t\n                if (nrow(get(dsnameValue)) == 0){\n                    errorCondition(window=NULL, message=gettextRcmdr(\"empty data set.\"))\n                    justDoIt(paste(dsnameValue, \"<- save.dataset\"))\n                    return()\n                }\n                else{\n                    logger(command, rmd=FALSE)\n                    activeDataSet(dsnameValue)\n                }\n            }\n            else{\n                errorCondition(window=NULL, message=gettextRcmdr(\"data set edit error.\"))\n                return()\n            }\n        }\n        else {\n            command <- paste(\"editDataset(\", dsnameValue, \")\", sep=\"\")\n            result <- justDoIt(command)\n            if (class(result)[1] !=  \"try-error\"){\n                logger(command, rmd=FALSE)\n            }\n            else{\n                errorCondition(window=NULL, message=gettextRcmdr(\"data set edit error.\"))\n                return()\n            }\n        }\n        tkwm.deiconify(CommanderWindow())\n        tkfocus(CommanderWindow())\n    }\n    \n    # data-set view\n    onView <- function(){\n#        if (packageAvailable(\"relimp\")) Library(\"relimp\", rmd=FALSE)\n        if (activeDataSet() == FALSE) {\n            tkfocus(CommanderWindow())\n            return()\n        }\n        suppress <- if(getRcmdr(\"suppress.X11.warnings\")) \", suppress.X11.warnings=FALSE\" else \"\"\n        view.height <- max(as.numeric(output.height) + as.numeric(log.height), 10)\n        ncols <- ncol(get(ActiveDataSet()))\n        command <- if (ncols <= getRcmdr(\"showData.threshold\")){\n            paste(\"showData(\", ActiveDataSet(), \", placement='-20+200', font=getRcmdr('logFont'), maxwidth=\",\n                log.width, \", maxheight=\", view.height, suppress, \")\", sep=\"\")\n        }\n        else paste(\"View(\", ActiveDataSet(), \")\", sep=\"\")\n        window <- justDoIt(command)\n        if (!is.null(window)){\n          open.showData.windows <- getRcmdr(\"open.showData.windows\")\n          open.window <- open.showData.windows[[ActiveDataSet()]]\n          if (!is.null(open.window)) tkdestroy(open.window)\n          open.showData.windows[[ActiveDataSet()]] <- window\n          putRcmdr(\"open.showData.windows\", open.showData.windows)\n        }\n    }\n    \n    # submit command in script tab or compile .Rmd file in markdown tab or compile .Rnw file in knitr tab\n    onSubmit <- function(){\n        .log <- LogWindow()\n        .rmd <- RmdWindow()\n        .rnw <- RnwWindow()\n        if (as.character(tkselect(notebook)) == logFrame$ID) {\n            selection <- strsplit(tclvalue(tktag.ranges(.log, \"sel\")), \" \")[[1]]\n            if (is.na(selection[1])) {\n                tktag.add(.log, \"currentLine\", \"insert linestart\", \"insert lineend\")\n                selection <- strsplit(tclvalue(tktag.ranges(.log,\"currentLine\")), \" \")[[1]]\n                tktag.delete(.log, \"currentLine\")\n                if (is.na(selection[1])) {\n                    Message(message=gettextRcmdr(\"Nothing is selected.\"),\n                        type=\"error\")\n                    tkfocus(CommanderWindow())\n                    return()\n                }\n            }\n            lines <- tclvalue(tkget(.log, selection[1], selection[2]))\n            lines <- strsplit(lines, \"\\n\")[[1]]\n            .console.output <- getRcmdr(\"console.output\")\n            .output <- OutputWindow()\n            iline <- 1\n            nlines <- length(lines)\n            while (iline <= nlines){\n                while (nchar(lines[iline])==0) iline <- iline + 1\n                if (iline > nlines) break\n                current.line <- lines[iline]\n                if (.console.output) cat(paste(\"\\n\", getRcmdr(\"prefixes\")[1], current.line,\"\\n\", sep=\"\"))\n                else{\n                    tkinsert(.output, \"end\", paste(\"\\n> \", current.line,\"\\n\", sep=\"\")) \n                    tktag.add(.output, \"currentLine\", \"end - 2 lines linestart\", \"end - 2 lines lineend\")\n                    tktag.configure(.output, \"currentLine\", foreground=getRcmdr(\"command.text.color\"))\n                }\n                jline <- iline + 1\n                while (jline <= nlines){\n                    if (class(try(parse(text=current.line),silent=TRUE))!=\"try-error\") break\n                    if (.console.output)cat(paste(getRcmdr(\"prefixes\")[2], lines[jline],\"\\n\", sep=\"\"))\n                    else{\n                        tkinsert(.output, \"end\", paste(\"+ \", lines[jline],\"\\n\", sep=\"\"))\n                        tktag.add(.output, \"currentLine\", \"end - 2 lines linestart\", \"end - 2 lines lineend\")\n                        tktag.configure(.output, \"currentLine\", foreground=getRcmdr(\"command.text.color\"))\n                    }\n                    current.line <- paste(current.line, lines[jline],sep=\"\\n\")\n                    jline <- jline + 1\n                    iline <- iline + 1\n                }\n                if (!(is.null(current.line) || is.na(current.line))) doItAndPrint(current.line, log=FALSE, rmd=TRUE)\n                iline <- iline + 1\n                tkyview.moveto(.output, 1)\n                tkfocus(.log)\n            }\n            if (length(as.character(tksearch(.log, \"-regexp\", \"-forward\",  \"--\", \"\\\\n\\\\n$\", \"1.0\"))\n) == 0){\n                tkinsert(.log, \"end\", \"\\n\")\n            }\n            cursor.line.posn <- 1 + floor(as.numeric(tkindex(.log, \"insert\")))\n            tkmark.set(.log, \"insert\", paste(cursor.line.posn, \".0\", sep=\"\"))\n            tktag.remove(.log, \"sel\", \"1.0\", \"end\")\n        }\n        else if (as.character(tkselect(notebook)) == RmdFrame$ID) {\n            compileRmd()\n        }\n        else{ \n            compileRnw()\n        }\n    }\n    \n    # right-click context menus\n    contextMenuLog <- function(){\n        .log <- LogWindow()\n        contextMenu <- tkmenu(tkmenu(.log), tearoff=FALSE)\n        tkadd(contextMenu, \"command\", label=gettextRcmdr(\"Submit\"), command=onSubmit)\n        tkadd(contextMenu, \"separator\")\n        tkadd(contextMenu, \"command\", label=gettextRcmdr(\"Cut\"), command=onCut)\n        tkadd(contextMenu, \"command\", label=gettextRcmdr(\"Copy\"), command=onCopy)\n        tkadd(contextMenu, \"command\", label=gettextRcmdr(\"Paste\"), command=onPaste)\n        tkadd(contextMenu, \"command\", label=gettextRcmdr(\"Delete\"), command=onDelete)\n        tkadd(contextMenu, \"separator\")\n        tkadd(contextMenu, \"command\", label=gettextRcmdr(\"Find...\"), command=onFind)\n        tkadd(contextMenu, \"command\", label=gettextRcmdr(\"Select all\"), command=onSelectAll)\n        tkadd(contextMenu, \"separator\")\n        tkadd(contextMenu, \"command\", label=gettextRcmdr(\"Undo\"), command=onUndo)\n        tkadd(contextMenu, \"command\", label=gettextRcmdr(\"Redo\"), command=onRedo)\n        tkadd(contextMenu, \"separator\")\n        tkadd(contextMenu, \"command\", label=gettextRcmdr(\"Clear window\"), command=onClear)\n        tkpopup(contextMenu, tkwinfo(\"pointerx\", .log), tkwinfo(\"pointery\", .log))\n    }\n    contextMenuRmd <- function(){\n        .rmd <- RmdWindow()\n        contextMenu <- tkmenu(tkmenu(.rmd), tearoff=FALSE)\n        tkadd(contextMenu, \"command\", label=gettextRcmdr(\"Generate report\"), command=onSubmit)\n        tkadd(contextMenu, \"command\", label=gettextRcmdr(\"Edit R Markdown document\"), command=editMarkdown)\n        tkadd(contextMenu, \"command\", label=gettextRcmdr(\"Remove last Markdown command block\"), command=removeLastRmdBlock)\n        tkadd(contextMenu, \"separator\")\n        tkadd(contextMenu, \"command\", label=gettextRcmdr(\"Cut\"), command=onCut)\n        tkadd(contextMenu, \"command\", label=gettextRcmdr(\"Copy\"), command=onCopy)\n        tkadd(contextMenu, \"command\", label=gettextRcmdr(\"Paste\"), command=onPaste)\n        tkadd(contextMenu, \"command\", label=gettextRcmdr(\"Delete\"), command=onDelete)\n        tkadd(contextMenu, \"separator\")\n#        tkadd(contextMenu, \"command\", label=gettextRcmdr(\"Find...\"), command=onFind)  # doesn't work FIXME\n        tkadd(contextMenu, \"command\", label=gettextRcmdr(\"Select all\"), command=onSelectAll)\n        tkadd(contextMenu, \"separator\")\n        tkadd(contextMenu, \"command\", label=gettextRcmdr(\"Undo\"), command=onUndo)\n        tkadd(contextMenu, \"command\", label=gettextRcmdr(\"Redo\"), command=onRedo)\n        tkadd(contextMenu, \"separator\")\n        tkadd(contextMenu, \"command\", label=gettextRcmdr(\"Clear window\"), command=onClear)\n        tkpopup(contextMenu, tkwinfo(\"pointerx\", .rmd), tkwinfo(\"pointery\", .rmd))\n    }\n    contextMenuRnw <- function(){\n        .rnw <- RnwWindow()\n        contextMenu <- tkmenu(tkmenu(.rnw), tearoff=FALSE)\n        tkadd(contextMenu, \"command\", label=gettextRcmdr(\"Generate PDF report\"), command=onSubmit)\n        tkadd(contextMenu, \"command\", label=gettextRcmdr(\"Edit knitr document\"), command=editKnitr)\n        tkadd(contextMenu, \"command\", label=gettextRcmdr(\"Remove last knitr command block\"), command=removeLastRnwBlock)\n        tkadd(contextMenu, \"separator\")\n        tkadd(contextMenu, \"command\", label=gettextRcmdr(\"Cut\"), command=onCut)\n        tkadd(contextMenu, \"command\", label=gettextRcmdr(\"Copy\"), command=onCopy)\n        tkadd(contextMenu, \"command\", label=gettextRcmdr(\"Paste\"), command=onPaste)\n        tkadd(contextMenu, \"command\", label=gettextRcmdr(\"Delete\"), command=onDelete)\n        tkadd(contextMenu, \"separator\")\n#        tkadd(contextMenu, \"command\", label=gettextRcmdr(\"Find...\"), command=onFind) # doesn't work FIXME\n        tkadd(contextMenu, \"command\", label=gettextRcmdr(\"Select all\"), command=onSelectAll)\n        tkadd(contextMenu, \"separator\")\n        tkadd(contextMenu, \"command\", label=gettextRcmdr(\"Undo\"), command=onUndo)\n        tkadd(contextMenu, \"command\", label=gettextRcmdr(\"Redo\"), command=onRedo)\n        tkadd(contextMenu, \"separator\")\n        tkadd(contextMenu, \"command\", label=gettextRcmdr(\"Clear window\"), command=onClear)\n        tkpopup(contextMenu, tkwinfo(\"pointerx\", .rnw), tkwinfo(\"pointery\", .rnw))\n    }\n    contextMenuOutput <- function(){\n        .output <- OutputWindow()\n        contextMenu <- tkmenu(tkmenu(.output), tearoff=FALSE)\n        tkadd(contextMenu, \"command\", label=gettextRcmdr(\"Cut\"), command=onCut)\n        tkadd(contextMenu, \"command\", label=gettextRcmdr(\"Copy\"), command=onCopy)\n        tkadd(contextMenu, \"command\", label=gettextRcmdr(\"Paste\"), command=onPaste)\n        tkadd(contextMenu, \"command\", label=gettextRcmdr(\"Delete\"), command=onDelete)\n        tkadd(contextMenu, \"separator\")\n        tkadd(contextMenu, \"command\", label=gettextRcmdr(\"Find...\"), command=onFind)\n        tkadd(contextMenu, \"command\", label=gettextRcmdr(\"Select all\"), command=onSelectAll)\n        tkadd(contextMenu, \"separator\")\n        tkadd(contextMenu, \"command\", label=gettextRcmdr(\"Undo\"), command=onUndo)\n        tkadd(contextMenu, \"command\", label=gettextRcmdr(\"Redo\"), command=onRedo)\n        tkadd(contextMenu, \"separator\")\n        tkadd(contextMenu, \"command\", label=gettextRcmdr(\"Clear window\"), command=onClear)\n        tkpopup(contextMenu, tkwinfo(\"pointerx\", .output), tkwinfo(\"pointery\", .output))\n    }\n    contextMenuMessages <- function(){\n        .messages <- MessagesWindow()\n        contextMenu <- tkmenu(tkmenu(.messages), tearoff=FALSE)\n        tkadd(contextMenu, \"command\", label=gettextRcmdr(\"Cut\"), command=onCut)\n        tkadd(contextMenu, \"command\", label=gettextRcmdr(\"Copy\"), command=onCopy)\n        tkadd(contextMenu, \"command\", label=gettextRcmdr(\"Paste\"), command=onPaste)\n        tkadd(contextMenu, \"command\", label=gettextRcmdr(\"Delete\"), command=onDelete)\n        tkadd(contextMenu, \"separator\")\n        tkadd(contextMenu, \"command\", label=gettextRcmdr(\"Find...\"), command=onFind)\n        tkadd(contextMenu, \"command\", label=gettextRcmdr(\"Select all\"), command=onSelectAll)\n        tkadd(contextMenu, \"separator\")\n        tkadd(contextMenu, \"command\", label=gettextRcmdr(\"Undo\"), command=onUndo)\n        tkadd(contextMenu, \"command\", label=gettextRcmdr(\"Redo\"), command=onRedo)\n        tkadd(contextMenu, \"separator\")\n        tkadd(contextMenu, \"command\", label=gettextRcmdr(\"Clear window\"), command=onClear)\n        tkpopup(contextMenu, tkwinfo(\"pointerx\", .messages), tkwinfo(\"pointery\", .messages))\n    }\n    \n    # main Commander window\n    if (getRcmdr(\"crisp.dialogs\")) tclServiceMode(on=FALSE)\n    putRcmdr(\"commanderWindow\", tktoplevel(class=\"Rcommander\"))\n    .commander <- CommanderWindow()\n    tcl(\"wm\", \"iconphoto\", .commander, \"-default\", \"::image::RlogoIcon\")\n    tkwm.geometry(.commander, placement)\n    tkwm.title(.commander, gettextRcmdr(\"R Commander\"))\n    tkwm.protocol(.commander, \"WM_DELETE_WINDOW\", \n        if (getRcmdr(\"quit.R.on.close\")) closeCommanderAndR else CloseCommander)\n    topMenu <- tkmenu(.commander)\n    tkconfigure(.commander, menu=topMenu)\n    position <- numeric(0)\n    \n    # install menus\n    if (!getRcmdr(\"suppress.menus\")){\n        for (m in 1:nrow(Menus)){\n            install <- if (oldMenu) \"\" else Menus[m, 7]\n            if ((install != \"\") && (!eval(parse(text=install)))) next\n            if (Menus[m, 1] == \"menu\") {\n                position[Menus[m, 2]] <- 0\n                assign(Menus[m, 2], tkmenu(get(Menus[m, 3]), tearoff=FALSE))\n                menus[[Menus[m, 2]]] <- list(ID=get(Menus[m, 2])$ID, position=0)\n            }\n            else if (Menus[m, 1] == \"item\") {\n                position[Menus[m, 2]] <- position[Menus[m, 2]] + 1\n                if (Menus[m, 3] == \"command\"){\n                    if (Menus[m, 6] == \"\")\n                        tkadd(get(Menus[m, 2]), \"command\", label=gettextMenus(Menus[m, 4]),\n                            command=get(Menus[m, 5]))\n                    else {\n                        tkadd(get(Menus[m, 2]), \"command\", label=gettextMenus(Menus[m, 4]),\n                            command=get(Menus[m, 5]), state=\"disabled\")\n                        menuItems <- menuItems + 1\n                        menus[[Menus[m, 2]]]$position <- position[Menus[m, 2]]\n                        .Menus[[menuItems]] <- list(ID=menus[[Menus[m, 2]]]$ID, position=position[Menus[m, 2]],\n                            activation=eval(parse(text=paste(\"function()\", Menus[m, 6]))))\n                    }\n                }\n                else if (Menus[m, 3] == \"cascade\")\n                    tkadd(get(Menus[m, 2]), \"cascade\", label=gettextMenus(Menus[m, 4]),\n                        menu=get(Menus[m, 5]))\n                else if (Menus[m, 3] == \"separator\")\n                    tkadd(get(Menus[m, 2]), \"separator\")\n                else stop(paste(gettextRcmdr(\"menu definition error:\"), Menus[m, ], collapse=\" \"),\n                    domain=NA)\n            }\n            else stop(paste(gettextRcmdr(\"menu definition error:\"), Menus[m, ], collapse=\" \"),\n                domain=NA)\n        }\n    }\n    putRcmdr(\"Menus\", .Menus)\n    putRcmdr(\"autoRestart\", FALSE)\n    activateMenus()\n    \n    # toolbar\n    controlsFrame <- tkframe(CommanderWindow())\n    editButton <- buttonRcmdr(controlsFrame, text=gettextRcmdr(\"Edit data set\"), command=onEdit, \n        image=\"::image::editIcon\", compound=\"left\")\n    viewButton <- buttonRcmdr(controlsFrame, text=gettextRcmdr(\"View data set\"), command=onView,\n        image=\"::image::viewIcon\", compound=\"left\")\n    putRcmdr(\"dataSetName\", tclVar(gettextRcmdr(\"<No active dataset>\")))\n    putRcmdr(\"dataSetLabel\", tkbutton(controlsFrame, textvariable=getRcmdr(\"dataSetName\"), foreground=\"red\",\n        relief=\"groove\", command=selectActiveDataSet, image=\"::image::dataIcon\", compound=\"left\"))\n    \n    # script and markdown tabs\n    notebook <- ttknotebook(CommanderWindow())\n    logFrame <- ttkframe(CommanderWindow())    \n    putRcmdr(\"logWindow\", tktext(logFrame, bg=\"white\", foreground=getRcmdr(\"log.text.color\"),\n        font=getRcmdr(\"logFont\"), height=log.height, width=log.width, wrap=\"none\", undo=TRUE))\n    .log <- LogWindow()\n    logXscroll <- ttkscrollbar(logFrame, orient=\"horizontal\",\n        command=function(...) tkxview(.log, ...))\n    logYscroll <- ttkscrollbar(logFrame,\n        command=function(...) tkyview(.log, ...))\n    tkconfigure(.log, xscrollcommand=function(...) tkset(logXscroll, ...))\n    tkconfigure(.log, yscrollcommand=function(...) tkset(logYscroll, ...))\n    RmdFrame <- ttkframe(CommanderWindow())\n    putRcmdr(\"RmdWindow\", tktext(RmdFrame, bg=\"#FAFAFA\", foreground=getRcmdr(\"log.text.color\"),\n        font=getRcmdr(\"logFont\"), height=log.height, width=log.width, wrap=\"none\", undo=TRUE))\n    .rmd <- RmdWindow()\n    rmd.template <- setOption(\"rmd.template\", \n        system.file(\"etc\", if (getRcmdr(\"capabilities\")$pandoc) \"Rcmdr-RMarkdown-Template.Rmd\"\n            else \"Rcmdr-Markdown-Template.Rmd\", package=\"Rcmdr\"))\n    template <- paste(readLines(rmd.template), collapse=\"\\n\")\n    if (getRcmdr(\"use.rgl\")) template <- paste0(template, \n      \"\\n\\n```{r echo=FALSE}\\n# include this code chunk as-is to enable 3D graphs\\nlibrary(rgl)\\nknitr::knit_hooks$set(webgl = hook_webgl)\\n```\\n\\n\")\n    tkinsert(.rmd, \"end\", template)\n    putRcmdr(\"markdown.output\", FALSE)\n    RmdXscroll <- ttkscrollbar(RmdFrame, orient=\"horizontal\",\n        command=function(...) tkxview(.rmd, ...))\n    RmdYscroll <- ttkscrollbar(RmdFrame,\n        command=function(...) tkyview(.rmd, ...))\n    tkconfigure(.rmd, xscrollcommand=function(...) tkset(RmdXscroll, ...))\n    tkconfigure(.rmd, yscrollcommand=function(...) tkset(RmdYscroll, ...))    \n    \n    RnwFrame <- ttkframe(CommanderWindow())\n    putRcmdr(\"RnwWindow\", tktext(RnwFrame, bg=\"#FAFAFA\", foreground=getRcmdr(\"log.text.color\"),\n        font=getRcmdr(\"logFont\"), height=log.height, width=log.width, wrap=\"none\", undo=TRUE))\n    .rnw <- RnwWindow()\n    rnw.template <- setOption(\"rnw.template\", \n        system.file(\"etc\", \"Rcmdr-knitr-Template.Rnw\", package=\"Rcmdr\"))\n    template <- paste(readLines(rnw.template), collapse=\"\\n\")\n    tkinsert(.rnw, \"end\", template)\n    putRcmdr(\"knitr.output\", FALSE)\n    RnwXscroll <- ttkscrollbar(RnwFrame, orient=\"horizontal\",\n        command=function(...) tkxview(.rnw, ...))\n    RnwYscroll <- ttkscrollbar(RnwFrame,\n        command=function(...) tkyview(.rnw, ...))\n    tkconfigure(.rnw, xscrollcommand=function(...) tkset(RnwXscroll, ...))\n    tkconfigure(.rnw, yscrollcommand=function(...) tkset(RnwYscroll, ...))    \n    \n    outputFrame <- tkframe(.commander) \n    submitButtonLabel <- tclVar(gettextRcmdr(\"Submit\"))\n    submitButton <- if (getRcmdr(\"console.output\"))\n        buttonRcmdr(CommanderWindow(), textvariable=submitButtonLabel, borderwidth=\"2\", command=onSubmit,\n            image=\"::image::submitIcon\", compound=\"left\")\n    else buttonRcmdr(outputFrame, textvariable=submitButtonLabel, borderwidth=\"2\", command=onSubmit, \n        image=\"::image::submitIcon\", compound=\"left\")\n    \n    tkbind(CommanderWindow(), \"<Button-1>\", function() {\n        if (as.character(tkselect(notebook)) == logFrame$ID) tclvalue(submitButtonLabel) <- gettextRcmdr(\"Submit\")\n        if (as.character(tkselect(notebook)) == RmdFrame$ID) tclvalue(submitButtonLabel) <- gettextRcmdr(\"Generate report\")\n        if (as.character(tkselect(notebook)) == RnwFrame$ID) tclvalue(submitButtonLabel) <- gettextRcmdr(\"Generate PDF report\")\n    })\n    putRcmdr(\"outputWindow\", tktext(outputFrame, bg=\"white\", foreground=getRcmdr(\"output.text.color\"),\n        font=getRcmdr(\"logFont\"), height=output.height, width=log.width, wrap=\"none\", undo=TRUE))\n    .output <- OutputWindow()\n    outputXscroll <- ttkscrollbar(outputFrame, orient=\"horizontal\",\n        command=function(...) tkxview(.output, ...))\n    outputYscroll <- ttkscrollbar(outputFrame,\n        command=function(...) tkyview(.output, ...))\n    tkconfigure(.output, xscrollcommand=function(...) tkset(outputXscroll, ...))\n    tkconfigure(.output, yscrollcommand=function(...) tkset(outputYscroll, ...))\n    # messages window\n    messagesFrame <- tkframe(.commander)\n    putRcmdr(\"messagesWindow\", tktext(messagesFrame, bg=\"lightgray\",\n        font=getRcmdr(\"logFont\"), height=messages.height, width=log.width, wrap=\"none\", undo=TRUE))\n    .messages <- MessagesWindow()\n    messagesXscroll <- ttkscrollbar(messagesFrame, orient=\"horizontal\",\n        command=function(...) tkxview(.messages, ...))\n    messagesYscroll <- ttkscrollbar(messagesFrame,\n        command=function(...) tkyview(.messages, ...))\n    tkconfigure(.messages, xscrollcommand=function(...) tkset(messagesXscroll, ...))\n    tkconfigure(.messages, yscrollcommand=function(...) tkset(messagesYscroll, ...))\n    \n    # configure toolbar, etc., install various windows and widgets\n    putRcmdr(\"modelName\", tclVar(gettextRcmdr(\"<No active model>\")))\n    putRcmdr(\"modelLabel\", tkbutton(controlsFrame, textvariable=getRcmdr(\"modelName\"), foreground=\"red\",\n        relief=\"groove\", command=selectActiveModel, image=\"::image::modelIcon\", compound=\"left\"))\n    show.edit.button <- options(\"Rcmdr\")[[1]]$show.edit.button\n    show.edit.button <- if (is.null(show.edit.button)) TRUE else show.edit.button\n    if (!getRcmdr(\"suppress.menus\")){\n        tkgrid(labelRcmdr(controlsFrame, image=\"::image::RlogoIcon\", compound=\"left\"),\n            labelRcmdr(controlsFrame, text=gettextRcmdr(\"   Data set:\")), getRcmdr(\"dataSetLabel\"),\n            if(show.edit.button) editButton, viewButton,\n            labelRcmdr(controlsFrame, text=gettextRcmdr(\"Model:\")), getRcmdr(\"modelLabel\"), sticky=\"w\", pady=c(3, 3))\n        tkgrid(controlsFrame, sticky=\"w\")\n        tkgrid.configure(getRcmdr(\"dataSetLabel\"), padx=c(2, 5))\n        tkgrid.configure(getRcmdr(\"modelLabel\"), padx=c(2, 10))\n        tkgrid.configure(editButton, padx=c(10, 1))\n        if (show.edit.button) tkgrid.configure(viewButton, padx=c(1, 15))\n        else tkgrid.configure(viewButton, padx=c(10, 15))\n    }\n    .log.commands <-  getRcmdr(\"log.commands\")\n    .console.output <- getRcmdr(\"console.output\")\n    if (.log.commands) {\n        tkgrid(.log, logYscroll, sticky=\"news\", columnspan=2)\n        tkgrid(logXscroll)\n        tkgrid(logFrame, sticky=\"news\", padx=10, pady=0, columnspan=2)\n        tkgrid(.rmd, RmdYscroll, sticky=\"news\", columnspan=2)\n        tkgrid(RmdXscroll)\n        tkgrid(.rnw, RnwYscroll, sticky=\"news\", columnspan=2)\n        tkgrid(RnwXscroll)\n        if (getRcmdr(\"use.markdown\")) tkgrid(RmdFrame, sticky=\"news\", padx=10, pady=0, columnspan=2)\n        if (getRcmdr(\"use.knitr\")) tkgrid(RnwFrame, sticky=\"news\", padx=10, pady=0, columnspan=2)\n    }\n    tkadd(notebook, logFrame, text=gettextRcmdr(\"R Script\"), padding=6)\n    if (getRcmdr(\"use.markdown\")) tkadd(notebook, RmdFrame, text=gettextRcmdr(\"R Markdown\"), padding=6)\n    if (getRcmdr(\"use.knitr\")) tkadd(notebook, RnwFrame, text=gettextRcmdr(\"knitr Document\"), padding=6)\n    tkgrid(notebook, sticky=\"news\")\n    if (.log.commands && .console.output) tkgrid(submitButton, sticky=\"w\", pady=c(0, 6))\n    tkgrid(labelRcmdr(outputFrame, text=gettextRcmdr(\"Output\"), font=\"RcmdrOutputMessagesFont\", foreground=title.color),\n        if (.log.commands && !.console.output) submitButton, sticky=\"sw\", pady=c(6, 6))\n    tkgrid(.output, outputYscroll, sticky=\"news\", columnspan=2)\n    tkgrid(outputXscroll, columnspan=1 + (.log.commands && !.console.output))\n    if (!.console.output) tkgrid(outputFrame, sticky=\"news\", padx=10, pady=0, columnspan=2)\n    tkgrid(labelRcmdr(messagesFrame, text=gettextRcmdr(\"Messages\"), font=\"RcmdrOutputMessagesFont\", foreground=title.color), \n           sticky=\"w\", pady=c(6, 6))\n    tkgrid(.messages, messagesYscroll, sticky=\"news\", columnspan=2)\n    tkgrid(messagesXscroll)\n    if (!.console.output) tkgrid(messagesFrame, sticky=\"news\", padx=10, pady=0, columnspan=2) ##rmh & J. Fox\n    tkgrid.configure(logYscroll, sticky=\"ns\")\n    tkgrid.configure(logXscroll, sticky=\"ew\")\n    tkgrid.configure(RmdYscroll, sticky=\"ns\")\n    tkgrid.configure(RmdXscroll, sticky=\"ew\")\n    tkgrid.configure(RnwYscroll, sticky=\"ns\")\n    tkgrid.configure(RnwXscroll, sticky=\"ew\")\n    tkgrid.configure(outputYscroll, sticky=\"ns\")\n    tkgrid.configure(outputXscroll, sticky=\"ew\")\n    tkgrid.configure(messagesYscroll, sticky=\"ns\")\n    tkgrid.configure(messagesXscroll, sticky=\"ew\")\n    .commander <- CommanderWindow()\n    tkgrid.rowconfigure(.commander, 0, weight=0)\n    tkgrid.rowconfigure(.commander, 1, weight=1)\n    tkgrid.rowconfigure(.commander, 2, weight=1)\n    tkgrid.columnconfigure(.commander, 0, weight=1)\n    tkgrid.columnconfigure(.commander, 1, weight=0)\n    if (.log.commands){\n        tkgrid.rowconfigure(logFrame, 0, weight=1)\n        tkgrid.rowconfigure(logFrame, 1, weight=0)\n        tkgrid.columnconfigure(logFrame, 0, weight=1)\n        tkgrid.columnconfigure(logFrame, 1, weight=0)\n        if (getRcmdr(\"use.markdown\")){\n            tkgrid.rowconfigure(RmdFrame, 0, weight=1)\n            tkgrid.rowconfigure(RmdFrame, 1, weight=0)\n            tkgrid.columnconfigure(RmdFrame, 0, weight=1)\n            tkgrid.columnconfigure(RmdFrame, 1, weight=0)\n        }\n        if (getRcmdr(\"use.knitr\")){\n            tkgrid.rowconfigure(RnwFrame, 0, weight=1)\n            tkgrid.rowconfigure(RnwFrame, 1, weight=0)\n            tkgrid.columnconfigure(RnwFrame, 0, weight=1)\n            tkgrid.columnconfigure(RnwFrame, 1, weight=0)\n        }\n    }\n    if (!.console.output){\n        tkgrid.rowconfigure(outputFrame, 0, weight=0)\n        tkgrid.rowconfigure(outputFrame, 1, weight=1)\n        tkgrid.rowconfigure(outputFrame, 2, weight=0)\n        tkgrid.columnconfigure(outputFrame, 0, weight=1)\n        tkgrid.columnconfigure(outputFrame, 1, weight=0)\n    }\n    tkgrid.rowconfigure(messagesFrame, 0, weight=0)\n    tkgrid.rowconfigure(messagesFrame, 1, weight=0)\n    tkgrid.rowconfigure(messagesFrame, 2, weight=0)\n    tkgrid.columnconfigure(messagesFrame, 0, weight=1)\n    tkgrid.columnconfigure(messagesFrame, 1, weight=0)\n    .Tcl(\"update idletasks\")\n    tkbind(.commander, \"<Control-x>\", onCut)\n    tkbind(.commander, \"<Control-X>\", onCut)\n    tkbind(.commander, \"<Control-c>\", onCopy)\n    tkbind(.commander, \"<Control-C>\", onCopy)\n    tkbind(.commander, \"<Control-r>\", onSubmit)\n    tkbind(.commander, \"<Control-R>\", onSubmit)\n    tkbind(.commander, \"<Control-Tab>\", onSubmit)\n    tkbind(.commander, \"<Control-f>\", onFind)\n    tkbind(.commander, \"<Control-F>\", onFind)\n    tkbind(.commander, \"<F3>\", onFind)\n    tkbind(.commander, \"<Control-s>\", saveLog)\n    tkbind(.commander, \"<Control-S>\", saveLog)\n    tkbind(.commander, \"<Control-a>\", onSelectAll)\n    tkbind(.commander, \"<Control-A>\", onSelectAll)\n    tkbind(.commander, \"<Control-w>\", onRedo)\n    tkbind(.commander, \"<Control-W>\", onRedo)\n    tkbind(.commander, \"<Alt-BackSpace>\", onUndo)\n    tkbind(.log, \"<ButtonPress-3>\", contextMenuLog)\n    tkbind(.rmd, \"<ButtonPress-3>\", contextMenuRmd)\n    tkbind(.rnw, \"<ButtonPress-3>\", contextMenuRnw)\n    tkbind(.output, \"<ButtonPress-3>\", contextMenuOutput)\n    tkbind(.messages, \"<ButtonPress-3>\", contextMenuMessages)\n    tkbind(.log, \"<Control-ButtonPress-1>\", contextMenuLog)\n    tkbind(.rmd, \"<Control-ButtonPress-1>\", contextMenuRmd)\n    tkbind(.rnw, \"<Control-ButtonPress-1>\", contextMenuRnw)\n    tkbind(.output, \"<Control-ButtonPress-1>\", contextMenuOutput)\n    tkbind(.messages, \"<Control-ButtonPress-1>\", contextMenuMessages)\n    tkbind(.rmd, \"<Control-e>\", editMarkdown)\n    tkbind(.rmd, \"<Control-E>\", editMarkdown)\n    tkbind(.rnw, \"<Control-e>\", editKnitr)\n    tkbind(.rnw, \"<Control-E>\", editKnitr)\n    if (MacOSXP()){\n        tkbind(.commander, \"<Meta-x>\", onCut)\n        tkbind(.commander, \"<Meta-X>\", onCut)\n        tkbind(.commander, \"<Meta-c>\", onCopy)\n        tkbind(.commander, \"<Meta-C>\", onCopy)\n        tkbind(.commander, \"<Meta-v>\", onPaste)\n        tkbind(.commander, \"<Meta-V>\", onPaste)\n        tkbind(.commander, \"<Meta-r>\", onSubmit)\n        tkbind(.commander, \"<Meta-R>\", onSubmit)\n        tkbind(.commander, \"<Meta-Tab>\", onSubmit)\n        tkbind(.commander, \"<Meta-f>\", onFind)\n        tkbind(.commander, \"<Meta-F>\", onFind)\n        tkbind(.commander, \"<Meta-s>\", saveLog)\n        tkbind(.commander, \"<Meta-S>\", saveLog)\n        tkbind(.commander, \"<Meta-a>\", onSelectAll)\n        tkbind(.commander, \"<Meta-A>\", onSelectAll)\n        tkbind(.commander, \"<Meta-w>\", onRedo)\n        tkbind(.commander, \"<Meta-W>\", onRedo)\n        tkbind(.log, \"<Meta-ButtonPress-1>\", contextMenuLog)\n        tkbind(.rmd, \"<Meta-ButtonPress-1>\", contextMenuRmd)\n        tkbind(.rnw, \"<Meta-ButtonPress-1>\", contextMenuRnw)\n        tkbind(.output, \"<Meta-ButtonPress-1>\", contextMenuOutput)\n        tkbind(.messages, \"<Meta-ButtonPress-1>\", contextMenuMessages)\n        tkbind(.rmd, \"<Meta-e>\", editMarkdown)\n        tkbind(.rmd, \"<Meta-E>\", editMarkdown)\n        tkbind(.rnw, \"<Meta-e>\", editKnitr)\n        tkbind(.rnw, \"<Meta-E>\", editKnitr)\n    }\n    tkwm.deiconify(.commander)\n    tkfocus(.commander)\n    if (getRcmdr(\"crisp.dialogs\")) tclServiceMode(on=TRUE)\n    tkwait.commander <- options(\"Rcmdr\")[[1]]$tkwait.commander  # to address problem in Debian Linux\n    if ((!is.null(tkwait.commander)) && tkwait.commander) {\n        putRcmdr(\".commander.done\", tclVar(\"0\"))\n        tkwait.variable(getRcmdr(\".commander.done\"))\n    }\n    Message(paste(gettextRcmdr(\"R Commander Version \"), \" \", getRcmdr(\"RcmdrVersion\"), \": \", date(), sep=\"\"))\n    if (.Platform$GUI == \"Rgui\"  && ismdi()) Message(gettextRcmdr(\n        \"The Windows version of the R Commander works best under\\nRGui with the single-document interface (SDI); see ?Commander.\"),\n        type=\"warning\")\n    if (RappP()  && mavericksP() && appnap() == \"on\") Message(gettextRcmdr(\n      \"The Mac OS X version of the R Commander works best under R.app\\nwith app nap turned off. See ?Commander and the Tools menu.\"),\n      type=\"warning\")\n}\n\n# put commands in script, markdown, and knitr tabs\nlogger <- function(command, rmd=TRUE){\n    pushCommand(command)\n    .log <- LogWindow()\n    .rmd <- RmdWindow()\n    .rnw <- RnwWindow()\n    .output <- OutputWindow()\n    Rmd <- rmd && is.null(attr(command, \"suppressRmd\")) && (getRcmdr(\"use.markdown\") || getRcmdr(\"use.knitr\"))\n    command <- splitCmd(command)\n    if (getRcmdr(\"log.commands\")) {\n        last2 <- tclvalue(tkget(.log, \"end -2 chars\", \"end\"))\n        if (last2 != \"\\n\\n\") tkinsert(.log, \"end\", \"\\n\")\n        tkinsert(.log, \"end\", paste(command,\"\\n\", sep=\"\"))\n        tkyview.moveto(.log, 1)\n        if (Rmd){\n            if (getRcmdr(\"use.markdown\")){\n                if (getRcmdr(\"startNewCommandBlock\")){\n                    beginRmdBlock()\n                    tkinsert(.rmd, \"end\", paste(command, \"\\n\", sep=\"\"))\n                    tkyview.moveto(.rmd, 1)\n                    putRcmdr(\"markdown.output\", TRUE)\n                    endRmdBlock()\n                }\n                else{\n                    tkinsert(.rmd, \"end\", paste(command, \"\\n\", sep=\"\"))\n                    tkyview.moveto(.rmd, 1)\n                    putRcmdr(\"markdown.output\", TRUE)\n                    putRcmdr(\"rmd.generated\", TRUE)\n                }\n            }\n            if (getRcmdr(\"use.knitr\")){\n                if (getRcmdr(\"startNewKnitrCommandBlock\")){\n                    beginRnwBlock()\n                    tkinsert(.rnw, \"end\", paste(command, \"\\n\", sep=\"\"))\n                    tkyview.moveto(.rnw, 1)\n                    putRcmdr(\"knitr.output\", TRUE)\n                    endRnwBlock()\n                }\n                else{\n                    tkinsert(.rnw, \"end\", paste(command, \"\\n\", sep=\"\"))\n                    tkyview.moveto(.rnw, 1)\n                    putRcmdr(\"knitr.output\", TRUE)\n                    putRcmdr(\"rnw.generated\", TRUE)\n                }\n            }\n        }\n        \n    }\n    lines <- strsplit(command, \"\\n\")[[1]]\n    tkinsert(.output, \"end\", \"\\n\")\n    if (getRcmdr(\"console.output\")) {\n        for (line in seq(along.with=lines)) {\n            prompt <- ifelse (line==1, paste(\"\\n\", getRcmdr(\"prefixes\")[1], sep=\"\"), paste(\"\\n\", getRcmdr(\"prefixes\")[2], sep=\"\"))\n            cat(paste(prompt, lines[line]))\n        }\n        cat(\"\\n\")\n    }\n    else {\n        for (line in  seq(along.with=lines)) {\n            prompt <- ifelse(line==1, \"> \", \"+ \")\n            tkinsert(.output, \"end\", paste(prompt, lines[line], \"\\n\", sep=\"\"))\n            tktag.add(.output, \"currentLine\", \"end - 2 lines linestart\", \"end - 2 lines lineend\")\n            tktag.configure(.output, \"currentLine\", foreground=getRcmdr(\"command.text.color\"))\n            tkyview.moveto(.output, 1)\n        }\n    }\n    command\n}\n\njustDoIt <- function(command) {\n    command <- enc2native(command)\n    Message()\n    if (!getRcmdr(\"suppress.X11.warnings\")){\n        messages.connection <- file(open=\"w+\")\n        sink(messages.connection, type=\"message\")\n        on.exit({\n            sink(type=\"message\")\n            close(messages.connection)\n        })\n    }\n    else messages.connection <- getRcmdr(\"messages.connection\")\n    capture.output(result <- try(eval(parse(text=command), envir=.GlobalEnv), silent=TRUE))\n    if (class(result)[1] ==  \"try-error\"){\n        Message(message=paste(strsplit(result, \":\")[[1]][2]), type=\"error\")\n        tkfocus(CommanderWindow())\n        return(result)\n    }\n    checkWarnings(readLines(messages.connection))\n    if (getRcmdr(\"RStudio\")) Sys.sleep(0)\n    result\n}\n\n# execute commands, save commands and output\ndoItAndPrint <- function(command, log=TRUE, rmd=log) {\n    command <- enc2native(command)\n    Message()\n    .console.output <- getRcmdr(\"console.output\")\n    .output <- OutputWindow()\n    if (!.console.output) {\n        width <- (as.numeric(tkwinfo(\"width\", .output)) - 2*as.numeric(tkcget(.output, borderwidth=NULL)) - 2)/\n            as.numeric(tkfont.measure(tkcget(.output, font=NULL), \"0\"))\n        eval(parse(text=paste(\"options(width=\", floor(width), \")\", sep=\"\")))\n    }\n    if (!getRcmdr(\"suppress.X11.warnings\")){\n        messages.connection <- file(open=\"w+\")\n        sink(messages.connection, type=\"message\")\n        on.exit({\n            sink(type=\"message\")\n            close(messages.connection)\n        })\n    }\n    else messages.connection <- getRcmdr(\"messages.connection\")\n    output.connection <- file(open=\"w+\")\n    sink(output.connection, type=\"output\")\n    on.exit({\n        if (!.console.output) sink(type=\"output\") # if .console.output, output connection already closed\n        close(output.connection)\n    }, add=TRUE)\n    if (log) logger(command, rmd=rmd) \n    else {\n        pushCommand(command)\n        if (rmd) {\n            if (getRcmdr(\"use.markdown\")) enterMarkdown(command)\n            if (getRcmdr(\"use.knitr\")) enterKnitr(command)\n        }\n    }\n    result <- try(parse(text=paste(command)), silent=TRUE)\n    if (class(result)[1] == \"try-error\"){\n        if (rmd) {\n            if (getRcmdr(\"use.markdown\")) {\n                removeLastRmdBlock()\n                putRcmdr(\"startNewCommandBlock\", TRUE)\n            }\n            if (getRcmdr(\"use.knitr\")) {\n                removeLastRnwBlock()\n                putRcmdr(\"startNewKnitrCommandBlock\", TRUE)\n            }\n        }\n        Message(message=paste(strsplit(result, \":\")[[1]][2]), type=\"error\")\n        if (.console.output) sink(type=\"output\")\n        tkfocus(CommanderWindow())\n        return(result)\n    } else {\n        exprs <- result\n        result <- NULL\n    }\n    for (i in seq_along(exprs)) {\n        ei <- exprs[i]\n        tcl(\"update\")\n        result <-  try(withVisible(eval(ei, envir=.GlobalEnv)), silent=TRUE)\n        if (class(result)[1] ==  \"try-error\"){\n            if (rmd) {\n                if (getRcmdr(\"use.markdown\")) {\n                    removeLastRmdBlock()\n                    putRcmdr(\"startNewCommandBlock\", TRUE)\n                }\n                if (getRcmdr(\"use.knitr\")) {\n                    removeLastRnwBlock()\n                    putRcmdr(\"startNewKnitrCommandBlock\", TRUE)\n                }\n            }\n            Message(message=paste(strsplit(result, \":\")[[1]][2]), type=\"error\")\n            if (.console.output) sink(type=\"output\")\n            tkfocus(CommanderWindow())\n            return(result)\n        }\n        result <- if (result$visible == FALSE) NULL else result$value\n        if (!is.null(result)) pushOutput(result)\n        if (isS4object(result)) show(result) else print(result)\n        .Output <- readLines(output.connection)\n        if (length(.Output) > 0 && .Output[length(.Output)] == \"NULL\")\n            .Output <- .Output[-length(.Output)] # suppress \"NULL\" line at end of output\n        if (length(.Output) != 0) {  # is there output to print?\n            if (.console.output) {\n                out <- .Output\n                sink(type=\"output\")\n                for (line in out) cat(paste(line, \"\\n\", sep=\"\"))\n            }\n            else{\n                for (line in .Output) tkinsert(.output, \"end\", paste(line, \"\\n\", sep=\"\"))\n                tkyview.moveto(.output, 1)\n            }\n        }\n        else if (.console.output) sink(type=\"output\")\n        if (RExcelSupported()) # added by Erich Neuwirth\n            putRExcel(\".rexcel.last.output\",.Output)\n        # errors already intercepted, display any warnings\n        checkWarnings(readLines(messages.connection))\n    }\n    if (getRcmdr(\"RStudio\")) Sys.sleep(0)\n    result\n}\n\ncheckWarnings <- function(messages){\n    if (getRcmdr(\"suppress.X11.warnings\")){\n        X11.warning <- grep(\"X11 protocol error|Warning in structure\", messages)\n        if (length(X11.warning) > 0){\n            messages <- messages[-X11.warning]\n        }\n        if (length(messages) == 0) Message()\n        else if (length(messages) > 10) {\n            messages <- c(paste(length(messages), \"warnings.\"),\n                gettextRcmdr(\"First and last 5 warnings:\"),\n                head(messages,5), \". . .\", tail(messages, 5))\n            Message(message=paste(messages, collapse=\"\\n\"), type=\"warning\")\n        }\n        else {\n            if (length(grep(\"warning\", messages, ignore.case=TRUE)) > 0)\n                Message(message=paste(messages, collapse=\"\\n\"), type=\"warning\")\n            else Message(message=paste(messages, collapse=\"\\n\"), type=\"note\")\n        }\n    }\n    else{\n        if (length(messages) == 0) Message()\n        else if (length(messages) > 10){\n            messages <- c(paste(length(messages), \"warnings.\"),\n                gettextRcmdr(\"First and last 5 warnings:\"),\n                head(messages, 5), \". . .\", tail(messages, 5))\n            Message(message=paste(messages, collapse=\"\\n\"), type=\"warning\")\n        }\n        else {\n            if (length(grep(\"warning\", messages, ignore.case=TRUE)) > 0)\n                Message(message=paste(messages, collapse=\"\\n\"), type=\"warning\")\n            else Message(message=paste(messages, collapse=\"\\n\"), type=\"note\")\n        }\n    }\n    tkfocus(CommanderWindow())\n}\n\npause <- function(seconds = 1){\n    if (seconds <= 0) stop(\"seconds must be positive\")\n    start <- proc.time()[3]\n    while (as.numeric(elapsed <- (proc.time()[3] - start)) < seconds) {}\n    elapsed\n}\n\nMessage <- function(message, type=c(\"note\", \"error\", \"warning\")){\n    tcl(\"update\") \n    .message <- MessagesWindow()\n    type <- match.arg(type)\n    if (type != \"note\") tkbell()\n    if (getRcmdr(\"retain.messages\")) {\n        if (missing(message) && !is.null(getRcmdr(\"last.message\"))) {\n            putRcmdr(\"last.message\", NULL)\n            tkyview.moveto(.message, 1.0)\n        }\n    }\n    else if (type == \"note\"){\n        lastMessage <- tclvalue(tkget(MessagesWindow(),  \"end - 2 lines\", \"end\"))\n        if (length(c(grep(gettextRcmdr(\"ERROR:\"), lastMessage), grep(gettextRcmdr(\"WARNING:\"), lastMessage))) == 0)\n            tkdelete(.message, \"1.0\", \"end\")\n    }\n    else tkdelete(.message, \"1.0\", \"end\")\n    col <- if (type == \"error\") getRcmdr(\"error.text.color\")\n    else if (type == \"warning\") getRcmdr(\"warning.text.color\")\n    else getRcmdr(\"output.text.color\")\n    prefix <- switch(type, error=gettextRcmdr(\"ERROR\"), warning=gettextRcmdr(\"WARNING\"), note=gettextRcmdr(\"NOTE\"))\n    if (missing(message)){\n        return()\n    }\n    putRcmdr(\"last.message\", type)\n    message <- paste(prefix, \": \", message, sep=\"\")\n    if (getRcmdr(\"retain.messages\") && getRcmdr(\"number.messages\")) {\n        messageNumber <- getRcmdr(\"messageNumber\") + 1\n        putRcmdr(\"messageNumber\", messageNumber)\n        message <- paste(\"[\", messageNumber, \"] \", message, sep=\"\")\n    }\n    if (RExcelSupported()) # added by Erich Neuwirth\n        putRExcel(\".rexcel.last.message\",message)\n    lines <- strsplit(message, \"\\n\")[[1]]\n    console.output <- getRcmdr(\"console.output\")\n    if (!console.output){\n        width <- (as.numeric(tkwinfo(\"width\", .message)) - 2*as.numeric(tkcget(.message, borderwidth=NULL)) - 2)/\n            as.numeric(tkfont.measure(tkcget(.message, font=NULL), \"0\"))\n        eval(parse(text=paste(\"options(width=\", floor(width), \")\", sep=\"\")))\n    }\n    lines <- strwrap(lines)\n    if (console.output) {\n        if (sink.number() != 0) sink()\n        for (jline in seq(along.with=lines)) {\n            Header <- if (jline==1) getRcmdr(\"prefixes\")[3] else getRcmdr(\"prefixes\")[4]\n            cat(paste(Header, lines[jline], \"\\n\", sep=\"\"))\n        } \n    }\n    else\n        for (line in lines){\n            tagName <- messageTag()\n            tkinsert(.message, \"end\", paste(line, \"\\n\", sep=\"\"))\n            tktag.add(.message, tagName, \"end - 2 lines linestart\", \"end - 2 lines lineend\")\n            tktag.configure(.message, tagName, foreground=col)\n            tkyview.moveto(.message, 1.0)\n        }\n}\n\nmessageTag <- function(reset=FALSE){\n    if (reset){\n        putRcmdr(\"tagNumber\", 0)\n        return()\n    }\n    tagNumber <- getRcmdr(\"tagNumber\") + 1\n    putRcmdr(\"tagNumber\", tagNumber)\n    paste(\"message\", tagNumber, sep=\"\")\n}\n\npushOutput <- function(element) {\n    stack <- getRcmdr(\"outputStack\")\n    stack <- c(list(element), stack[-getRcmdr(\"length.output.stack\")])\n    putRcmdr(\"outputStack\", stack)\n}\n\npopOutput <- function(keep=FALSE){\n    stack <- getRcmdr(\"outputStack\")\n    lastOutput <- stack[[1]]\n    if (!keep) putRcmdr(\"outputStack\", c(stack[-1], NA))\n    lastOutput\n}\n\npushCommand <- function(element) {\n    stack <- getRcmdr(\"commandStack\")\n    stack <- c(list(element), stack[-getRcmdr(\"length.command.stack\")])\n    putRcmdr(\"commandStack\", stack)\n}\n\npopCommand <- function(keep=FALSE){\n    stack <- getRcmdr(\"commandStack\")\n    lastCommand <- stack[[1]]\n    if (!keep) putRcmdr(\"commandStack\", c(stack[-1], NA))\n    lastCommand\n}\n",
    "created" : 1478613362622.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "507628902",
    "id" : "B17B746D",
    "lastKnownWriteTime" : 1472135132,
    "last_content_update" : 1472135132,
    "path" : "D:/R-package-sources/Rcmdr-svn/Rcmdr-current/R/commander.R",
    "project_path" : "R/commander.R",
    "properties" : {
        "chunk_rendered_width" : "650"
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}