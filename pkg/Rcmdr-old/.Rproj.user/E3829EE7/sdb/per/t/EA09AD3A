{
    "collab_server" : "",
    "contents" : "# Graphs menu dialogs\n\n# last modified 2016-07-19 by J. Fox\n#  applied patch to improve window behaviour supplied by Milan Bouchet-Valat 2011-09-22\n\n# the following functions improved by Miroslav Ristic 2013-07: barGraph, indexPlot, boxPlot, \n#    DensityPlot, Histogram, pieChart, PlotMeans, QQPlot, scatterPlot, scatterPlotMatrix, Stripchart,\n#    Xyplot\n\nindexPlot <- function () {\n    defaults <- list(initial.x = NULL, initial.type = \"spikes\", initial.identify = \"auto\",\n        initial.id.n=\"2\", initial.tab=0, \n        initial.ylab=gettextRcmdr(\"<auto>\"), initial.main=gettextRcmdr(\"<auto>\"))\n    dialog.values <- getDialog(\"indexPlot\", defaults)\n    initializeDialog(title = gettextRcmdr(\"Index Plot\"), use.tabs=TRUE)\n    xBox <- variableListBox(dataTab, Numeric(), title = gettextRcmdr(\"Variable (pick one)\"), \n        initialSelection = varPosn (dialog.values$initial.x, \"numeric\"))\n    optionsFrame <- tkframe(optionsTab)    \n    optFrame <- ttklabelframe(optionsFrame, labelwidget=tklabel(optionsFrame, text = gettextRcmdr(\"Plot Options\"),\n        font=\"RcmdrTitleFont\", foreground=getRcmdr(\"title.color\")))\n    parFrame <- ttklabelframe(optionsFrame, labelwidget=tklabel(optionsFrame, text = gettextRcmdr(\"Plot Labels\"),\n        font=\"RcmdrTitleFont\", foreground=getRcmdr(\"title.color\")))\n    typeVariable <- tclVar(dialog.values$initial.type)\n    styleFrame <- tkframe(optFrame)\n    radioButtons(styleFrame, name = \"type\", buttons = c(\"spikes\", \"points\"),\n        labels = gettextRcmdr(c(\"Spikes\", \"Points\")), title = gettextRcmdr(\"Style of plot\"),\n        initialValue = dialog.values$initial.type)\n    identifyPointsFrame <- tkframe(optFrame)\n    radioButtons(identifyPointsFrame, name = \"identify\", buttons = c(\"auto\", \"mouse\", \n        \"not\"), labels = gettextRcmdr(c(\"Automatically\", \n            \"Interactively with mouse\", \"Do not identify\")), title = gettextRcmdr(\"Identify Points\"), \n        initialValue = dialog.values$initial.identify)    \n    id.n.Var <- tclVar(dialog.values$initial.id.n) \n    npointsSpinner <- tkspinbox(identifyPointsFrame, from=1, to=10, width=2, textvariable=id.n.Var)\n    ylabVar <- tclVar(dialog.values$initial.ylab)\n    mainVar <- tclVar(dialog.values$initial.main)\n    ylabEntry <- ttkentry(parFrame, width = \"25\", textvariable = ylabVar)\n    ylabScroll <- ttkscrollbar(parFrame, orient = \"horizontal\",\n        command = function(...) tkxview(ylabEntry, ...))\n    tkconfigure(ylabEntry, xscrollcommand = function(...) tkset(ylabScroll,\n        ...))\n    tkgrid(labelRcmdr(parFrame, text = gettextRcmdr(\"y-axis label\")), ylabEntry, sticky = \"ew\", padx=6)\n    tkgrid(labelRcmdr(parFrame, text =\"\"), ylabScroll, sticky = \"ew\", padx=6)\n    mainEntry <- ttkentry(parFrame, width = \"25\", textvariable = mainVar)\n    mainScroll <- ttkscrollbar(parFrame, orient = \"horizontal\",\n        command = function(...) tkxview(mainEntry, ...))\n    tkconfigure(mainEntry, xscrollcommand = function(...) tkset(mainScroll,\n        ...))\n    tkgrid(labelRcmdr(parFrame, text = gettextRcmdr(\"Graph title\")), mainEntry, sticky = \"ew\", padx=6)\n    tkgrid(labelRcmdr(parFrame, text=\"\"), mainScroll, sticky = \"ew\", padx=6)\n    onOK <- function() {\n        tab <- if (as.character(tkselect(notebook)) == dataTab$ID) 0 else 1\n        x <- getSelection(xBox)\n        identify <- tclvalue(identifyVariable)\n        id.n <- tclvalue(id.n.Var)\n        if (is.na(suppressWarnings(as.numeric(id.n))) || round(as.numeric(id.n)) != as.numeric(id.n)){\n            errorCondition(recall = indexPlot, message = gettextRcmdr(\"number of points to identify must be an integer\"))\n            return()\n        }\n        ylab <- trim.blanks(tclvalue(ylabVar))\n        ylab <- if (ylab == gettextRcmdr(\"<auto>\"))\n            \"\"\n        else paste(\", ylab=\\\"\", ylab, \"\\\"\", sep = \"\")\n        main <- trim.blanks(tclvalue(mainVar))\n        main <- if (main == gettextRcmdr(\"<auto>\"))\n            \"\"\n        else paste(\", main=\\\"\", main, \"\\\"\", sep = \"\")\n        putDialog (\"indexPlot\", list(initial.x = x, initial.type = tclvalue(typeVariable), initial.identify = identify,\n            initial.id.n = id.n, initial.tab=tab,\n            initial.ylab = tclvalue(ylabVar), initial.main = tclvalue(mainVar)))\n        closeDialog()\n        if (length(x) == 0) {\n            errorCondition(recall = indexPlot, message = gettextRcmdr(\"You must select a variable\"))\n            return()\n        }\n        type <- if (tclvalue(typeVariable) == \"spikes\") \"h\" else \"p\"\n        method <- if (identify == \"mouse\") \"identify\" else \"y\"\n        id.n.use <- if (identify == \"not\") 0 else id.n\n        .activeDataSet <- ActiveDataSet()\n        if (identify == \"mouse\") {\n            RcmdrTkmessageBox(title = \"Identify Points\", message = paste(gettextRcmdr(\"Use left mouse button to identify points,\\n\"), \n                gettextRcmdr(if (MacOSXP()) \n                    \"esc key to exit.\"\n                    else \"right button to exit.\"), sep = \"\"), icon = \"info\", \n                type = \"ok\")\n        }\n        command <- paste(\"with(\", .activeDataSet, \", indexplot(\", x, \", type='\", type,\n            \"', id.method='\", method, \"', id.n=\", id.n.use, \", labels=rownames(\", .activeDataSet, \")\",\n            ylab, main, \"))\", sep=\"\") # Modification\n        if (identify == \"mouse\") command <- suppressMarkdown(command)\n        doItAndPrint(command)\n        activateMenus()\n        tkfocus(CommanderWindow())\n    }\n    OKCancelHelp(helpSubject = \"indexplot\", reset = \"indexPlot\", apply=\"indexPlot\")\n    tkgrid(getFrame(xBox), sticky = \"nw\")\n    tkgrid(typeFrame, sticky = \"w\")\n    tkgrid(styleFrame, sticky = \"w\")\n    tkgrid(identifyFrame, sticky=\"w\")\n    tkgrid(labelRcmdr(identifyPointsFrame, text=gettextRcmdr(\"Number of points to identify  \")), npointsSpinner, sticky=\"w\")\n    tkgrid(identifyPointsFrame, sticky=\"w\")\n    tkgrid(optFrame, parFrame, sticky = \"nswe\", padx=6, pady=6)\n    tkgrid(optionsFrame, sticky = \"w\")\n    dialogSuffix(use.tabs=TRUE, grid.buttons=TRUE)\n}\n\nHistogram <- function () {\n    defaults <- list(initial.x = NULL, initial.scale = \"frequency\",\n        initial.bins = gettextRcmdr (\"<auto>\"), initial.tab=0,\n        initial.xlab=gettextRcmdr(\"<auto>\"), initial.ylab=gettextRcmdr(\"<auto>\"),\n        initial.main=gettextRcmdr(\"<auto>\"), initial.group = NULL)\n    dialog.values <- getDialog(\"Histogram\", defaults)\n    initializeDialog(title = gettextRcmdr(\"Histogram\"), use.tabs=TRUE)\n    xBox <- variableListBox(dataTab, Numeric(), title = gettextRcmdr(\"Variable (pick one)\"),\n        initialSelection = varPosn (dialog.values$initial.x, \"numeric\"))\n    initial.group <- dialog.values$initial.group\n    .groups <- if (is.null(initial.group)) FALSE else initial.group\n    onOK <- function() {\n        tab <- if (as.character(tkselect(notebook)) == dataTab$ID) 0 else 1\n        x <- getSelection(xBox)\n        closeDialog()\n        if (length(x) == 0) {\n            errorCondition(recall = Histogram, message = gettextRcmdr(\"You must select a variable\"))\n            return()\n        }\n        bins <- tclvalue(binsVariable)\n        opts <- options(warn = -1)\n        binstext <- if (bins == gettextRcmdr(\"<auto>\"))\n            \"\\\"Sturges\\\"\"\n        else as.numeric(bins)\n        options(opts)\n        scale <- tclvalue(scaleVariable)\n        xlab <- trim.blanks(tclvalue(xlabVar))\n        xlab <- if (xlab == gettextRcmdr(\"<auto>\"))\n            \"\"\n        else paste(\", xlab=\\\"\", xlab, \"\\\"\", sep = \"\")\n        ylab <- trim.blanks(tclvalue(ylabVar))\n        ylab <- if (ylab == gettextRcmdr(\"<auto>\"))\n            \"\"\n        else paste(\", ylab=\\\"\", ylab, \"\\\"\", sep = \"\")\n        main <- trim.blanks(tclvalue(mainVar))\n        main <- if (main == gettextRcmdr(\"<auto>\"))\n            \"\"\n        else paste(\", main=\\\"\", main, \"\\\"\", sep = \"\")\n        putDialog (\"Histogram\", list (initial.x = x, initial.bins = bins, initial.scale = scale,\n            initial.tab=tab, initial.xlab=tclvalue(xlabVar), initial.ylab = tclvalue(ylabVar),\n            initial.main = tclvalue(mainVar), initial.group=if (.groups == FALSE) NULL else .groups))\n        if (is.null(.groups) || .groups == FALSE) {\n            command <- paste(\"with(\", ActiveDataSet(), \", Hist(\", x, ', scale=\"', scale, '\", breaks=',\n                binstext, ', col=\"darkgray\"', xlab, ylab, main, \"))\", sep=\"\")\n        }\n        else{\n            command <- paste(\"with(\", ActiveDataSet(), \", Hist(\", x, \", groups=\", .groups, ', scale=\"',\n                scale, '\", breaks=', binstext, ', col=\"darkgray\"', xlab, ylab, main, \"))\", sep=\"\")\n        }\n        doItAndPrint(command)\n        activateMenus()\n        tkfocus(CommanderWindow())\n    }\n    groupsBox(Histogram, initialGroup=initial.group,\n        initialLabel=if (is.null(initial.group)) gettextRcmdr(\"Plot by groups\")\n        else paste(gettextRcmdr(\"Plot by:\"), initial.group), window=dataTab)\n    OKCancelHelp(helpSubject = \"Hist\", reset = \"Histogram\", apply=\"Histogram\")\n    optionsFrame <- tkframe(optionsTab)\n    optFrame <- ttklabelframe(optionsFrame, labelwidget=tklabel(optionsFrame, text = gettextRcmdr(\"Plot Options\"),\n        font=\"RcmdrTitleFont\", foreground=getRcmdr(\"title.color\")))\n    parFrame <- ttklabelframe(optionsFrame, labelwidget=tklabel(optionsFrame, text = gettextRcmdr(\"Plot Labels\"),\n        font=\"RcmdrTitleFont\", foreground=getRcmdr(\"title.color\")))\n    xlabVar <- tclVar(dialog.values$initial.xlab)\n    ylabVar <- tclVar(dialog.values$initial.ylab)\n    mainVar <- tclVar(dialog.values$initial.main)\n    xlabEntry <- ttkentry(parFrame, width = \"25\", textvariable = xlabVar)\n    xlabScroll <- ttkscrollbar(parFrame, orient = \"horizontal\",\n        command = function(...) tkxview(xlabEntry, ...))\n    tkconfigure(xlabEntry, xscrollcommand = function(...) tkset(xlabScroll,\n        ...))\n    tkgrid(labelRcmdr(parFrame, text = gettextRcmdr(\"x-axis label\")), xlabEntry, sticky = \"ew\", padx=6)\n    tkgrid(labelRcmdr(parFrame, text =\"\"), xlabScroll, sticky = \"ew\", padx=6)\n    ylabEntry <- ttkentry(parFrame, width = \"25\", textvariable = ylabVar)\n    ylabScroll <- ttkscrollbar(parFrame, orient = \"horizontal\",\n        command = function(...) tkxview(ylabEntry, ...))\n    tkconfigure(ylabEntry, xscrollcommand = function(...) tkset(ylabScroll,\n        ...))\n    tkgrid(labelRcmdr(parFrame, text = gettextRcmdr(\"y-axis label\")), ylabEntry, sticky = \"ew\", padx=6)\n    tkgrid(labelRcmdr(parFrame, text =\"\"), ylabScroll, sticky = \"ew\", padx=6)\n    mainEntry <- ttkentry(parFrame, width = \"25\", textvariable = mainVar)\n    mainScroll <- ttkscrollbar(parFrame, orient = \"horizontal\",\n        command = function(...) tkxview(mainEntry, ...))\n    tkconfigure(mainEntry, xscrollcommand = function(...) tkset(mainScroll,\n        ...))\n    tkgrid(labelRcmdr(parFrame, text = gettextRcmdr(\"Graph title\")), mainEntry, sticky = \"ew\", padx=6)\n    tkgrid(labelRcmdr(parFrame, text=\"\"), mainScroll, sticky = \"ew\", padx=6)\n    axisFrame <- tkframe(optFrame)\n    radioButtons(axisFrame, name = \"scale\", buttons = c(\"frequency\", \"percent\",\n        \"density\"), labels = gettextRcmdr(c(\"Frequency counts\",\n            \"Percentages\", \"Densities\")), title = gettextRcmdr(\"Axis Scaling\"),\n        initialValue = dialog.values$initial.scale)\n    binsFrame <- tkframe(optFrame)\n    binsVariable <- tclVar(dialog.values$initial.bins)\n    binsField <- ttkentry(binsFrame, width = \"8\", textvariable = binsVariable)\n    tkgrid(getFrame(xBox), sticky = \"nw\")\n    tkgrid(groupsFrame, sticky = \"w\")\n    tkgrid(labelRcmdr(binsFrame, text = gettextRcmdr(\"Number of bins: \")),\n        binsField, sticky = \"w\")\n    tkgrid(binsFrame, sticky = \"w\")\n    tkgrid(scaleFrame, sticky = \"w\")\n    tkgrid(axisFrame, sticky = \"w\")\n    tkgrid.configure(binsField, sticky = \"e\")\n    tkgrid(optFrame, parFrame, sticky = \"nswe\", padx=6, pady=6)\n    tkgrid(optionsFrame, sticky = \"w\")\n    dialogSuffix(use.tabs=TRUE, grid.buttons=TRUE)\n}\n\nstemAndLeaf <- function () {\n    Library(\"aplpack\")\n    defaults <- list(initial.x = NULL, initial.leafs.auto=\"1\", initial.unit = 0,  initial.m = \"auto\", \n        initial.trim = 1, initial.depths = 1, initial.reverse = 1, initial.style = \"Tukey\",\n        initial.tab=0, initial.group = NULL) \n    dialog.values <- getDialog(\"stemAndLeaf\", defaults)\n    initializeDialog(title = gettextRcmdr(\"Stem and Leaf Display\"), \n        #                     preventCrisp = TRUE, use.tabs=TRUE)\n        use.tabs=TRUE)\n    initial.group <- dialog.values$initial.group\n    .groups <- if (is.null(initial.group)) FALSE else initial.group\n    xBox <- variableListBox(dataTab, Numeric(), title = gettextRcmdr(\"Variable (pick one)\"), \n        initialSelection = varPosn (dialog.values$initial.x, \"numeric\"))\n    displayDigits <- tclVar(formatC(10^dialog.values$initial.unit))\n    leafsDigitValue <- tclVar(dialog.values$initial.unit)\n    leafsDigitOnce <- TRUE\n    onDigits <- function(...) {\n        if(leafsDigitOnce) {\n            leafsDigitOnce <<- FALSE\n            return()\n        }\n        \n        tclvalue(displayDigits) <- formatC(10^as.numeric(tclvalue(leafsDigitValue)), \n            format = \"fg\", big.mark = \",\")\n        tclvalue(leafsAutoVariable) <- \"0\"\n    }\n    radioButtons(optionsTab, name = \"parts\", buttons = c(\"auto\", \"one\", \"two\", \n        \"five\"), values = c(\"auto\", \"1\", \"2\", \"5\"), labels = c(gettextRcmdr(\"Automatic\"), \n            \"   1\", \"   2\", \"   5\"), title = gettextRcmdr(\"Parts Per Stem\"), \n        initialValue = dialog.values$initial.m)\n    radioButtons(optionsTab, name = \"style\", buttons = c(\"Tukey\", \"bare\"), \n        labels = gettextRcmdr(c(\"Tukey\", \"Repeated stem digits\")), \n        title = gettextRcmdr(\"Style of Divided Stems\"), \n        initialValue = dialog.values$initial.style)\n    checkBoxes(optionsTab, frame=\"otherOptionsFrame\", \n        boxes = c(\"trimOutliers\", \"showDepths\", \"reverseNegative\"), \n        initialValues = c(dialog.values$initial.trim, dialog.values$initial.depths, dialog.values$initial.reverse),\n        labels = gettextRcmdr(c(\"Trim outliers\", \"Show depths\", \"Reverse negative leaves\")),\n        title=gettextRcmdr(\"Other Options\"))\n    leafsFrame <- tkframe(optionsTab)\n    leafsDigitValue <- tclVar(dialog.values$initial.unit)\n    leafsDigitSlider <- tkscale(leafsFrame, from = -6, to = 6, \n        showvalue = FALSE, variable = leafsDigitValue, resolution = 1, \n        orient = \"horizontal\", command = onDigits)\n    leafsDigitShow <- labelRcmdr(leafsFrame, textvariable = displayDigits, \n        width = 8, justify = \"right\")\n    leafsAutoVariable <- tclVar(dialog.values$initial.leafs.auto)\n    leafsDigitCheckBox <- ttkcheckbutton(leafsFrame, text = gettextRcmdr(\"Automatic\"),\n        variable = leafsAutoVariable)\n    onOK <- function() {\n        tab <- if (as.character(tkselect(notebook)) == dataTab$ID) 0 else 1\n        x <- getSelection(xBox)\n        m <- tclvalue(partsVariable)\n        style <- tclvalue (styleVariable)\n        trim <- tclvalue (trimOutliersVariable)\n        depths <- tclvalue (showDepthsVariable)\n        reverse <- tclvalue (reverseNegativeVariable)\n        unit <- if (tclvalue(leafsAutoVariable) == \"1\") \n            \"\"\n        else paste(\", unit=\", 10^as.numeric(tclvalue(leafsDigitValue)), \n            sep = \"\")\n        putDialog (\"stemAndLeaf\", list(initial.x = x, initial.leafs.auto=tclvalue(leafsAutoVariable),\n            initial.unit = as.numeric(tclvalue(leafsDigitValue)),  initial.m = m, \n            initial.trim = trim, initial.depths = depths, initial.reverse = reverse, \n            initial.style = style, initial.tab=tab,\n            initial.group=if (.groups == FALSE) NULL else .groups))\n        closeDialog()\n        if (length(x) == 0) {\n            errorCondition(recall = stemAndLeaf, message = gettextRcmdr(\"You must select a variable\"))\n            return()\n        }\n        trim <- if (tclvalue(trimOutliersVariable) == \"1\") \n            \"\"\n        else \", trim.outliers=FALSE\"\n        depths <- if (tclvalue(showDepthsVariable) == \"1\") \n            \"\"\n        else \", depths=FALSE\"\n        reverse <- if (tclvalue(reverseNegativeVariable) == \"1\") \n            \"\"\n        else \", reverse.negative.leaves=FALSE\"\n        m <- if (tclvalue(partsVariable) == \"auto\") \n            \"\"\n        else paste(\", m=\", tclvalue(partsVariable), sep = \"\")\n        style <- if (tclvalue(styleVariable) == \"Tukey\") \n            \"\"\n        else \", style=\\\"bare\\\"\"\n        command <- if (is.null(.groups) || .groups == FALSE){\n            paste(\"with(\", ActiveDataSet(), \", stem.leaf(\",  \n                x, style, unit, m, trim, depths, reverse, \", na.rm=TRUE))\", \n                sep = \"\")\n        }\n        else {\n            levels <- levels(eval(parse(text=paste(ActiveDataSet(), \"$\", .groups, sep=\"\")), \n                envir=.GlobalEnv))\n            paste(\"with(\", ActiveDataSet(),\n                \", stem.leaf.backback(\", x,\"[\", .groups, ' == \"', levels[1], '\"], ',\n                x,\"[\", .groups, ' == \"', levels[2], '\"]',\n                style, unit, m, trim, depths, reverse, \", na.rm=TRUE))\", \n                sep = \"\")\n        }\n        doItAndPrint(command)\n        tkfocus(CommanderWindow())\n    }\n    groupsBox(stemAndLeaf, variables=TwoLevelFactors(), initialGroup=initial.group,\n        label=gettextRcmdr(\"Plot back-to-back by:\"),\n        initialLabel=if (is.null(initial.group)) gettextRcmdr(\"Plot back-to-back by\")\n        else paste(gettextRcmdr(\"Plot back-to-back by:\"), initial.group), \n        errorText=gettextRcmdr(\"There are no two-level factors in the active data set.\"), \n        window=dataTab)\n    OKCancelHelp(helpSubject = \"stem.leaf\", reset = \"stemAndLeaf\", apply = \"stemAndLeaf\")\n    tkgrid(getFrame(xBox), sticky = \"nw\")\n    tkgrid(labelRcmdr(leafsFrame, text = gettextRcmdr(\"Leafs Digit:  \"), \n        fg = getRcmdr(\"title.color\"), font=\"RcmdrTitleFont\"), leafsDigitCheckBox, \n        labelRcmdr(leafsFrame, text = gettextRcmdr(\"  or set:\"), \n            fg = \"red\"), leafsDigitShow, leafsDigitSlider, sticky = \"w\")\n    tkgrid(partsFrame, sticky = \"w\")\n    tkgrid(styleFrame, sticky = \"w\")\n    tkgrid(otherOptionsFrame, sticky=\"w\")\n    tkgrid(leafsFrame, sticky = \"w\")\n    tkgrid(groupsFrame, sticky = \"w\")\n    dialogSuffix(use.tabs=TRUE, grid.buttons=TRUE)\n}\n\nboxPlot <- function () {\n    defaults <- list(initial.x = NULL, initial.identify = \"y\", initial.group=NULL,\n        initial.xlab=gettextRcmdr(\"<auto>\"), initial.ylab=gettextRcmdr(\"<auto>\"), \n        initial.main=gettextRcmdr(\"<auto>\"), initial.tab=0)\n    dialog.values <- getDialog(\"boxPlot\", defaults)\n    initializeDialog(title = gettextRcmdr(\"Boxplot\"), use.tabs=TRUE)\n    xBox <- variableListBox(dataTab, Numeric(), title = gettextRcmdr(\"Variable (pick one)\"),\n        initialSelection = varPosn (dialog.values$initial.x, \"numeric\"))\n    optionsFrame <- tkframe(optionsTab)\n    optFrame <- ttklabelframe(optionsFrame, labelwidget=tklabel(optionsFrame, text = gettextRcmdr(\"Identify Outliers\"),\n        font=\"RcmdrTitleFont\", foreground=getRcmdr(\"title.color\")))\n    parFrame <- ttklabelframe(optionsFrame, labelwidget=tklabel(optionsFrame, text = gettextRcmdr(\"Plot Labels\"),\n        font=\"RcmdrTitleFont\", foreground=getRcmdr(\"title.color\")))\n    styleFrame <- tkframe(optFrame)\n    radioButtons(optFrame, name = \"identify\", buttons = c(\"y\", \"identify\", \"none\"),\n        labels = gettextRcmdr(c(\"Automatically\", \"With mouse\", \"No\")),\n        initialValue = dialog.values$initial.identify, )\n    initial.group <- dialog.values$initial.group\n    .groups <- if (is.null(initial.group)) FALSE else initial.group\n    xlabVar <- tclVar(dialog.values$initial.xlab)\n    ylabVar <- tclVar(dialog.values$initial.ylab)\n    mainVar <- tclVar(dialog.values$initial.main)\n    xlabEntry <- ttkentry(parFrame, width = \"25\", textvariable = xlabVar)\n    xlabScroll <- ttkscrollbar(parFrame, orient = \"horizontal\",\n        command = function(...) tkxview(xlabEntry, ...))\n    tkconfigure(xlabEntry, xscrollcommand = function(...) tkset(xlabScroll,\n        ...))\n    tkgrid(labelRcmdr(parFrame, text = gettextRcmdr(\"x-axis label\")), xlabEntry, sticky = \"ew\", padx=6)\n    tkgrid(labelRcmdr(parFrame, text =\"\"), xlabScroll, sticky = \"ew\", padx=6)\n    ylabEntry <- ttkentry(parFrame, width = \"25\", textvariable = ylabVar)\n    ylabScroll <- ttkscrollbar(parFrame, orient = \"horizontal\",\n        command = function(...) tkxview(ylabEntry, ...))\n    tkconfigure(ylabEntry, xscrollcommand = function(...) tkset(ylabScroll,\n        ...))\n    tkgrid(labelRcmdr(parFrame, text = gettextRcmdr(\"y-axis label\")), ylabEntry, sticky = \"ew\", padx=6)\n    tkgrid(labelRcmdr(parFrame, text =\"\"), ylabScroll, sticky = \"ew\", padx=6)\n    mainEntry <- ttkentry(parFrame, width = \"25\", textvariable = mainVar)\n    mainScroll <- ttkscrollbar(parFrame, orient = \"horizontal\",\n        command = function(...) tkxview(mainEntry, ...))\n    tkconfigure(mainEntry, xscrollcommand = function(...) tkset(mainScroll,\n        ...))\n    tkgrid(labelRcmdr(parFrame, text = gettextRcmdr(\"Graph title\")), mainEntry, sticky = \"ew\", padx=6)\n    tkgrid(labelRcmdr(parFrame, text=\"\"), mainScroll, sticky = \"ew\", padx=6)\n    onOK <- function() {\n        tab <- if (as.character(tkselect(notebook)) == dataTab$ID) 0 else 1\n        x <- getSelection(xBox)\n        identifyPoints <- tclvalue(identifyVariable)\n        xlab <- trim.blanks(tclvalue(xlabVar))\n        xlab <- if (xlab == gettextRcmdr(\"<auto>\"))\n            \"\"\n        else paste(\", xlab=\\\"\", xlab, \"\\\"\", sep = \"\")\n        ylab <- trim.blanks(tclvalue(ylabVar))\n        ylab <- if (ylab == gettextRcmdr(\"<auto>\"))\n            \"\"\n        else paste(\", ylab=\\\"\", ylab, \"\\\"\", sep = \"\")\n        main <- trim.blanks(tclvalue(mainVar))\n        main <- if (main == gettextRcmdr(\"<auto>\"))\n            \"\"\n        else paste(\", main=\\\"\", main, \"\\\"\", sep = \"\")\n        putDialog (\"boxPlot\", list(initial.x = x, initial.identify = identifyPoints,\n            initial.group=if (.groups == FALSE) NULL else .groups,\n            initial.xlab=tclvalue(xlabVar), initial.ylab=tclvalue(ylabVar),\n            initial.main=tclvalue(mainVar), initial.tab=tab))\n        closeDialog()\n        if (length(x) == 0) {\n            errorCondition(recall = boxPlot, message = gettextRcmdr(\"You must select a variable\"))\n            return()\n        }\n        .activeDataSet <- ActiveDataSet()\n        var <- paste(.activeDataSet, \"$\", x, sep = \"\")\n        if (identifyPoints == \"identify\")\n            RcmdrTkmessageBox(title = \"Identify Points\",\n                message = paste(gettextRcmdr(\"Use left mouse button to identify points,\\n\"),\n                    gettextRcmdr(if (MacOSXP()) \"esc key to exit.\"\n                        else \"right button to exit.\"), sep = \"\"),\n                icon = \"info\", type = \"ok\")\n        if (is.null(.groups) || .groups == FALSE) {\n            command <- paste(\"Boxplot( ~ \", x, \", data=\", .activeDataSet, ', id.method=\"',\n                identifyPoints, '\"', ylab, main, ')', sep=\"\")\n            if (identifyPoints == \"identify\") command <- suppressMarkdown(command)\n            \n            doItAndPrint(command)\n        }\n        else {\n            command <- paste(\"Boxplot(\", x, \"~\", .groups, \", data=\", .activeDataSet,\n                ', id.method=\"', identifyPoints, '\"', xlab, ylab, main, ')', sep = \"\")\n            if (identifyPoints == \"identify\") command <- suppressMarkdown(command)\n            doItAndPrint(command)\n        }\n        activateMenus()\n        tkfocus(CommanderWindow())\n    }\n    groupsBox(boxPlot, initialGroup=initial.group,\n        initialLabel=if (is.null(initial.group)) gettextRcmdr(\"Plot by groups\")\n        else paste(gettextRcmdr(\"Plot by:\"), initial.group), window=dataTab)\n    OKCancelHelp(helpSubject = \"Boxplot\", reset = \"boxPlot\", apply=\"boxPlot\")\n    tkgrid(getFrame(xBox), sticky = \"nw\")\n    tkgrid(groupsFrame, sticky = \"w\")\n    tkgrid(identifyFrame, stick = \"w\")\n    tkgrid(styleFrame, stick=\"w\")\n    tkgrid(optFrame, parFrame, sticky = \"nswe\", padx=6, pady=6)\n    tkgrid(optionsFrame, sticky = \"w\")\n    dialogSuffix(use.tabs=TRUE, grid.buttons=TRUE)\n}\n\nDotPlot <- function () {\n    defaults <- list(initial.x = NULL, initial.use.bins = 0,\n                     initial.bins = gettextRcmdr (\"<auto>\"), initial.tab=0,\n                     initial.xlab=gettextRcmdr(\"<auto>\"),\n                     initial.group = NULL)\n    dialog.values <- getDialog(\"DotPlot\", defaults)\n    initializeDialog(title = gettextRcmdr(\"Dot Plot\"), use.tabs=TRUE)\n    xBox <- variableListBox(dataTab, Numeric(), title = gettextRcmdr(\"Variable (pick one)\"),\n                            initialSelection = varPosn (dialog.values$initial.x, \"numeric\"))\n    initial.group <- dialog.values$initial.group\n    .groups <- if (is.null(initial.group)) FALSE else initial.group\n    onOK <- function() {\n        tab <- if (as.character(tkselect(notebook)) == dataTab$ID) 0 else 1\n        x <- getSelection(xBox)\n        closeDialog()\n        if (length(x) == 0) {\n            errorCondition(recall = DotPlot, message = gettextRcmdr(\"You must select a variable\"))\n            return()\n        }\n        use.bins <- tclvalue(useBinsVariable) == \"1\"\n        bins <- tclvalue(binsVariable)\n        opts <- options(warn = -1)\n        binstext <- if (bins == gettextRcmdr(\"<auto>\"))\n            \"\\\"Sturges\\\"\"\n        else as.numeric(bins)\n        binstext <- if (use.bins) paste(', breaks=', binstext, sep=\"\") else \"\"\n        options(opts)\n        xlab <- trim.blanks(tclvalue(xlabVar))\n        xlab <- if (xlab == gettextRcmdr(\"<auto>\"))\n            \"\"\n        else paste(\", xlab=\\\"\", xlab, \"\\\"\", sep = \"\")\n        putDialog (\"DotPlot\", list (initial.x = x, initial.bins = bins, initial.use.bins = if (use.bins) \"1\" else \"0\",\n                                    initial.tab=tab, initial.xlab=tclvalue(xlabVar), \n                                    initial.group=if (.groups == FALSE) NULL else .groups))\n        if (is.null(.groups) || .groups == FALSE) {\n            command <- paste(\"with(\", ActiveDataSet(), \", Dotplot(\", x, ', bin=', use.bins,\n                             binstext, xlab, \"))\", sep=\"\")\n        }\n        else{\n            command <- paste(\"with(\", ActiveDataSet(), \", Dotplot(\", x, \", by=\", .groups, ', bin=',\n                             use.bins, binstext, xlab, \"))\", sep=\"\")\n        }\n        doItAndPrint(command)\n        activateMenus()\n        tkfocus(CommanderWindow())\n    }\n    groupsBox(DotPlot, initialGroup=initial.group,\n              initialLabel=if (is.null(initial.group)) gettextRcmdr(\"Plot by groups\")\n              else paste(gettextRcmdr(\"Plot by:\"), initial.group), window=dataTab)\n    OKCancelHelp(helpSubject = \"Dotplot\", reset = \"DotPlot\", apply=\"DotPlot\", helpPackage=\"RcmdrMisc\")\n    optionsFrame <- tkframe(optionsTab)\n    optFrame <- ttklabelframe(optionsFrame, labelwidget=tklabel(optionsFrame, text = gettextRcmdr(\"Plot Options\"),\n                                                                font=\"RcmdrTitleFont\", foreground=getRcmdr(\"title.color\")))\n    parFrame <- ttklabelframe(optionsFrame)\n    xlabVar <- tclVar(dialog.values$initial.xlab)\n    xlabEntry <- ttkentry(parFrame, width = \"25\", textvariable = xlabVar)\n    xlabScroll <- ttkscrollbar(parFrame, orient = \"horizontal\",\n                               command = function(...) tkxview(xlabEntry, ...))\n    tkconfigure(xlabEntry, xscrollcommand = function(...) tkset(xlabScroll,\n                                                                ...))\n    tkgrid(labelRcmdr(parFrame, text = gettextRcmdr(\"x-axis label\")), xlabEntry, sticky = \"ew\", padx=6)\n    tkgrid(labelRcmdr(parFrame, text =\"\"), xlabScroll, sticky = \"ew\", padx=6)\n    binsFrame <- tkframe(optFrame)\n    useBinsVariable <- tclVar(dialog.values$initial.use.bins)\n    useBinsCheckBox <- ttkcheckbutton(binsFrame, text = gettextRcmdr(\"Bin variable\"),\n                                      variable = useBinsVariable)\n    binsVariable <- tclVar(dialog.values$initial.bins)\n    binsField <- ttkentry(binsFrame, width = \"8\", textvariable = binsVariable)\n    tkgrid(getFrame(xBox), sticky = \"nw\")\n    tkgrid(groupsFrame, sticky = \"w\")\n    tkgrid(useBinsCheckBox, sticky=\"w\")\n    tkgrid(labelRcmdr(binsFrame, text = gettextRcmdr(\"Number of bins: \")),\n           binsField, sticky = \"w\")\n    tkgrid(binsFrame, sticky = \"w\")\n    tkgrid.configure(binsField, sticky = \"e\")\n    tkgrid(optFrame, parFrame, sticky = \"nswe\", padx=6, pady=6)\n    tkgrid(optionsFrame, sticky = \"w\")\n    dialogSuffix(use.tabs=TRUE, grid.buttons=TRUE)\n}\n\nscatterPlot <- function () {\n    defaults <- list(initial.x = NULL, initial.y = NULL, initial.jitterx = 0, initial.jittery = 0,\n        initial.logstringx = 0, initial.logstringy = 0, initial.box = 0,\n        initial.line = 0, initial.smooth = 0, initial.spread = 0, initial.span = 50,\n        initial.ellipse=0, initial.levels=\".5, .9\",\n        initial.subset = gettextRcmdr (\"<all valid cases>\"), initial.ylab = gettextRcmdr (\"<auto>\"),\n        initial.xlab = gettextRcmdr(\"<auto>\"), initial.pch = gettextRcmdr(\"<auto>\"),\n        initial.cexValue = 1, initial.cex.axisValue = 1, initial.cex.labValue = 1, initialGroup=NULL, initial.lines.by.group=1,\n        initial.identify=gettextRcmdr(\"not\"), initial.identify.points=\"2\", initial.tab=0,\n        initial.main=gettextRcmdr(\"<auto>\"), initial.legend.pos=\"above\")\n    dialog.values <- getDialog(\"scatterPlot\", defaults)\n    initial.group <- dialog.values$initial.group\n    .linesByGroup <- if (dialog.values$initial.lines.by.group == 1) TRUE else FALSE\n    .groups <- if (is.null(initial.group)) FALSE else initial.group\n    initializeDialog(title = gettextRcmdr(\"Scatterplot\"), use.tabs=TRUE)\n    .numeric <- Numeric()\n    xBox <- variableListBox(dataTab, .numeric, title = gettextRcmdr(\"x-variable (pick one)\"),\n        initialSelection = varPosn (dialog.values$initial.x, \"numeric\"))\n    yBox <- variableListBox(dataTab, .numeric, title = gettextRcmdr(\"y-variable (pick one)\"),\n        initialSelection = varPosn (dialog.values$initial.y, \"numeric\"))\n    optionsParFrame <- tkframe(optionsTab)\n    parFrame <- ttklabelframe(optionsParFrame, labelwidget=tklabel(optionsParFrame, text=gettextRcmdr(\"Plot Labels and Points\"),\n        font=\"RcmdrTitleFont\", foreground=getRcmdr(\"title.color\")))\n    checkBoxes(window = optionsParFrame, frame = \"optionsFrame\",\n        boxes = c(\"jitterX\", \"jitterY\", \"logX\", \"logY\",\n            \"boxplots\", \"lsLine\", \"smoothLine\", \"spread\"), initialValues = c(\n                dialog.values$initial.jitterx, dialog.values$initial.jittery,\n                dialog.values$initial.logstringx, dialog.values$initial.logstringy,\n                dialog.values$initial.box, dialog.values$initial.line, dialog.values$initial.smooth,\n                dialog.values$initial.spread),labels = gettextRcmdr(c(\n                    \"Jitter x-variable\", \"Jitter y-variable\", \"Log x-axis\",\n                    \"Log y-axis\", \"Marginal boxplots\", \"Least-squares line\",\n                    \"Smooth line\", \"Show spread\")), title = gettextRcmdr(\"Plot Options\"), ttk=TRUE)\n    sliderValue <- tclVar(dialog.values$initial.span)\n    sliderFrame <- tkframe(optionsFrame)\n    slider <- tkscale(sliderFrame, from = 5, to = 100, showvalue = TRUE,\n        variable = sliderValue, resolution = 5, orient = \"horizontal\")\n    ellipseVariable <- tclVar(dialog.values$initial.ellipse)\n    ellipseFrame <- tkframe(optionsFrame)\n    ellipseCheckBox <- ttkcheckbutton(ellipseFrame, variable=ellipseVariable)\n    levelsVar <- tclVar(dialog.values$initial.levels)\n    levelsFrame <- tkframe(optionsFrame)\n    levelsEntry <- ttkentry(levelsFrame, width = \"10\", textvariable = levelsVar)\n    radioButtons(window=optionsFrame, name = \"identify\", buttons = c(\"auto\", \"mouse\",\n        \"not\"), labels = gettextRcmdr(c(\"Automatically\",\n            \"Interactively with mouse\", \"Do not identify\")), title = gettextRcmdr(\"Identify Points\"),\n        initialValue = dialog.values$initial.identify)\n    id.n.Var <- tclVar(dialog.values$initial.identify.points)\n    npointsFrame <- tkframe(optionsFrame)\n    npointsSpinner <- tkspinbox(npointsFrame, from=1, to=10, width=2, textvariable=id.n.Var)\n    subsetBox(dataTab, subset.expression = dialog.values$initial.subset)\n    tkbind(subsetEntry, \"<FocusIn>\", function() tkselection.clear(subsetEntry))\n    xlabVar <- tclVar(dialog.values$initial.xlab)\n    ylabVar <- tclVar(dialog.values$initial.ylab)\n    mainVar <- tclVar(dialog.values$initial.main)\n    xlabEntry <- ttkentry(parFrame, width = \"25\", textvariable = xlabVar)\n    xlabScroll <- ttkscrollbar(parFrame, orient = \"horizontal\",\n        command = function(...) tkxview(xlabEntry, ...))\n    tkconfigure(xlabEntry, xscrollcommand = function(...) tkset(xlabScroll,\n        ...))\n    tkbind(xlabEntry, \"<FocusIn>\", function() tkselection.clear(xlabEntry))\n    tkgrid(labelRcmdr(parFrame, text = gettextRcmdr(\"x-axis label\")), xlabEntry, sticky = \"ew\", padx=6)\n    tkgrid(labelRcmdr(parFrame, text =\"\"), xlabScroll, sticky = \"ew\", padx=6)\n    ylabEntry <- ttkentry(parFrame, width = \"25\", textvariable = ylabVar)\n    ylabScroll <- ttkscrollbar(parFrame, orient = \"horizontal\",\n        command = function(...) tkxview(ylabEntry, ...))\n    tkconfigure(ylabEntry, xscrollcommand = function(...) tkset(ylabScroll,\n        ...))\n    tkgrid(labelRcmdr(parFrame, text = gettextRcmdr(\"y-axis label\")), ylabEntry, sticky = \"ew\", padx=6)\n    tkgrid(labelRcmdr(parFrame, text=\"\"), ylabScroll, sticky = \"ew\", padx=6)\n    mainEntry <- ttkentry(parFrame, width = \"25\", textvariable = mainVar)\n    mainScroll <- ttkscrollbar(parFrame, orient = \"horizontal\",\n        command = function(...) tkxview(mainEntry, ...))\n    tkconfigure(mainEntry, xscrollcommand = function(...) tkset(mainScroll,\n        ...))\n    tkgrid(labelRcmdr(parFrame, text = gettextRcmdr(\"Graph title\")), mainEntry, sticky = \"ew\", padx=6)\n    tkgrid(labelRcmdr(parFrame, text=\"\"), mainScroll, sticky = \"ew\", padx=6)\n    pchVar <- tclVar(dialog.values$initial.pch)\n    pchEntry <- ttkentry(parFrame, width = 25, textvariable = pchVar)\n    cexValue <- tclVar(dialog.values$initial.cexValue)\n    cex.axisValue <- tclVar(dialog.values$initial.cex.axisValue)\n    cex.labValue <- tclVar(dialog.values$initial.cex.labValue)\n    cexSlider <- tkscale(parFrame, from = 0.5, to = 2.5, showvalue = TRUE,\n        variable = cexValue, resolution = 0.1, orient = \"horizontal\")\n    cex.axisSlider <- tkscale(parFrame, from = 0.5, to = 2.5,\n        showvalue = TRUE, variable = cex.axisValue, resolution = 0.1,\n        orient = \"horizontal\")\n    cex.labSlider <- tkscale(parFrame, from = 0.5, to = 2.5,\n        showvalue = TRUE, variable = cex.labValue, resolution = 0.1,\n        orient = \"horizontal\")\n    radioButtons(window=parFrame, name=\"legendPosition\", buttons=c(\"above\", \"topleft\", \"topright\",\n        \"bottomleft\", \"bottomright\"), labels=gettextRcmdr(c(\"Above plot\", \"Top left\", \"Top right\", \"Bottom left\",\n            \"Bottom right\")), title=gettextRcmdr(\"Legend Position\"),\n        initialValue=dialog.values$initial.legend.pos)\n    onOK <- function() {\n        tab <- if (as.character(tkselect(notebook)) == dataTab$ID) 0 else 1\n        x <- getSelection(xBox)\n        y <- getSelection(yBox)\n        jitter <- if (\"1\" == tclvalue(jitterXVariable) && \"1\" ==\n                tclvalue(jitterYVariable))\n            \", jitter=list(x=1, y=1)\"\n        else if (\"1\" == tclvalue(jitterXVariable))\n            \", jitter=list(x=1)\"\n        else if (\"1\" == tclvalue(jitterYVariable))\n            \", jitter=list(y=1)\"\n        else \"\"\n        logstring <- \"\"\n        if (\"1\" == tclvalue(logXVariable))\n            logstring <- paste(logstring, \"x\", sep = \"\")\n        if (\"1\" == tclvalue(logYVariable))\n            logstring <- paste(logstring, \"y\", sep = \"\")\n        identify <- tclvalue(identifyVariable)\n        id.n <- tclvalue(id.n.Var)\n        identify.text <- switch(identify,\n            auto = paste(\", id.method='mahal', id.n =\", id.n),\n            mouse = \", id.method='identify'\",\n            not = \"\")\n        box <- tclvalue(boxplotsVariable)\n        line <- tclvalue(lsLineVariable)\n        smooth <-  tclvalue(smoothLineVariable)\n        spread <- tclvalue(spreadVariable)\n        span <- as.numeric(tclvalue(sliderValue))\n        initial.ellipse <- tclvalue(ellipseVariable)\n        ellipse <- as.character(initial.ellipse == \"1\")\n        save.levels <- levels <- tclvalue(levelsVar)\n        levels <- gsub(\",\", \" \", levels)\n        levels <- paste(\"c(\", gsub('[ ]+', \", \", levels), \")\", sep=\"\")\n        res <- try(is.numeric(eval(parse(text=levels))), silent=TRUE)\n        if (class(res) == \"try-error\" || !res){\n            errorCondition(recall = scatterPlot, message = \n                    gettextRcmdr(\"Levels for ellipses must be numeric values\\n  separated by spaces or commas.\"))\n            return()\n        }\n        initial.subset <- subset <- tclvalue(subsetVariable)\n        subset <- if (trim.blanks(subset) == gettextRcmdr(\"<all valid cases>\"))\n            \"\"\n        else paste(\", subset=\", subset, sep = \"\")\n        cex.axis <- as.numeric(tclvalue(cex.axisValue))\n        cex <- as.numeric(tclvalue(cexValue))\n        cex.lab <- as.numeric(tclvalue(cex.labValue))\n        xlab <- trim.blanks(tclvalue(xlabVar))\n        xlab <- if (xlab == gettextRcmdr(\"<auto>\"))\n            \"\"\n        else paste(\", xlab=\\\"\", xlab, \"\\\"\", sep = \"\")\n        ylab <- trim.blanks(tclvalue(ylabVar))\n        ylab <- if (ylab == gettextRcmdr(\"<auto>\"))\n            \"\"\n        else paste(\", ylab=\\\"\", ylab, \"\\\"\", sep = \"\")\n        main <- trim.blanks(tclvalue(mainVar))\n        main <- if (main == gettextRcmdr(\"<auto>\"))\n            \"\"\n        else paste(\", main=\\\"\", main, \"\\\"\", sep = \"\")\n        pchVal <- gsub(\" \", \",\", tclvalue(pchVar))\n        legend.pos <- tclvalue(legendPositionVariable)\n        closeDialog()\n        if (\"\" == pchVal) {\n            errorCondition(recall = scatterPlot, message = gettextRcmdr(\"No plotting characters.\"))\n            return()\n        }\n        pch <- if (trim.blanks(pchVal) == gettextRcmdr(\"<auto>\"))\n            \"\"\n        else paste(\", pch=c(\", pchVal, \")\", sep = \"\")\n        if (length(x) == 0 || length(y) == 0) {\n            errorCondition(recall = scatterPlot, message = gettextRcmdr(\"You must select two variables\"))\n            return()\n        }\n        if (x == y) {\n            errorCondition(recall = scatterPlot, message = gettextRcmdr(\"x and y variables must be different\"))\n            return()\n        }\n        if (is.na(suppressWarnings(as.numeric(id.n))) || round(as.numeric(id.n)) != as.numeric(id.n)){\n            errorCondition(recall = scatterPlot, message = gettextRcmdr(\"number of points to identify must be an integer\"))\n            return()\n        }\n        putDialog (\"scatterPlot\", list (initial.x = x, initial.y = y, initial.jitterx = tclvalue(jitterXVariable),\n            initial.jittery = tclvalue(jitterYVariable), initial.logstringx = tclvalue(logXVariable),\n            initial.logstringy = tclvalue(logYVariable),  initial.box = box,\n            initial.line = line, initial.smooth = smooth, initial.spread = spread,\n            initial.span = span, initial.ellipse = initial.ellipse, initial.levels = save.levels,\n            initial.subset = initial.subset, initial.xlab = tclvalue(xlabVar),\n            initial.ylab = tclvalue(ylabVar), initial.cexValue = tclvalue(cexValue),\n            initial.cex.axisValue = tclvalue(cex.axisValue), initial.cex.labValue = tclvalue(cex.labValue),\n            initial.pch = pchVal, initial.group=if (.groups == FALSE) NULL else .groups,\n            initial.lines.by.group=if (.linesByGroup) 1 else 0, initial.identify=identify, initial.identify.points=id.n,\n            initial.tab=tab, initial.main=tclvalue(mainVar), initial.legend.pos=legend.pos)\n        )\n        .activeDataSet <- ActiveDataSet()\n        log <- if (logstring != \"\")\n            paste(\", log=\\\"\", logstring, \"\\\"\", sep = \"\")\n        else \"\"\n        if (identify == \"mouse\") {\n            RcmdrTkmessageBox(title = gettextRcmdr(\"Identify Points\"), message = paste(gettextRcmdr(\"Use left mouse button to identify points,\\n\"),\n                gettextRcmdr(if (MacOSXP())\n                    \"esc key to exit.\"\n                    else \"right button to exit.\"), sep = \"\"), icon = \"info\",\n                type = \"ok\")\n        }\n        box <- if (\"1\" == tclvalue(boxplotsVariable))\n            \"'xy'\"\n        else \"FALSE\"\n        line <- if (\"1\" == tclvalue(lsLineVariable))\n            \"lm\"\n        else \"FALSE\"\n        smooth <- as.character(\"1\" == tclvalue(smoothLineVariable))\n        spread <- as.character(\"1\" == tclvalue(spreadVariable))\n        cex <- if (cex == 1)\n            \"\"\n        else paste(\", cex=\", cex, sep = \"\")\n        cex.axis <- if (cex.axis == 1)\n            \"\"\n        else paste(\", cex.axis=\", cex.axis, sep = \"\")\n        cex.lab <- if (cex.lab == 1)\n            \"\"\n        else paste(\", cex.lab=\", cex.lab, sep = \"\")\n        if (.groups == FALSE) {\n            command <- paste(\"scatterplot(\", y, \"~\", x, log,\n                \", reg.line=\", line, \", smooth=\", smooth, \", spread=\",\n                spread, identify.text, \", boxplots=\", box, \", span=\", span/100, \n                \", ellipse=\", ellipse, \", levels=\", levels,\n                jitter, xlab, ylab, main, cex, cex.axis,\n                cex.lab, pch, \", data=\", .activeDataSet, subset,\n                \")\", sep = \"\")\n            if (identify == \"mouse\") command <- suppressMarkdown(command)\n            doItAndPrint(command)\n        }\n        else {\n            command <- paste(\"scatterplot(\", y, \"~\", x, \" | \",\n                .groups, log, \", reg.line=\", line, \", smooth=\", smooth,\n                \", spread=\", spread, identify.text, \", boxplots=\", box,\n                \", span=\", span/100, \n                \", ellipse=\", ellipse, \", levels=\", levels,\n                jitter, xlab, ylab, main, cex,\n                cex.axis, cex.lab, pch, \", by.groups=\", .linesByGroup,\n                if (legend.pos != \"above\") paste0(', legend.coords=\"', legend.pos, '\"'),\n                \", data=\", .activeDataSet, subset, \")\", sep = \"\")\n            if (identify == \"mouse\") command <- suppressMarkdown(command)\n            doItAndPrint(command)\n        }\n        activateMenus()\n        tkfocus(CommanderWindow())\n    }\n    groupsBox(scatterPlot, plotLinesByGroup = TRUE, initialGroup=initial.group, initialLinesByGroup=dialog.values$initial.lines.by.group,\n        initialLabel=if (is.null(initial.group)) gettextRcmdr(\"Plot by groups\") else paste(gettextRcmdr(\"Plot by:\"), initial.group), window=dataTab)\n    OKCancelHelp(helpSubject = \"scatterplot\", reset = \"scatterPlot\", apply=\"scatterPlot\")\n    tkgrid(getFrame(xBox), getFrame(yBox), sticky = \"nw\", padx=6, pady=c(6, 0))\n    tkgrid(labelRcmdr(sliderFrame, text = gettextRcmdr(\"Span for smooth\")),\n        slider, sticky = \"swe\", padx=6, pady=6)\n    tkgrid(sliderFrame, sticky=\"w\")\n    tkgrid(ellipseCheckBox, labelRcmdr(ellipseFrame, text=gettextRcmdr(\"Plot concentration ellipse(s)\")), sticky=\"w\")\n    tkgrid(ellipseFrame, sticky=\"w\", pady=6)\n    tkgrid(labelRcmdr(levelsFrame, text=gettextRcmdr(\"Concentration levels: \")), levelsEntry, sticky=\"w\")\n    tkgrid(levelsFrame, sticky=\"w\")\n    tkgrid(identifyFrame, sticky=\"w\", pady=6)\n    tkgrid(labelRcmdr(npointsFrame, text=gettextRcmdr(\"Number of points to identify  \")), npointsSpinner, sticky=\"w\")\n    tkgrid(npointsFrame, sticky=\"w\")\n    tkgrid(labelRcmdr(parFrame, text = gettextRcmdr(\"Plotting characters\")),\n        pchEntry, stick = \"we\", padx=6, pady=6)\n    tkgrid(labelRcmdr(parFrame, text = gettextRcmdr(\"Point size\")),\n        cexSlider, sticky = \"we\", padx=6, pady=6)\n    tkgrid(labelRcmdr(parFrame, text = gettextRcmdr(\"Axis text size\")),\n        cex.axisSlider, sticky = \"we\", padx=6, pady=6)\n    tkgrid(labelRcmdr(parFrame, text = gettextRcmdr(\"Axis-labels text size\")),\n        cex.labSlider, sticky = \"we\", padx=6, pady=6)\n    tkgrid(legendPositionFrame, stick=\"w\", pady=6)\n    tkgrid(optionsFrame, parFrame, sticky = \"nswe\", padx=6, pady=6)\n    tkgrid(optionsParFrame, sticky = \"we\")\n    tkgrid(ttklabel(dataTab, text=\"\"))\n    tkgrid(groupsFrame, sticky = \"we\", padx=6)\n    tkgrid(ttklabel(dataTab, text=\"\"))\n    tkgrid(subsetFrame, sticky = \"we\", padx=6, pady=c(0, 6))\n    tkgrid(labelRcmdr(top, text = \" \"), padx=6)\n    dialogSuffix(use.tabs=TRUE, grid.buttons=TRUE)\n}\n\nscatterPlotMatrix <- function () {\n    defaults <- list(initial.variables = NULL, initial.line = 0, initial.smooth = 0, initial.spread = 0,\n        initial.span = 50, initial.ellipse=0, initial.levels=\".5, .9\",\n        initial.diag = \"density\", initial.subset = gettextRcmdr (\"<all valid cases>\"),\n        initialGroup=NULL, initial.lines.by.group=1, initial.id.n=\"0\", initial.tab=0,\n        initial.main=gettextRcmdr(\"<auto>\"))\n    dialog.values <- getDialog(\"scatterPlotMatrix\", defaults)\n    initial.group <- dialog.values$initial.group\n    .linesByGroup <- if (dialog.values$initial.lines.by.group == 1) TRUE else FALSE\n    .groups <- if (is.null(initial.group)) FALSE else initial.group\n    initializeDialog(title = gettextRcmdr(\"Scatterplot Matrix\"), use.tabs=TRUE)\n    variablesBox <- variableListBox(dataTab, Numeric(), title = gettextRcmdr(\"Select variables (three or more)\"),\n        selectmode = \"multiple\", initialSelection = varPosn (dialog.values$initial.variables, \"numeric\"))\n    optionsFrame <- tkframe(optionsTab)\n    optFrame <- tkframe(optionsFrame) #ttklabelframe(optionsFrame, text = gettextRcmdr(\"Options\"))\n    parFrame <- tkframe(optionsFrame) #ttklabelframe(optionsFrame, text = gettextRcmdr(\"Plotting Parameters\"))\n    checkBoxes(window = optFrame, frame = \"otherFrame\", boxes = c(\"lsLine\", \"smoothLine\", \"spread\"),\n        initialValues = c(dialog.values$initial.line, dialog.values$initial.smooth,\n            dialog.values$initial.spread), labels = gettextRcmdr(c(\"Least-squares lines\",\n                \"Smooth lines\", \"Show spread\")),\n        title=gettextRcmdr(\"Other Options\"))\n    identifyFrame <- tkframe(optFrame)\n    id.n.Var <- tclVar(dialog.values$initial.id.n)\n    npointsSpinner <- tkspinbox(identifyFrame, from=0, to=10, width=2, textvariable=id.n.Var)\n    sliderValue <- tclVar(dialog.values$initial.span)\n    sliderFrame <- tkframe(optFrame)\n    slider <- tkscale(sliderFrame, from = 5, to = 100, showvalue = TRUE,\n        variable = sliderValue, resolution = 5, orient = \"horizontal\")\n    ellipseVariable <- tclVar(dialog.values$initial.ellipse)\n    ellipseFrame <- tkframe(optionsFrame)\n    ellipseCheckBox <- ttkcheckbutton(ellipseFrame, variable=ellipseVariable)\n    levelsVar <- tclVar(dialog.values$initial.levels)\n    levelsFrame <- tkframe(optionsFrame)\n    levelsEntry <- ttkentry(levelsFrame, width = \"10\", textvariable = levelsVar)\n    radioButtons(window = optFrame, name = \"diagonal\", buttons = c(\"density\", \"histogram\",\n        \"boxplot\", \"oned\", \"qqplot\", \"none\"), labels = gettextRcmdr(c(\"Density plots\",\n            \"Histograms\", \"Boxplots\", \"One-dimensional scatterplots\",\n            \"Normal QQ plots\", \"Nothing (empty)\")), title = gettextRcmdr(\"On Diagonal\"),\n        initialValue = dialog.values$initial.diag)\n    subsetBox(dataTab, subset.expression = dialog.values$initial.subset)\n    onOK <- function() {\n        tab <- if (as.character(tkselect(notebook)) == dataTab$ID) 0 else 1\n        variables <- getSelection(variablesBox)\n        closeDialog()\n        if (length(variables) < 3) {\n            errorCondition(recall = scatterPlotMatrix, message = gettextRcmdr(\"Fewer than 3 variable selected.\"))\n            return()\n        }\n        line <- if (\"1\" == tclvalue(lsLineVariable))\n            \"lm\"\n        else \"FALSE\"\n        smooth <- as.character(\"1\" == tclvalue(smoothLineVariable))\n        spread <- as.character(\"1\" == tclvalue(spreadVariable))\n        id.n <- tclvalue(id.n.Var)\n        if (is.na(suppressWarnings(as.numeric(id.n))) || round(as.numeric(id.n)) != as.numeric(id.n)){\n            errorCondition(recall = scatterPlotMatrix,\n                message = gettextRcmdr(\"number of points to identify must be an integer\"))\n            return()\n        }\n        span <- as.numeric(tclvalue(sliderValue))\n        initial.ellipse <- tclvalue(ellipseVariable)\n        ellipse <- as.character(initial.ellipse == \"1\")\n        save.levels <- levels <- tclvalue(levelsVar)\n        levels <- gsub(\",\", \" \", levels)\n        levels <- paste(\"c(\", gsub('[ ]+', \", \", levels), \")\", sep=\"\")\n        res <- try(is.numeric(eval(parse(text=levels))), silent=TRUE)\n        if (class(res) == \"try-error\" || !res){\n            errorCondition(recall = scatterPlotMatrix, message = \n                    gettextRcmdr(\"Levels for ellipses must be numeric values\\n  separated by spaces or commas.\"))\n            return()\n        }\n        diag <- as.character(tclvalue(diagonalVariable))\n        initial.subset <- subset <- tclvalue(subsetVariable)\n        subset <- if (trim.blanks(subset) == gettextRcmdr(\"<all valid cases>\")) \"\"\n        else paste(\", subset=\", subset, sep=\"\")\n        main <- trim.blanks(tclvalue(mainVar))\n        main <- if (main == gettextRcmdr(\"<auto>\"))\n            \"\"\n        else paste(\", main=\\\"\", main, \"\\\"\", sep = \"\")\n        putDialog(\"scatterPlotMatrix\", list(initial.variables = variables, initial.line = tclvalue (lsLineVariable),\n            initial.smooth = tclvalue(smoothLineVariable),initial.spread = tclvalue (spreadVariable),\n            initial.span = span, initial.ellipse = initial.ellipse, initial.levels = save.levels,\n            initial.diag = diag, initial.subset = initial.subset,\n            initial.group=if (.groups == FALSE) NULL else .groups,\n            initial.lines.by.group=if (.linesByGroup) 1 else 0,\n            initial.id.n=id.n,\n            initial.tab=tab, initial.main=tclvalue(mainVar)))\n        .activeDataSet <- ActiveDataSet()\n        if (.groups == FALSE) {\n            command <- paste(\"scatterplotMatrix(~\", paste(variables,\n                collapse = \"+\"), \", reg.line=\", line, \", smooth=\",\n                smooth, \", spread=\", spread, \", span=\", span/100, \n                \", ellipse=\", ellipse, \", levels=\", levels,\n                \", id.n=\", id.n,\n                \", diagonal = '\", diag, \"', data=\", .activeDataSet,\n                subset, main, \")\", sep = \"\")\n            logger(command)\n            justDoIt(command)\n        }\n        else {\n            command <- paste(\"scatterplotMatrix(~\", paste(variables,\n                collapse = \"+\"), \" | \", .groups, \", reg.line=\",\n                line, \", smooth=\", smooth, \", spread=\", spread,\n                \", span=\", span/100,  \n                \", ellipse=\", ellipse, \", levels=\", levels,\n                \", id.n=\", id.n,\n                \", diagonal= '\", diag, \"', by.groups=\",\n                .linesByGroup, \", data=\", .activeDataSet, subset, main,\n                \")\", sep = \"\")\n            logger(command)\n            justDoIt(command)\n        }\n        activateMenus()\n        tkfocus(CommanderWindow())\n    }\n    groupsBox(scatterPlotMatrix, plotLinesByGroup = TRUE, initialGroup=initial.group, initialLinesByGroup=dialog.values$initial.lines.by.group,\n        initialLabel=if (is.null(initial.group)) gettextRcmdr(\"Plot by groups\") else paste(gettextRcmdr(\"Plot by:\"), initial.group),\n        window=dataTab)\n    OKCancelHelp(helpSubject = \"scatterplotMatrix\", reset = \"scatterPlotMatrix\", apply = \"scatterPlotMatrix\")\n    tkgrid(getFrame(variablesBox), sticky = \"nw\")\n    tkgrid(diagonalFrame, sticky = \"w\")\n    tkgrid(otherFrame, sticky = \"w\")\n    tkgrid(labelRcmdr(sliderFrame, text = gettextRcmdr(\"Span for smooth\")),\n        slider, sticky = \"w\")\n    tkgrid(sliderFrame, sticky=\"w\")\n    mainVar <- tclVar(dialog.values$initial.main)\n    mainEntry <- ttkentry(parFrame, width = \"25\", textvariable = mainVar)\n    mainScroll <- ttkscrollbar(parFrame, orient = \"horizontal\",\n        command = function(...) tkxview(mainEntry, ...))\n    tkconfigure(mainEntry, xscrollcommand = function(...) tkset(mainScroll,\n        ...))\n    tkgrid(labelRcmdr(identifyFrame,\n        text = gettextRcmdr(\"Number of points to identify  \\nin each panel and group \")),\n        npointsSpinner, sticky=\"nw\")\n    tkgrid(identifyFrame, sticky=\"w\", columnspan=2, pady=6)\n    tkgrid(labelRcmdr(parFrame, text = gettextRcmdr(\"Graph title\")), mainEntry, sticky = \"ew\", padx=6)\n    tkgrid(labelRcmdr(parFrame, text=\"\"), mainScroll, sticky = \"ew\", padx=6)\n    tkgrid(optFrame, parFrame, sticky = \"nswe\", padx=6, pady=6)\n    tkgrid(ellipseCheckBox, labelRcmdr(ellipseFrame, text=gettextRcmdr(\"Plot concentration ellipse(s)\")), sticky=\"w\")\n    tkgrid(ellipseFrame, sticky=\"w\", padx=6)\n    tkgrid(labelRcmdr(levelsFrame, text=gettextRcmdr(\"Concentration levels: \")), levelsEntry, sticky=\"w\")\n    tkgrid(levelsFrame, sticky=\"w\", padx=6, pady=6)\n    tkgrid(optionsFrame, sticky = \"w\")\n    tkgrid(groupsFrame, sticky = \"w\")\n    tkgrid(subsetFrame, sticky = \"w\")\n    dialogSuffix(use.tabs=TRUE, grid.buttons=TRUE)\n}\n\nbarGraph <- function () {\n    defaults <- list (initial.variable = NULL, initial.xlab=gettextRcmdr(\"<auto>\"),\n                      initial.ylab=gettextRcmdr(\"<auto>\"), initial.main=gettextRcmdr(\"<auto>\"),\n                      initial.group=NULL, initial.style=\"divided\", initial.legend=\"topright\",\n                      initial.tab=0)\n    dialog.values <- getDialog (\"barGraph\", defaults)\n    initializeDialog(title = gettextRcmdr(\"Bar Graph\"), use.tabs=TRUE)\n    optionsFrame <- tkframe(optionsTab)\n    optionsFrame2 <- tkframe(optionsTab)\n    variablesFrame <- tkframe(dataTab)\n    variableBox <- variableListBox(variablesFrame, Factors(), title = gettextRcmdr(\"Variable (pick one)\"),\n                                   initialSelection = varPosn (dialog.values$initial.variable, \"factor\"))\n    parFrame <- ttklabelframe(optionsFrame, labelwidget=tklabel(optionsFrame, text = gettextRcmdr(\"Plot Labels\"),\n                                                                font=\"RcmdrTitleFont\", foreground=getRcmdr(\"title.color\")))\n    xlabVar <- tclVar(dialog.values$initial.xlab)\n    ylabVar <- tclVar(dialog.values$initial.ylab)\n    mainVar <- tclVar(dialog.values$initial.main)\n    xlabEntry <- ttkentry(parFrame, width = \"25\", textvariable = xlabVar)\n    xlabScroll <- ttkscrollbar(parFrame, orient = \"horizontal\",\n                               command = function(...) tkxview(xlabEntry, ...))\n    tkconfigure(xlabEntry, xscrollcommand = function(...) tkset(xlabScroll,\n                                                                ...))\n    tkgrid(labelRcmdr(parFrame, text = gettextRcmdr(\"x-axis label\")), xlabEntry, sticky = \"ew\", padx=6)\n    tkgrid(labelRcmdr(parFrame, text =\"\"), xlabScroll, sticky = \"ew\", padx=6)\n    ylabEntry <- ttkentry(parFrame, width = \"25\", textvariable = ylabVar)\n    ylabScroll <- ttkscrollbar(parFrame, orient = \"horizontal\",\n                               command = function(...) tkxview(ylabEntry, ...))\n    tkconfigure(ylabEntry, xscrollcommand = function(...) tkset(ylabScroll,\n                                                                ...))\n    tkgrid(labelRcmdr(parFrame, text = gettextRcmdr(\"y-axis label\")), ylabEntry, sticky = \"ew\", padx=6)\n    tkgrid(labelRcmdr(parFrame, text =\"\"), ylabScroll, sticky = \"ew\", padx=6)\n    mainEntry <- ttkentry(parFrame, width = \"25\", textvariable = mainVar)\n    mainScroll <- ttkscrollbar(parFrame, orient = \"horizontal\",\n                               command = function(...) tkxview(mainEntry, ...))\n    tkconfigure(mainEntry, xscrollcommand = function(...) tkset(mainScroll,\n                                                                ...))\n    tkgrid(labelRcmdr(parFrame, text = gettextRcmdr(\"Graph title\")), mainEntry, sticky = \"ew\", padx=6)\n    tkgrid(labelRcmdr(parFrame, text=\"\"), mainScroll, sticky = \"ew\", padx=6)\n    onOK <- function() {\n        tab <- if (as.character(tkselect(notebook)) == dataTab$ID) 0 else 1\n        variable <- getSelection(variableBox)\n        xlab <- trim.blanks(tclvalue(xlabVar))\n        xlab <- if (xlab == gettextRcmdr(\"<auto>\"))\n            paste(\", xlab=\\\"\", variable, \"\\\"\", sep = \"\")\n        else paste(\", xlab=\\\"\", xlab, \"\\\"\", sep = \"\")\n        ylab <- trim.blanks(tclvalue(ylabVar))\n        ylab <- if (ylab == gettextRcmdr(\"<auto>\"))\n            paste(\", ylab=\\\"Frequency\\\"\", sep = \"\")\n        else paste(\", ylab=\\\"\", ylab, \"\\\"\", sep = \"\")\n        main <- trim.blanks(tclvalue(mainVar))\n        main <- if (main == gettextRcmdr(\"<auto>\"))\n            \"\"\n        else paste(\", main=\\\"\", main, \"\\\"\", sep = \"\")\n        style <- tclvalue(styleVariable)\n        legend <- tclvalue(legendVariable)\n        putDialog (\"barGraph\", list(initial.variable = variable, initial.xlab=tclvalue(xlabVar),\n                                    initial.ylab=tclvalue(ylabVar), initial.main=tclvalue(mainVar), \n                                    initial.group=if (.groups == FALSE) NULL else .groups,\n                                    initial.style=style, initial.legend=legend, initial.tab=tab))\n        closeDialog()\n        if (length(variable) == 0) {\n            errorCondition(recall = barGraph, message = gettextRcmdr(\"You must select a variable\"))\n            return()\n        }\n        command <- if (.groups == FALSE){\n            paste(\"with(\", ActiveDataSet(), \", Barplot(\", \n                  variable, xlab, ylab, main, \"))\",\n                  sep = \"\")\n        }\n        else {\n            if (.groups == variable) {\n                errorCondition(recall=barGraph, message=gettextRcmdr(\"plotting and grouping variables must be different\"))\n                return()\n            }\n            paste(\"with(\", ActiveDataSet(), \", Barplot(\", \n                   variable, \", by=\", .groups, ', style=\"', style, \n                   '\", legend.pos=\"', legend, '\"',\n                   xlab, ylab, main, \"))\",\n                   sep = \"\")\n        }\n        doItAndPrint(command)\n        activateMenus()\n        tkfocus(CommanderWindow())\n    }\n    initial.group <- dialog.values$initial.group\n    groupsBox(barGraph, initialGroup=initial.group, \n              initialLabel=if (is.null(initial.group)) gettextRcmdr(\"Plot by groups\") \n              else paste(gettextRcmdr(\"Plot by:\"), initial.group), window=variablesFrame)\n    radioButtons(optionsFrame2, name = \"style\", buttons = c(\"divided\", \"parallel\"), \n                 labels = gettextRcmdr(c(\"Divided (stacked)\", \"Side-by-side (parallel)\")), \n                 title = gettextRcmdr(\"Style of Group Bars\"),\n                 initialValue = dialog.values$initial.style)\n    radioButtons(optionsFrame2, name = \"legend\", \n                 buttons = c(\"topright\", \"top\", \"topleft\"), \n                 labels = gettextRcmdr(c(\"Right\", \"Center\", \"Left\")), \n                 title = gettextRcmdr(\"Position of Legend\"),\n                 initialValue = dialog.values$initial.legend)\n    OKCancelHelp(helpSubject = \"Barplot\", reset = \"barGraph\", apply = \"barGraph\")\n    tkgrid(getFrame(variableBox), sticky=\"w\")\n    tkgrid(tklabel(variablesFrame, text=\"\"))\n    tkgrid(groupsFrame, sticky=\"w\")\n    tkgrid(styleFrame, sticky=\"w\")\n    tkgrid(legendFrame, sticky=\"w\")\n    tkgrid(variablesFrame, sticky=\"w\")\n    tkgrid(parFrame, sticky = \"nw\")\n    tkgrid(optionsFrame2, optionsFrame, sticky = \"nw\")\n    dialogSuffix(use.tabs=TRUE, grid.buttons=TRUE)\n}\n\npieChart <- function () {\n    Library(\"colorspace\")\n    defaults <- list (initial.variable = NULL, initial.xlab=gettextRcmdr(\"<auto>\"),\n        initial.ylab=gettextRcmdr(\"<auto>\"), initial.main=gettextRcmdr(\"<auto>\"))\n    dialog.values <- getDialog (\"pieChart\", defaults)\n    initializeDialog(title = gettextRcmdr(\"Pie Chart\"))\n    optionsFrame <- tkframe(top)\n    variableBox <- variableListBox(optionsFrame, Factors(), title = gettextRcmdr(\"Variable (pick one)\"),\n        initialSelection = varPosn (dialog.values$initial.variable, \"factor\"))\n    parFrame <- ttklabelframe(optionsFrame, labelwidget=tklabel(optionsFrame, text = gettextRcmdr(\"Plot Labels\"),\n        font=\"RcmdrTitleFont\", foreground=getRcmdr(\"title.color\")))\n    xlabVar <- tclVar(dialog.values$initial.xlab)\n    ylabVar <- tclVar(dialog.values$initial.ylab)\n    mainVar <- tclVar(dialog.values$initial.main)\n    xlabEntry <- ttkentry(parFrame, width = \"25\", textvariable = xlabVar)\n    xlabScroll <- ttkscrollbar(parFrame, orient = \"horizontal\",\n        command = function(...) tkxview(xlabEntry, ...))\n    tkconfigure(xlabEntry, xscrollcommand = function(...) tkset(xlabScroll,\n        ...))\n    tkgrid(labelRcmdr(parFrame, text = gettextRcmdr(\"x-axis label\")), xlabEntry, sticky = \"ew\", padx=6)\n    tkgrid(labelRcmdr(parFrame, text =\"\"), xlabScroll, sticky = \"ew\", padx=6)\n    ylabEntry <- ttkentry(parFrame, width = \"25\", textvariable = ylabVar)\n    ylabScroll <- ttkscrollbar(parFrame, orient = \"horizontal\",\n        command = function(...) tkxview(ylabEntry, ...))\n    tkconfigure(ylabEntry, xscrollcommand = function(...) tkset(ylabScroll,\n        ...))\n    tkgrid(labelRcmdr(parFrame, text = gettextRcmdr(\"y-axis label\")), ylabEntry, sticky = \"ew\", padx=6)\n    tkgrid(labelRcmdr(parFrame, text =\"\"), ylabScroll, sticky = \"ew\", padx=6)\n    mainEntry <- ttkentry(parFrame, width = \"25\", textvariable = mainVar)\n    mainScroll <- ttkscrollbar(parFrame, orient = \"horizontal\",\n        command = function(...) tkxview(mainEntry, ...))\n    tkconfigure(mainEntry, xscrollcommand = function(...) tkset(mainScroll,\n        ...))\n    tkgrid(labelRcmdr(parFrame, text = gettextRcmdr(\"Graph title\")), mainEntry, sticky = \"ew\", padx=6)\n    tkgrid(labelRcmdr(parFrame, text=\"\"), mainScroll, sticky = \"ew\", padx=6)\n    onOK <- function() {\n        variable <- getSelection(variableBox)\n        xlab <- trim.blanks(tclvalue(xlabVar))\n        xlab <- if (xlab == gettextRcmdr(\"<auto>\"))\n            paste(\", xlab=\\\"\\\"\", sep = \"\")\n        else paste(\", xlab=\\\"\", xlab, \"\\\"\", sep = \"\")\n        ylab <- trim.blanks(tclvalue(ylabVar))\n        ylab <- if (ylab == gettextRcmdr(\"<auto>\"))\n            paste(\", ylab=\\\"\\\"\", sep = \"\")\n        else paste(\", ylab=\\\"\", ylab, \"\\\"\", sep = \"\")\n        main <- trim.blanks(tclvalue(mainVar))\n        main <- if (main == gettextRcmdr(\"<auto>\"))\n            paste(\", main=\\\"\", variable, \"\\\"\", sep = \"\")\n        else paste(\", main=\\\"\", main, \"\\\"\", sep = \"\")\n        putDialog (\"pieChart\", list (initial.variable = variable, initial.xlab=tclvalue(xlabVar),\n            initial.ylab=tclvalue(ylabVar), initial.main=tclvalue(mainVar)))\n        closeDialog()\n        if (length(variable) == 0) {\n            errorCondition(recall = pieChart, message = gettextRcmdr(\"You must select a variable\"))\n            return()\n        }\n        .activeDataSet <- ActiveDataSet()\n        command <- (paste(\"with(\", .activeDataSet, \", pie(table(\", \n            variable, \"), labels=levels(\",\n            variable, \")\", xlab, ylab, main, \", col=rainbow_hcl(length(levels(\",\n            variable, \")))))\", sep = \"\"))\n        logger(command)\n        justDoIt(command)\n        activateMenus()\n        tkfocus(CommanderWindow())\n    }\n    OKCancelHelp(helpSubject = \"pie\", reset = \"pieChart\", apply = \"pieChart\")\n    tkgrid(getFrame(variableBox), parFrame, sticky = \"nw\")\n    tkgrid(parFrame, sticky = \"nw\")\n    tkgrid(optionsFrame, sticky = \"w\")\n    dialogSuffix(grid.buttons=TRUE)\n}\n\nlinePlot <- function () {\n    defaults <- list(initial.x = NULL, initial.y = NULL) \n    dialog.values <- getDialog(\"linePlot\", defaults)\n    initializeDialog(title = gettextRcmdr(\"Line Plot\"))\n    variablesFrame <- tkframe(top)\n    .numeric <- Numeric()\n    xBox <- variableListBox(variablesFrame, .numeric, title = gettextRcmdr(\"x variable (pick one)\"),\n        initialSelection = varPosn (dialog.values$initial.x, \"numeric\"))\n    yBox <- variableListBox(variablesFrame, .numeric, title = gettextRcmdr(\"y variables (pick one or more)\"), \n        selectmode = \"multiple\", initialSelection = varPosn (dialog.values$initial.y, \"numeric\"))\n    onOK <- function() {\n        y <- getSelection(yBox)\n        x <- getSelection(xBox)\n        closeDialog()\n        if (0 == length(x)) {\n            errorCondition(recall = linePlot, message = gettextRcmdr(\"No x variable selected.\"))\n            return()\n        }\n        if (0 == length(y)) {\n            errorCondition(recall = linePlot, message = gettextRcmdr(\"No y variables selected.\"))\n            return()\n        }\n        if (is.element(x, y)) {\n            errorCondition(recall = linePlot, message = gettextRcmdr(\"x and y variables must be different.\"))\n            return()\n        }\n        .activeDataSet <- ActiveDataSet()\n        .x <- na.omit(eval(parse(text = paste(.activeDataSet, \n            \"$\", x, sep = \"\")), envir = .GlobalEnv))\n        if (!identical(order(.x), seq(along.with = .x))) {\n            response <- tclvalue(RcmdrTkmessageBox(message = gettextRcmdr(\"x-values are not in order.\\nContinue?\"), \n                icon = \"warning\", type = \"okcancel\", default = \"cancel\"))\n            if (response == \"cancel\") {\n                onCancel()\n                return()\n            }\n        }\n        putDialog (\"linePlot\", list(initial.x = x, initial.y = y))\n        command <- paste(\"with(\", .activeDataSet, \", lineplot(\", x, \", \", paste(y, collapse=\", \"), \"))\", sep=\"\")\n        doItAndPrint(command)\n        activateMenus()\n        tkfocus(CommanderWindow())\n    }\n    OKCancelHelp(helpSubject = \"lineplot\", reset = \"linePlot\", apply = \"linePlot\")\n    tkgrid(getFrame(xBox), labelRcmdr(variablesFrame, text = \"    \"), \n        getFrame(yBox), sticky = \"nw\")\n    tkgrid(variablesFrame, sticky = \"nw\")\n    tkgrid(buttonsFrame, stick = \"w\")\n    dialogSuffix()\n}\n\nQQPlot <- function () {\n    # this function modified by Martin Maechler\n    defaults <- list(initial.x = NULL, initial.dist = \"norm\", initial.df = \"\",\n        initial.chisqdf = \"\", initial.fdf1 = \"\", initial.fdf2 = \"\", initial.othername = \"\",\n        initial.otherparam = \"\", initial.identify = \"auto\", initial.id.n=\"2\",\n        initial.tab=0, initial.xlab=gettextRcmdr(\"<auto>\"), initial.ylab=gettextRcmdr(\"<auto>\"),\n        initial.main=gettextRcmdr(\"<auto>\"))\n    dialog.values <- getDialog(\"QQPlot\", defaults)\n    initializeDialog(title = gettextRcmdr(\"Quantile-Comparison (QQ) Plot\"), use.tabs=TRUE)\n    xBox <- variableListBox(dataTab, Numeric(), title = gettextRcmdr(\"Variable (pick one)\"),\n        initialSelection = varPosn (dialog.values$initial.x, \"numeric\"))\n    optionsFrame <- tkframe(optionsTab)\n    optFrame <- ttklabelframe(optionsFrame, labelwidget=tklabel(optionsFrame, text = gettextRcmdr(\"Plot Options\"),\n        font=\"RcmdrTitleFont\", foreground=getRcmdr(\"title.color\")))\n    parFrame <- ttklabelframe(optionsFrame, labelwidget=tklabel(optionsFrame, text = gettextRcmdr(\"Plot Labels\"),\n        font=\"RcmdrTitleFont\", foreground=getRcmdr(\"title.color\")))\n    identifyPointsFrame <- tkframe(optFrame)\n    radioButtons(identifyPointsFrame, name = \"identify\", buttons = c(\"auto\", \"mouse\",\n        \"not\"), labels = gettextRcmdr(c(\"Automatically\",\n            \"Interactively with mouse\", \"Do not identify\")), title = gettextRcmdr(\"Identify Points\"),\n        initialValue = dialog.values$initial.identify)\n    id.n.Var <- tclVar(dialog.values$initial.id.n)\n    npointsSpinner <- tkspinbox(identifyPointsFrame, from=1, to=10, width=2, textvariable=id.n.Var)\n    xlabVar <- tclVar(dialog.values$initial.xlab)\n    ylabVar <- tclVar(dialog.values$initial.ylab)\n    mainVar <- tclVar(dialog.values$initial.main)\n    xlabEntry <- ttkentry(parFrame, width = \"25\", textvariable = xlabVar)\n    xlabScroll <- ttkscrollbar(parFrame, orient = \"horizontal\",\n        command = function(...) tkxview(xlabEntry, ...))\n    tkconfigure(xlabEntry, xscrollcommand = function(...) tkset(xlabScroll,\n        ...))\n    tkgrid(labelRcmdr(parFrame, text = gettextRcmdr(\"x-axis label\")), xlabEntry, sticky = \"ew\", padx=6)\n    tkgrid(labelRcmdr(parFrame, text =\"\"), xlabScroll, sticky = \"ew\", padx=6)\n    ylabEntry <- ttkentry(parFrame, width = \"25\", textvariable = ylabVar)\n    ylabScroll <- ttkscrollbar(parFrame, orient = \"horizontal\",\n        command = function(...) tkxview(ylabEntry, ...))\n    tkconfigure(ylabEntry, xscrollcommand = function(...) tkset(ylabScroll,\n        ...))\n    tkgrid(labelRcmdr(parFrame, text = gettextRcmdr(\"y-axis label\")), ylabEntry, sticky = \"ew\", padx=6)\n    tkgrid(labelRcmdr(parFrame, text =\"\"), ylabScroll, sticky = \"ew\", padx=6)\n    mainEntry <- ttkentry(parFrame, width = \"25\", textvariable = mainVar)\n    mainScroll <- ttkscrollbar(parFrame, orient = \"horizontal\",\n        command = function(...) tkxview(mainEntry, ...))\n    tkconfigure(mainEntry, xscrollcommand = function(...) tkset(mainScroll,\n        ...))\n    tkgrid(labelRcmdr(parFrame, text = gettextRcmdr(\"Graph title\")), mainEntry, sticky = \"ew\", padx=6)\n    tkgrid(labelRcmdr(parFrame, text=\"\"), mainScroll, sticky = \"ew\", padx=6)\n    onOK <- function() {\n        tab <- if (as.character(tkselect(notebook)) == dataTab$ID) 0 else 1\n        x <- getSelection(xBox)\n        initial.dist <-dist <- tclvalue(distVariable)\n        tdf <- tclvalue(tDfVariable)\n        chisqdf <- tclvalue(chisqDfVariable)\n        fdf1 <- tclvalue(FDf1Variable)\n        fdf2 <- tclvalue(FDf2Variable)\n        othername <- tclvalue(otherNameVariable)\n        otherparam <- tclvalue(otherParamsVariable)\n        id.n <- tclvalue(id.n.Var)\n        identify <- tclvalue(identifyVariable)\n        method <- if (identify == \"mouse\") \"identify\" else \"y\"\n        id.n.use <- if (identify == \"not\") 0 else id.n\n        closeDialog()\n        if (0 == length(x)) {\n            errorCondition(recall = QQPlot, message = gettextRcmdr(\"You must select a variable.\"))\n            return()\n        }\n        save <- options(warn = -1)\n        on.exit(save)\n        retryMe <- function(msg) {\n            Message(message = msg, type = \"error\")\n            QQPlot()\n        }\n        switch(dist, norm = {\n            args <- \"dist=\\\"norm\\\"\"\n        }, t = {\n            df <- tclvalue(tDfVariable)\n            df.num <- as.numeric(df)\n            if (is.na(df.num) || df.num < 1) {\n                retryMe(gettextRcmdr(\"df for t must be a positive number.\"))\n                return()\n            }\n            args <- paste(\"dist=\\\"t\\\", df=\", df, sep = \"\")\n        }, chisq = {\n            df <- tclvalue(chisqDfVariable)\n            df.num <- as.numeric(df)\n            if (is.na(df.num) || df.num < 1) {\n                retryMe(gettextRcmdr(\"df for chi-square must be a positive number.\"))\n                return()\n            }\n            args <- paste(\"dist=\\\"chisq\\\", df=\", df, sep = \"\")\n        }, f = {\n            df1 <- tclvalue(FDf1Variable)\n            df2 <- tclvalue(FDf2Variable)\n            df.num1 <- as.numeric(df1)\n            df.num2 <- as.numeric(df2)\n            if (is.na(df.num1) || df.num1 < 1 || is.na(df.num2) ||\n                    df.num2 < 1) {\n                retryMe(gettextRcmdr(\"numerator and denominator \\ndf for F must be positive numbers.\"))\n                return()\n            }\n            args <- paste(\"dist=\\\"f\\\", df1=\", df1, \", df2=\",\n                df2, sep = \"\")\n        }, {\n            dist <- tclvalue(otherNameVariable)\n            params <- tclvalue(otherParamsVariable)\n            args <- paste(\"dist=\\\"\", dist, \"\\\", \", params, sep = \"\")\n        })\n        if (is.na(suppressWarnings(as.numeric(id.n))) || round(as.numeric(id.n)) != as.numeric(id.n)){\n            errorCondition(recall = QQPlot, message = gettextRcmdr(\"number of points to identify must be an integer\"))\n            return()\n        }\n        xlab <- trim.blanks(tclvalue(xlabVar))\n        xlab <- if (xlab == gettextRcmdr(\"<auto>\"))\n            \"\"\n        else paste(\", xlab=\\\"\", xlab, \"\\\"\", sep = \"\")\n        ylab <- trim.blanks(tclvalue(ylabVar))\n        ylab <- if (ylab == gettextRcmdr(\"<auto>\"))\n            \"\"\n        else paste(\", ylab=\\\"\", ylab, \"\\\"\", sep = \"\")\n        main <- trim.blanks(tclvalue(mainVar))\n        main <- if (main == gettextRcmdr(\"<auto>\"))\n            \"\"\n        else paste(\", main=\\\"\", main, \"\\\"\", sep = \"\")\n        putDialog (\"QQPlot\", list (initial.x = x, initial.dist = initial.dist,\n            initial.identify = identify, initial.df = tdf, initial.chisqdf = chisqdf,\n            initial.fdf1 = fdf1, initial.fdf2 = fdf2, initial.othername = othername,\n            initial.otherparam = otherparam, initial.identify = identify, initial.id.n=id.n,\n            initial.tab=tab, initial.xlab=tclvalue(xlabVar),\n            initial.ylab=tclvalue(ylabVar), initial.main=tclvalue(mainVar)))\n        .activeDataSet <- ActiveDataSet()\n        if (identify == \"mouse\") {\n            RcmdrTkmessageBox(title = \"Identify Points\", message = paste(gettextRcmdr(\"Use left mouse button to identify points,\\n\"),\n                gettextRcmdr(if (MacOSXP())\n                    \"esc key to exit.\"\n                    else \"right button to exit.\"), sep = \"\"), icon = \"info\",\n                type = \"ok\")\n        }\n        command <- paste(\"with(\", .activeDataSet, \", qqPlot\", \"(\", \n            x, \", \", args, ', id.method=\"', method, '\", id.n=', id.n.use, \", labels=rownames(\", .activeDataSet, \")\", xlab,\n            ylab, main, \"))\", sep = \"\")\n        if (identify == \"mouse\") command <- suppressMarkdown(command)\n        doItAndPrint(command)\n        activateMenus()\n        tkfocus(CommanderWindow())\n    }\n    OKCancelHelp(helpSubject = \"qqPlot\", reset = \"QQPlot\", apply=\"QQPlot\")\n    distFrame <- tkframe(optFrame)\n    distVariable <- tclVar(dialog.values$initial.dist)\n    normalButton <- ttkradiobutton(distFrame, variable = distVariable,\n        value = \"norm\")\n    tButton <- ttkradiobutton(distFrame, variable = distVariable,\n        value = \"t\")\n    chisqButton <- ttkradiobutton(distFrame, variable = distVariable,\n        value = \"chisq\")\n    FButton <- ttkradiobutton(distFrame, variable = distVariable,\n        value = \"f\")\n    otherButton <- ttkradiobutton(distFrame, variable = distVariable,\n        value = \"other\")\n    tDfFrame <- tkframe(distFrame)\n    tDfVariable <- tclVar(dialog.values$initial.df)\n    tDfField <- ttkentry(tDfFrame, width = \"6\", textvariable = tDfVariable)\n    chisqDfFrame <- tkframe(distFrame)\n    chisqDfVariable <- tclVar(dialog.values$initial.chisqdf)\n    chisqDfField <- ttkentry(chisqDfFrame, width = \"6\", textvariable = chisqDfVariable)\n    FDfFrame <- tkframe(distFrame)\n    FDf1Variable <- tclVar(dialog.values$initial.fdf1)\n    FDf1Field <- ttkentry(FDfFrame, width = \"6\", textvariable = FDf1Variable)\n    FDf2Variable <- tclVar(dialog.values$initial.fdf2)\n    FDf2Field <- ttkentry(FDfFrame, width = \"6\", textvariable = FDf2Variable)\n    otherParamsFrame <- tkframe(distFrame)\n    otherParamsVariable <- tclVar(dialog.values$initial.otherparam)\n    otherParamsField <- ttkentry(otherParamsFrame, width = \"30\",\n        textvariable = otherParamsVariable)\n    otherNameVariable <- tclVar(dialog.values$initial.othername)\n    otherNameField <- ttkentry(otherParamsFrame, width = \"10\",\n        textvariable = otherNameVariable)\n    tkgrid(getFrame(xBox), sticky = \"nw\")\n    tkgrid(labelRcmdr(distFrame, text = gettextRcmdr(\"Distribution\"),\n        fg = getRcmdr(\"title.color\"), font=\"RcmdrTitleFont\"), columnspan = 6, sticky = \"w\")\n    tkgrid(normalButton, labelRcmdr(distFrame, text = gettextRcmdr(\"Normal\")),\n        sticky = \"w\")\n    tkgrid(labelRcmdr(tDfFrame, text = gettextRcmdr(\"df = \")),\n        tDfField, sticky = \"w\")\n    tkgrid(tButton, labelRcmdr(distFrame, text = \"t\"), tDfFrame,\n        sticky = \"w\")\n    tkgrid(labelRcmdr(chisqDfFrame, text = gettextRcmdr(\"df = \")),\n        chisqDfField, sticky = \"w\")\n    tkgrid(chisqButton, labelRcmdr(distFrame, text = gettextRcmdr(\"Chi-square\")),\n        chisqDfFrame, sticky = \"w\")\n    tkgrid(labelRcmdr(FDfFrame, text = gettextRcmdr(\"Numerator df = \")),\n        FDf1Field, labelRcmdr(FDfFrame, text = gettextRcmdr(\"Denominator df = \")),\n        FDf2Field, sticky = \"w\")\n    tkgrid(FButton, labelRcmdr(distFrame, text = \"F\"), FDfFrame,\n        sticky = \"w\")\n    tkgrid(labelRcmdr(otherParamsFrame, text = gettextRcmdr(\"Specify: \")),\n        otherNameField, labelRcmdr(otherParamsFrame, text = gettextRcmdr(\"Parameters: \")),\n        otherParamsField, sticky = \"w\")\n    tkgrid(otherButton, labelRcmdr(distFrame, text = gettextRcmdr(\"Other\")),\n        otherParamsFrame, sticky = \"w\")\n    tkgrid(distFrame, sticky = \"w\")\n    tkgrid(identifyFrame, sticky=\"w\")\n    tkgrid(labelRcmdr(identifyPointsFrame, text=gettextRcmdr(\"Number of points to identify  \")), npointsSpinner, sticky=\"w\")\n    tkgrid(identifyPointsFrame, sticky=\"w\")\n    tkgrid(optFrame, parFrame, sticky = \"nswe\", padx=6, pady=6)\n    tkgrid(optionsFrame, sticky = \"w\")\n    dialogSuffix(use.tabs=TRUE, grid.buttons=TRUE)\n}\n\nPlotMeans <- function () {\n    defaults <- list(initial.groups = NULL, initial.response = NULL, initial.error.bars = \"se\",\n        initial.level = \"0.95\", initial.xlab=gettextRcmdr(\"<auto>\"), initial.ylab=gettextRcmdr(\"<auto>\"),\n        initial.main=gettextRcmdr(\"<auto>\"), initial.connect=\"1\", initial.tab=0)\n    dialog.values <- getDialog(\"PlotMeans\", defaults)\n    initializeDialog(title = gettextRcmdr(\"Plot Means\"), use.tabs=TRUE)\n    groupBox <- variableListBox(dataTab, Factors(), title = gettextRcmdr(\"Factors (pick one or two)\"),\n        selectmode = \"multiple\", initialSelection = varPosn (dialog.values$initial.groups, \"factor\"))\n    responseBox <- variableListBox(dataTab, Numeric(), title = gettextRcmdr(\"Response Variable (pick one)\"),\n        initialSelection = varPosn (dialog.values$initial.response, \"numeric\"))\n    optionsFrame <- tkframe(optionsTab)\n    optFrame <- ttklabelframe(optionsFrame, labelwidget=tklabel(optionsFrame, text = gettextRcmdr(\"Error Bars\"),\n        font=\"RcmdrTitleFont\", foreground=getRcmdr(\"title.color\")))\n    parFrame <- ttklabelframe(optionsFrame, labelwidget=tklabel(optionsFrame, text = gettextRcmdr(\"Plot Labels\"),\n        font=\"RcmdrTitleFont\", foreground=getRcmdr(\"title.color\")))\n    xlabVar <- tclVar(dialog.values$initial.xlab)\n    ylabVar <- tclVar(dialog.values$initial.ylab)\n    mainVar <- tclVar(dialog.values$initial.main)\n    connectvar <- tclVar(dialog.values$initial.connect)\n    xlabEntry <- ttkentry(parFrame, width = \"25\", textvariable = xlabVar)\n    xlabScroll <- ttkscrollbar(parFrame, orient = \"horizontal\",\n        command = function(...) tkxview(xlabEntry, ...))\n    tkconfigure(xlabEntry, xscrollcommand = function(...) tkset(xlabScroll,\n        ...))\n    tkgrid(labelRcmdr(parFrame, text = gettextRcmdr(\"x-axis label\")), xlabEntry, sticky = \"ew\", padx=6)\n    tkgrid(labelRcmdr(parFrame, text =\"\"), xlabScroll, sticky = \"ew\", padx=6)\n    ylabEntry <- ttkentry(parFrame, width = \"25\", textvariable = ylabVar)\n    ylabScroll <- ttkscrollbar(parFrame, orient = \"horizontal\",\n        command = function(...) tkxview(ylabEntry, ...))\n    tkconfigure(ylabEntry, xscrollcommand = function(...) tkset(ylabScroll,\n        ...))\n    connectFrame <- tkframe(optionsFrame)\n    connectCheckBox <- ttkcheckbutton(connectFrame, variable = connectvar)\n    tkgrid(labelRcmdr(parFrame, text = gettextRcmdr(\"y-axis label\")), ylabEntry, sticky = \"ew\", padx=6)\n    tkgrid(labelRcmdr(parFrame, text =\"\"), ylabScroll, sticky = \"ew\", padx=6)\n    mainEntry <- ttkentry(parFrame, width = \"25\", textvariable = mainVar)\n    mainScroll <- ttkscrollbar(parFrame, orient = \"horizontal\",\n        command = function(...) tkxview(mainEntry, ...))\n    tkconfigure(mainEntry, xscrollcommand = function(...) tkset(mainScroll,\n        ...))\n    tkgrid(labelRcmdr(parFrame, text = gettextRcmdr(\"Graph title\")), mainEntry, sticky = \"ew\", padx=6)\n    tkgrid(labelRcmdr(parFrame, text=\"\"), mainScroll, sticky = \"ew\", padx=6)\n    onOK <- function() {\n        tab <- if (as.character(tkselect(notebook)) == dataTab$ID) 0 else 1\n        groups <- getSelection(groupBox)\n        response <- getSelection(responseBox)\n        closeDialog()\n        if (0 == length(groups)) {\n            errorCondition(recall = PlotMeans, message = gettextRcmdr(\"No factors selected.\"))\n            return()\n        }\n        if (2 < length(groups)) {\n            errorCondition(recall = PlotMeans, message = gettextRcmdr(\"More than two factors selected.\"))\n            return()\n        }\n        if (0 == length(response)) {\n            errorCondition(recall = PlotMeans, message = gettextRcmdr(\"No response variable selected.\"))\n            return()\n        }\n        .activeDataSet <- ActiveDataSet()\n        error.bars <- tclvalue(errorBarsVariable)\n        level <- if (error.bars == \"conf.int\")\n            paste(\", level=\", tclvalue(levelVariable), sep = \"\")\n        else \"\"\n        xlab <- trim.blanks(tclvalue(xlabVar))\n        xlab <- if (xlab == gettextRcmdr(\"<auto>\"))\n            \"\"\n        else paste(\", xlab=\\\"\", xlab, \"\\\"\", sep = \"\")\n        ylab <- trim.blanks(tclvalue(ylabVar))\n        ylab <- if (ylab == gettextRcmdr(\"<auto>\"))\n            \"\"\n        else paste(\", ylab=\\\"\", ylab, \"\\\"\", sep = \"\")\n        main <- trim.blanks(tclvalue(mainVar))\n        main <- if (main == gettextRcmdr(\"<auto>\"))\n            \"\"\n        else paste(\", main=\\\"\", main, \"\\\"\", sep = \"\")\n        connect <- tclvalue(connectvar)\n        putDialog (\"PlotMeans\", list(initial.groups = groups, initial.response = response,\n            initial.error.bars = error.bars,\n            initial.level = tclvalue(levelVariable),\n            initial.xlab=tclvalue(xlabVar), initial.ylab=tclvalue(ylabVar),\n            initial.main=tclvalue(mainVar), initial.connect=connect, initial.tab=tab))\n        if (length(groups) == 1)\n            doItAndPrint(paste(\"with(\", .activeDataSet, \", plotMeans(\", \n                response, \", \", groups[1],\n                \", error.bars=\\\"\", error.bars, \"\\\"\", level, xlab, ylab, main, \n                \", connect=\", if (connect == \"1\") \"TRUE\" else \"FALSE\", \"))\",\n                sep = \"\"))\n        else {\n            if (eval(parse(text = paste(\"with(\", .activeDataSet, \", length(levels(\", \n                groups[1], \")) < length(levels(\", \n                groups[2], \")))\", sep = \"\"))))\n                groups <- rev(groups)\n            doItAndPrint(paste(\"with(\", .activeDataSet, \", plotMeans(\", \n                response, \", \", groups[1],\n                \", \", groups[2], \", error.bars=\\\"\",\n                error.bars, \"\\\"\", level, xlab, ylab, main, \n                \", connect=\", if (connect == \"1\") \"TRUE\" else \"FALSE\", \"))\", sep = \"\"))\n        }\n        activateMenus()\n        tkfocus(CommanderWindow())\n    }\n    errorBarsVariable <- tclVar(dialog.values$initial.error.bars)\n    seButton <- ttkradiobutton(optFrame, variable = errorBarsVariable,\n        value = \"se\")\n    sdButton <- ttkradiobutton(optFrame, variable = errorBarsVariable,\n        value = \"sd\")\n    confIntButton <- ttkradiobutton(optFrame, variable = errorBarsVariable,\n        value = \"conf.int\")\n    noneButton <- ttkradiobutton(optFrame, variable = errorBarsVariable,\n        value = \"none\")\n    levelVariable <- tclVar(dialog.values$initial.level)\n    levelEntry <- ttkentry(optFrame, width = \"6\", textvariable = levelVariable)\n    OKCancelHelp(helpSubject = \"plotMeans\", reset = \"PlotMeans\", apply = \"PlotMeans\")\n    tkgrid(getFrame(groupBox), getFrame(responseBox), sticky = \"nw\")\n    tkgrid(seButton, labelRcmdr(optFrame, text = gettextRcmdr(\"Standard errors\")),\n        sticky = \"w\")\n    tkgrid(sdButton, labelRcmdr(optFrame, text = gettextRcmdr(\"Standard deviations\")),\n        sticky = \"w\")\n    tkgrid(confIntButton, labelRcmdr(optFrame, text = gettextRcmdr(\"Confidence intervals\")),\n        labelRcmdr(optFrame, text = gettextRcmdr(\"   Level of confidence:\")),\n        levelEntry, sticky = \"w\")\n    tkgrid(noneButton, labelRcmdr(optFrame, text = gettextRcmdr(\"No error bars\")),\n        sticky = \"w\")\n    tkgrid(optFrame, parFrame, sticky = \"nswe\", padx=6, pady=6)\n    tkgrid(labelRcmdr(connectFrame, text=gettextRcmdr(\"Connect profiles of means\")), connectCheckBox, sticky=\"w\")\n    tkgrid(connectFrame, sticky=\"w\")\n    tkgrid(optionsFrame, sticky = \"w\")\n    dialogSuffix(use.tabs=TRUE, grid.buttons=TRUE)\n}\n\nScatter3D <- function () {\n    use.rgl <- getOption(\"Rcmdr\")$use.rgl\n    if (is.null(use.rgl) || use.rgl) {\n        Library(\"rgl\")\n        Library(\"mgcv\")\n    }\n    putRcmdr(\"rgl.command\", TRUE)\n    defaults <- list (initial.x = NULL, initial.y = NULL, initial.scales = 1, initial.grid = 1, \n        initial.resids = 0, initial.lin = 0, initial.quad = 0, initial.nonpar = 0, \n        initial.additive = 0, initial.ellips = 0, initial.dfNonpar = gettextRcmdr(\"<auto>\"), \n        initial.dfAdd = gettextRcmdr(\"<auto>\"), initial.bg = \"white\",\n        initialGroup=NULL, initial.lines.by.group=0, initial.identify=\"not\", initial.id.n=\"2\",\n        initial.tab=0)\n    dialog.values <- getDialog (\"Scatter3D\", defaults)\n    initial.group <- dialog.values$initial.group\n    .linesByGroup <- if (dialog.values$initial.lines.by.group == 1) TRUE else FALSE\n    .groups <- if (is.null(initial.group)) FALSE else initial.group\n    initializeDialog(title = gettextRcmdr(\"3D Scatterplot\"), use.tabs=TRUE)\n    variablesFrame <- tkframe(dataTab)\n    .numeric <- Numeric()\n    xBox <- variableListBox(variablesFrame, .numeric, title = gettextRcmdr(\"Explanatory variables (pick two)\"), \n        selectmode = \"multiple\", initialSelection = varPosn (dialog.values$initial.x, \"numeric\"))\n    yBox <- variableListBox(variablesFrame, .numeric, title = gettextRcmdr(\"Response variable (pick one)\"), \n        initialSelection = varPosn (dialog.values$initial.y, \"numeric\"))\n    surfacesFrame <- tkframe(optionsTab)\n    axisScales <- tclVar(dialog.values$initial.scales)\n    axisScalesCheckBox <- ttkcheckbutton(surfacesFrame, variable = axisScales)\n    gridLines <- tclVar(dialog.values$initial.grid)\n    gridLinesCheckBox <- ttkcheckbutton(surfacesFrame, variable = gridLines)\n    squaredResiduals <- tclVar(dialog.values$initial.resids)\n    squaredResidualsCheckBox <- ttkcheckbutton(surfacesFrame, \n        variable = squaredResiduals)\n    linearLSSurface <- tclVar(dialog.values$initial.lin)\n    linearLSCheckBox <- ttkcheckbutton(surfacesFrame, variable = linearLSSurface)\n    quadLSSurface <- tclVar(dialog.values$initial.quad)\n    quadLSCheckBox <- ttkcheckbutton(surfacesFrame, variable = quadLSSurface)\n    nonparSurface <- tclVar(dialog.values$initial.nonpar)\n    nonparCheckBox <- ttkcheckbutton(surfacesFrame, variable = nonparSurface)\n    dfNonparVariable <- tclVar(dialog.values$initial.dfNonpar)\n    dfNonparField <- ttkentry(surfacesFrame, width = \"6\", textvariable = dfNonparVariable)\n    additiveSurface <- tclVar(dialog.values$initial.additive)\n    additiveCheckBox <- ttkcheckbutton(surfacesFrame, variable = additiveSurface)\n    dfAddVariable <- tclVar(dialog.values$initial.dfAdd)\n    dfAddField <- ttkentry(surfacesFrame, width = \"6\", textvariable = dfAddVariable)\n    ellipsoid <- tclVar(dialog.values$initial.ellips)\n    ellipsoidCheckBox <- ttkcheckbutton(surfacesFrame, variable = ellipsoid)\n    bgFrame <- tkframe(optionsTab)\n    bgVariable <- tclVar(dialog.values$initial.bg)\n    whiteButton <- ttkradiobutton(bgFrame, variable = bgVariable, \n        value = \"white\")\n    blackButton <- ttkradiobutton(bgFrame, variable = bgVariable, \n        value = \"black\")\n    idFrame <- tkframe(optionsTab)\n    radioButtons(window=idFrame, name = \"identify\", buttons = c(\"auto\", \"mouse\", \n        \"not\"), labels = gettextRcmdr(c(\"Automatically\", \n            \"Interactively with mouse\", \"Do not identify\")), title = gettextRcmdr(\"Identify Points\"), \n        initialValue = dialog.values$initial.identify)\n    id.n.Var <- tclVar(dialog.values$initial.id.n) \n    npointsSpinner <- tkspinbox(idFrame, from=1, to=10, width=2, textvariable=id.n.Var)    \n    onOK <- function() {\n        tab <- if (as.character(tkselect(notebook)) == dataTab$ID) 0 else 1\n        x <- getSelection(xBox)\n        y <- getSelection(yBox)\n        scales <- tclvalue(axisScales)\n        grid <- tclvalue(gridLines)\n        resids <- tclvalue(squaredResiduals)\n        lin <- tclvalue(linearLSSurface)\n        quad <- tclvalue(quadLSSurface)\n        nonpar <- tclvalue(nonparSurface)\n        additive <- tclvalue(additiveSurface)\n        ellips <- tclvalue(ellipsoid) \n        dfNonpar <- tclvalue(dfNonparVariable)\n        dfAdd <- tclvalue(dfAddVariable)\n        bg <- tclvalue(bgVariable)\n        identify <- tclvalue(identifyVariable)\n        id.n <- tclvalue(id.n.Var)\n        identify.text <- switch(identify,\n            auto = paste(\", id.method='mahal', id.n =\", id.n),\n            mouse = \", id.method='identify'\",\n            not = \"\")\n        closeDialog()\n        if (is.na(suppressWarnings(as.numeric(id.n))) || round(as.numeric(id.n)) != as.numeric(id.n)){\n            errorCondition(recall = scatterPlot, message = gettextRcmdr(\"number of points to identify must be an integer\"))\n            return()\n        }\n        if (length(y) == 0) {\n            errorCondition(recall = Scatter3D, message = gettextRcmdr(\"You must select a response variable.\"))\n            return()\n        }\n        if (2 != length(x)) {\n            errorCondition(recall = Scatter3D, message = gettextRcmdr(\"You must select 2 explanatory variables.\"))\n            return()\n        }\n        if (is.element(y, x)) {\n            errorCondition(recall = Scatter3D, message = gettextRcmdr(\"Response and explanatory variables must be different.\"))\n            return()\n        }\n        putDialog (\"Scatter3D\", list(initial.x = x, initial.y = y, initial.scales = scales, initial.grid = grid, \n            initial.resids = resids, initial.lin = lin, initial.quad = quad, initial.nonpar = nonpar, \n            initial.additive = additive, initial.ellips = ellips, initial.dfNonpar = dfNonpar, \n            initial.dfAdd = dfAdd, initial.bg = bg, \n            initial.group=if (.groups == FALSE) NULL else .groups,\n            initial.lines.by.group=if (.linesByGroup) 1 else 0,\n            initial.identify=identify, initial.id.n=id.n, initial.tab=tab))\n        scales <- if (tclvalue(axisScales) == 1) \n            \"TRUE\"\n        else \"FALSE\"\n        grid <- if (tclvalue(gridLines) == 1) \n            \"TRUE\"\n        else \"FALSE\"\n        resids <- if (tclvalue(squaredResiduals) == 1) \n            \", residuals=\\\"squares\\\"\"\n        else \", residuals=TRUE\"\n        lin <- if (tclvalue(linearLSSurface) == 1) \n            \"\\\"linear\\\"\"\n        quad <- if (tclvalue(quadLSSurface) == 1) \n            \"\\\"quadratic\\\"\"\n        nonpar <- if (tclvalue(nonparSurface) == 1) \n            \"\\\"smooth\\\"\"\n        additive <- if (tclvalue(additiveSurface) == 1) \n            \"\\\"additive\\\"\"\n        surfaces <- c(lin, quad, nonpar, additive)\n        nsurfaces <- length(surfaces)\n        if (nsurfaces > 1) \n            resids <- \"\"\n        ellips <- if (tclvalue(ellipsoid) == 1) \n            \"TRUE\"\n        else \"FALSE\"\n        opts <- options(warn = -1)\n        dfNonpar <- if (dfNonpar == gettextRcmdr(\"<auto>\")) \n            \"\"\n        else paste(\", df.smooth=\", as.numeric(dfNonpar), sep = \"\")\n        dfAdd <- if (dfAdd == gettextRcmdr(\"<auto>\")) \n            \"\"\n        else paste(\", df.additive=\", as.numeric(dfAdd), sep = \"\")\n        options(opts)\n        fit <- if (nsurfaces == 0) \n            \", surface=FALSE\"\n        else if (nsurfaces == 1) \n            paste(\", fit=\", surfaces, sep = \"\")\n        else paste(\", fit=c(\", paste(surfaces, collapse = \",\"), \n            \")\", sep = \"\")\n        .activeDataSet <- ActiveDataSet()\n        if (.groups != FALSE) {\n            groups <- paste(\", groups=\", .activeDataSet, \"$\", \n                .groups, sep = \"\")\n            parallel <- paste(\", parallel=\", .linesByGroup, sep = \"\")\n        }\n        else parallel <- groups <- \"\"\n        if (identify == \"mouse\"){\n            RcmdrTkmessageBox(title=\"Identify Points\",\n                message=gettextRcmdr(\"Drag right mouse button to identify points,\\nclick right button to exit.\"),\n                icon=\"info\", type=\"ok\")\n        }\n        if (.groups == FALSE) {\n            command <- paste(\"scatter3d(\", y, \"~\", x[1], \"+\", x[2], \", data=\", .activeDataSet, \n                fit, resids, dfNonpar, dfAdd, \n                parallel, \", bg=\\\"\", bg, \"\\\", axis.scales=\", scales, \n                \", grid=\", grid, \", ellipsoid=\", ellips, identify.text,\n                \")\", sep = \"\")\n            if (identify == \"mouse\") command <- suppressMarkdown(command)\n            doItAndPrint(command)\n        }\n        else {\n            command <- paste(\"scatter3d(\", y, \"~\", x[1], \"+\", x[2], \"|\", .groups, \", data=\", .activeDataSet, \n                fit, resids, dfNonpar, dfAdd, \n                parallel, \", bg=\\\"\", bg, \"\\\", axis.scales=\", scales, \n                \", grid=\", grid, \", ellipsoid=\", ellips, identify.text,\n                \")\", sep = \"\")\n            if (identify == \"mouse\") command <- suppressMarkdown(command)\n            doItAndPrint(command)\n        }\n        putRcmdr(\"rgl\", TRUE)\n        command <- paste(\"Identify3d(\", .activeDataSet, \"$\", \n            x[1], \", \", .activeDataSet, \"$\", y, \", \", .activeDataSet, \n            \"$\", x[2], groups, \", axis.scales=\", scales, \", labels=row.names(\", \n            .activeDataSet, \"))\", sep = \"\")\n        putRcmdr(\"Identify3d\", command)\n        .Tcl(\"update\")\n        activateMenus()\n        tkfocus(CommanderWindow())\n        rgl.bringtotop()\n    }\n    groupsBox(Scatter3D, plotLinesByGroup = TRUE, plotLinesByGroupsText = gettextRcmdr(\"Parallel regression surfaces\"),\n        initialGroup=initial.group, initialLinesByGroup=dialog.values$initial.lines.by.group,\n        initialLabel=if (is.null(initial.group)) gettextRcmdr(\"Plot by groups\") else paste(gettextRcmdr(\"Plot by:\"), initial.group),\n        window=dataTab)\n    OKCancelHelp(helpSubject = \"Scatter3DDialog\", reset = \"Scatter3D\", apply = \"Scatter3D\")\n    tkgrid(getFrame(xBox), labelRcmdr(variablesFrame, text = \"  \"), \n        getFrame(yBox), sticky = \"nw\")\n    tkgrid(variablesFrame, sticky = \"nw\")\n    tkgrid(labelRcmdr(surfacesFrame, text = gettextRcmdr(\"Show axis scales\")), \n        axisScalesCheckBox, sticky = \"w\")\n    tkgrid(labelRcmdr(surfacesFrame, text = gettextRcmdr(\"Show surface grid lines\")), \n        gridLinesCheckBox, sticky = \"w\")\n    tkgrid(labelRcmdr(surfacesFrame, text = gettextRcmdr(\"Show squared residuals\")), \n        squaredResidualsCheckBox, sticky = \"w\")\n    tkgrid(labelRcmdr(surfacesFrame, text = gettextRcmdr(\"Surfaces to Fit\"), \n        fg = getRcmdr(\"title.color\"), font=\"RcmdrTitleFont\"), sticky = \"w\")\n    tkgrid(labelRcmdr(surfacesFrame, text = gettextRcmdr(\"Linear least-squares\")), \n        linearLSCheckBox, sticky = \"w\")\n    tkgrid(labelRcmdr(surfacesFrame, text = gettextRcmdr(\"Quadratic least-squares\")), \n        quadLSCheckBox, sticky = \"w\")\n    dfLabel <- labelRcmdr(surfacesFrame, text = gettextRcmdr(\"df = \"))\n    tkgrid(labelRcmdr(surfacesFrame, text = gettextRcmdr(\"Smooth regression\")), \n        nonparCheckBox, dfLabel, dfNonparField, sticky = \"w\")\n    tkgrid.configure(dfLabel, sticky = \"e\")\n    tkgrid(labelRcmdr(surfacesFrame, text = gettextRcmdr(\"Additive regression\")), \n        additiveCheckBox, labelRcmdr(surfacesFrame, text = gettextRcmdr(\"df(each term) = \")), \n        dfAddField, sticky = \"w\")\n    tkgrid(labelRcmdr(surfacesFrame, text = gettextRcmdr(\"Plot 50% concentration ellipsoid\")), \n        ellipsoidCheckBox, sticky = \"w\")\n    tkgrid(surfacesFrame, sticky = \"w\")\n    tkgrid(labelRcmdr(bgFrame, text = gettextRcmdr(\"Background Color\"), \n        fg = getRcmdr(\"title.color\"), font=\"RcmdrTitleFont\"), sticky = \"w\", columnspan = 2)\n    tkgrid(labelRcmdr(bgFrame, text = gettextRcmdr(\"Black\")), \n        blackButton, sticky = \"w\")\n    tkgrid(labelRcmdr(bgFrame, text = gettextRcmdr(\"White\")), \n        whiteButton, sticky = \"w\")\n    tkgrid(bgFrame, sticky = \"w\")\n    tkgrid(identifyFrame, sticky=\"w\")\n    tkgrid(labelRcmdr(idFrame, text=gettextRcmdr(\"Number of points to identify  \")), npointsSpinner, sticky=\"w\")\n    tkgrid(idFrame, sticky=\"w\")\n    tkgrid(groupsFrame, sticky = \"w\")\n    dialogSuffix(use.tabs=TRUE, grid.buttons=TRUE)\n}\n\nIdentify3D <- function(){\n    if (0 == rgl.cur()) {\n        Message(message=gettextRcmdr(\"There is no current RGL graphics device.\"),\n            type=\"error\")\n        return()\n    }\n    RcmdrTkmessageBox(title=\"Identify Points\",\n        message=gettextRcmdr(\"Drag right mouse button to identify points,\\nclick right button to exit.\"),\n        icon=\"info\", type=\"ok\")\n    command <- getRcmdr(\"Identify3d\")\n    command <- suppressMarkdown(command)\n    doItAndPrint(command)\n}\n\nsaveBitmap <- function () {\n    env <- environment()\n    updateWidth <- function(...){\n        if (tclvalue(aspectVariable) == \"1\"){\n            tclvalue(heightVariable) <- round(aspect*as.numeric(tclvalue(widthVariable)))\n        }\n    }\n    updateHeight <- function(...){\n        if (tclvalue(aspectVariable) == \"1\"){\n            tclvalue(widthVariable) <- round((1/aspect)*as.numeric(tclvalue(heightVariable)))\n        }\n    }\n    updateSize <- function(...){\n        units <- tclvalue(unitsVariable)\n        size <- dev.size(units=units)\n        if (units == \"in\") {\n            wmin <- min(3, size[1])\n            wmax <- max(10, size[1])\n            hmin <- min(3, size[2])\n            hmax <- max(10, size[2])\n            rmin <- 50\n            rmax <- 300\n            res <- if (tclvalue(resVariable) == \"72\") 72 else round(2.54*as.numeric(tclvalue(resVariable)))\n        }\n        else if (units == \"cm\") {\n            wmin <- min(8, size[1])\n            wmax <- max(25, size[1])\n            hmin <- min(8, size[2])\n            hmax <- max(25, size[2])\n            rmin <- 20\n            rmax <- 120\n            res <- round(as.numeric(tclvalue(resVariable))/2.54)\n        }\n        else {\n            wmin <- min(200, size[1])\n            wmax <- max(1000, size[1])\n            hmin <- min(200, size[2])\n            hmax <- max(1000, size[2])\n            rmin <- 50\n            rmax <- 300\n            res <- 72\n        }\n        tkconfigure(widthSlider, from = wmin, to = wmax)\n        tkconfigure(heightSlider,  from = hmin, to = hmax)\n        tkconfigure(wlabel, text = paste(gettextRcmdr(c(\"Width\", \" (\", all.units[units], \")\")), collapse=\"\"))\n        tkconfigure(hlabel, text = paste(gettextRcmdr(c(\"Height\",  \" (\", all.units[units], \")\")), collapse=\"\"))\n        tkconfigure(rlabel, text = paste(gettextRcmdr(c(\"Resolution (pixels/\", unit[units], \")\")), collapse=\"\"))\n        tkconfigure(resSlider, from=rmin, to=rmax, state = if (tclvalue(unitsVariable) == \"px\") \"disabled\" else \"normal\")\n        tkconfigure(disabled, text = if (units == \"px\") gettextRcmdr(\"[disabled]\") else \"\")\n        tclvalue(widthVariable) <- size[1]\n        tclvalue(heightVariable) <- size[2]\n        tclvalue(resVariable) <- res\n    }\n    all.units <- c(\"inches\", \"cm\", \"pixels\")\n    names(all.units) <- c(\"in\", \"cm\", \"px\")\n    unit <- c(\"inch\", \"cm\", \"inch\")\n    names(unit) <- c(\"in\", \"cm\", \"px\")\n    if (1 == dev.cur()) {\n        Message(gettextRcmdr(\"There is no current graphics device to save.\"), \n            type = \"error\")\n        return()\n    }\n    defaults <- list (initial.type = \"png\", initial.pointsize=12, initial.units=\"in\", initial.res = 72)\n    dialog.values <- getDialog (\"saveBitmap\", defaults)\n    units <- dialog.values$initial.units\n    size <- dev.size(units=units)\n    aspect <- size[2]/size[1]\n    if (units == \"in\") {\n        wmin <- min(3, size[1])\n        wmax <- max(10, size[1])\n        hmin <- min(3, size[2])\n        hmax <- max(10, size[2])\n        rmin <- 50\n        rmax <- 300\n        res <- dialog.values$initial.res\n    }\n    else if (units == \"cm\") {\n        wmin <- min(8, size[1])\n        wmax <- max(25, size[1])\n        hmin <- min(8, size[2])\n        hmax <- max(25, size[2])\n        rmin <- 20\n        rmax <- 120\n        res <- dialog.values$initial.res\n    }\n    else {\n        wmin <- min(200, size[1])\n        wmax <- max(1000, size[1])\n        hmin <- min(200, size[2])\n        hmax <- max(1000, size[2])\n        rmin <- 50\n        rmax <- 300\n        res <- 72\n    }\n    initializeDialog(title = gettextRcmdr(\"Save Graph as Bitmap\"))\n    radioButtons(name = \"filetype\", buttons = c(\"png\", \"jpeg\"), \n        labels = c(\"PNG\", \"JPEG\"), title = gettextRcmdr(\"Graphics File Type\"),\n        initialValue = dialog.values$initial.type)\n    radioButtons(name = \"units\", buttons = c(\"in\", \"cm\", \"px\"), \n        labels = gettextRcmdr(c(\"inches\", \"cm\", \"pixels\")), title = gettextRcmdr(\"Units\"),\n        initialValue = dialog.values$initial.units, command=updateSize)\n    sliderFrame <- tkframe(top)\n    widthVariable <- tclVar(size[1])\n    widthSlider <- tkscale(sliderFrame, from = wmin, to = wmax, \n        showvalue = TRUE, variable = widthVariable, resolution = 1, \n        orient = \"horizontal\", command=updateWidth)\n    heightVariable <- tclVar(size[2])\n    heightSlider <- tkscale(sliderFrame, from = hmin, to = hmax, \n        showvalue = TRUE, variable = heightVariable, resolution = 1, \n        orient = \"horizontal\", command=updateHeight)\n    pointSizeVariable <- tclVar(dialog.values$initial.pointsize)\n    pointSizeSlider <- tkscale(sliderFrame, from = 6, to = 16, \n        showvalue = TRUE, variable = pointSizeVariable, resolution = 1, \n        orient = \"horizontal\")\n    resVariable <- tclVar(res)\n    resSlider <- tkscale(sliderFrame, from = rmin, to = rmax, \n        showvalue = TRUE, variable = resVariable, resolution = 1, \n        orient = \"horizontal\")\n    tkconfigure(resSlider,  state = if (tclvalue(unitsVariable) == \"px\") \"disabled\" else \"normal\")\n    aspectVariable <- tclVar(\"1\")\n    aspectFrame <- tkframe(top)\n    aspectCheckBox <- ttkcheckbutton(aspectFrame, variable = aspectVariable)\n    onOK <- function() {\n        closeDialog()\n        width <- tclvalue(widthVariable)\n        height <- tclvalue(heightVariable)\n        type <- tclvalue(filetypeVariable)\n        pointsize <- tclvalue(pointSizeVariable)\n        units <- tclvalue(unitsVariable)\n        res <- tclvalue(resVariable)\n        putDialog (\"saveBitmap\", list (initial.type = type, initial.pointsize = pointsize, initial.units=units, initial.res=res))\n        if (type == \"png\") {\n            ext <- \"png\"\n            filetypes <- gettextRcmdr(\"{\\\"All Files\\\" {\\\"*\\\"}} {\\\"PNG Files\\\" {\\\".png\\\" \\\".PNG\\\"}}\")\n            initial <- \"RGraph.png\"\n        }\n        else {\n            ext <- \"jpg\"\n            filetypes <- gettextRcmdr(\"{\\\"All Files\\\" {\\\"*\\\"}} {\\\"JPEG Files\\\" {\\\".jpg\\\" \\\".JPG\\\" \\\".jpeg\\\" \\\".JPEG\\\"}}\")\n            initial <- \"RGraph.jpg\"\n        }\n        filename <- tclvalue(tkgetSaveFile(filetypes = filetypes, \n            defaultextension = ext, initialfile = initial, parent = CommanderWindow()))\n        if (filename == \"\") \n            return()\n        command <- paste(\"dev.print(\", type, \", filename=\\\"\", \n            filename, \"\\\", width=\", width, \", height=\", height, \", pointsize=\", pointsize, ', units=\"', units, \n            if(units == \"px\") '\")' else paste('\", res=', res, ')', sep=\"\"), sep = \"\")\n        doItAndPrint(command, rmd=FALSE)\n        Message(paste(gettextRcmdr(\"Graph saved to file\"), filename), \n            type = \"note\")\n    }\n    OKCancelHelp(helpSubject = \"png\", reset = \"saveBitmap\")\n    tkgrid(filetypeFrame, sticky = \"w\")\n    tkgrid(unitsFrame, stick=\"w\")\n    tkgrid(labelRcmdr(aspectFrame, text = gettextRcmdr(\"Fixed aspect ratio (height:width)\")),\n        aspectCheckBox, sticky=\"w\")\n    tkgrid(aspectFrame, sticky=\"w\")\n    tkgrid(wlabel <- labelRcmdr(sliderFrame, text = paste(gettextRcmdr(c(\"Width\", \" (\", all.units[units], \")\")), collapse=\"\")), \n        widthSlider, sticky = \"sw\")\n    tkgrid(hlabel <- labelRcmdr(sliderFrame, text = paste(gettextRcmdr(c(\"Height\",  \" (\", all.units[units], \")\")), collapse=\"\")), \n        heightSlider, sticky = \"sw\")\n    tkgrid(rlabel <- labelRcmdr(sliderFrame, text = paste(gettextRcmdr(c(\"Resolution\", \"(\", \"pixels\", \"/\", unit[units], \")\")), collapse=\"\")), \n        resSlider, \n        disabled <- labelRcmdr(sliderFrame, text = if (units == \"px\") gettextRcmdr(\"[disabled]\") else \"\"),\n        sticky = \"sw\")\n    tkgrid(labelRcmdr(sliderFrame, text = gettextRcmdr(\"Text size (points)\")), \n        pointSizeSlider, sticky = \"sw\")\n    tkgrid(sliderFrame, sticky = \"w\")\n    tkgrid(buttonsFrame, sticky = \"w\")\n    dialogSuffix()\n}\n\nsavePDF <- function () {\n    updateWidth <- function(...){\n        if (tclvalue(aspectVariable) == \"1\"){\n            tclvalue(heightVariable) <- round(aspect*as.numeric(tclvalue(widthVariable)), 1)\n        }\n    }\n    updateHeight <- function(...){\n        if (tclvalue(aspectVariable) == \"1\"){\n            tclvalue(widthVariable) <- round((1/aspect)*as.numeric(tclvalue(heightVariable)), 1)\n        }\n    }\n    updateSize <- function(...){\n        units <- tclvalue(unitsVariable)\n        size <- dev.size(units=units)\n        if (units == \"in\") {\n            wmin <- min(3, size[1])\n            wmax <- max(10, size[1])\n            hmin <- min(3, size[2])\n            hmax <- max(10, size[2])\n        }\n        else {\n            wmin <- min(8, size[1])\n            wmax <- max(25, size[1])\n            hmin <- min(8, size[2])\n            hmax <- max(25, size[2])\n        }\n        tkconfigure(widthSlider, from = wmin, to = wmax)\n        tkconfigure(heightSlider,  from = hmin, to = hmax)\n        tkconfigure(wlabel, text = paste(gettextRcmdr(c(\"Width\", \" (\", all.units[units], \")\")), collapse=\"\"))\n        tkconfigure(hlabel, text = paste(gettextRcmdr(c(\"Height\",  \" (\", all.units[units], \")\")), collapse=\"\"))\n        tclvalue(widthVariable) <- size[1]\n        tclvalue(heightVariable) <- size[2]\n    }\n    all.units <- c(\"inches\", \"cm\")\n    names(all.units) <- c(\"in\", \"cm\")\n    if (1 == dev.cur()) {\n        Message(gettextRcmdr(\"There is no current graphics device to save.\"), \n            type = \"error\")\n        return()\n    }\n    defaults <- list (initial.type = \"pdf\", initial.pointsize = 12, initial.units=\"in\")\n    dialog.values <- getDialog (\"savePDF\", defaults)\n    units <- dialog.values$initial.units\n    size <- dev.size(units=units)\n    aspect <- size[2]/size[1]\n    size <- round(size, 1)\n    if (units == \"in\") {\n        wmin <- min(3, size[1])\n        wmax <- max(10, size[1])\n        hmin <- min(3, size[2])\n        hmax <- max(10, size[2])\n    }\n    else {\n        wmin <- min(8, size[1])\n        wmax <- max(25, size[1])\n        hmin <- min(8, size[2])\n        hmax <- max(25, size[2])\n    }\n    initializeDialog(title = gettextRcmdr(\"Save Graph as PDF/Postscript\"))\n    radioButtons(name = \"filetype\", buttons = c(\"pdf\", \"postscript\", \n        \"eps\"), labels = gettextRcmdr(c(\"PDF\", \"Postscript\", \n            \"Encapsulated Postscript\")), title = gettextRcmdr(\"Graphics File Type\"), \n        initialValue = dialog.values$initial.type)\n    radioButtons(name = \"units\", buttons = c(\"in\", \"cm\"), \n        labels = gettextRcmdr(c(\"inches\", \"cm\")), title = gettextRcmdr(\"Units\"),\n        initialValue = dialog.values$initial.units, command=updateSize)\n    aspectVariable <- tclVar(\"1\")\n    aspectFrame <- tkframe(top)\n    aspectCheckBox <- ttkcheckbutton(aspectFrame, variable = aspectVariable)\n    sliderFrame <- tkframe(top)\n    widthVariable <- tclVar(size[1])\n    widthSlider <- tkscale(sliderFrame, from = wmin, to = wmax, \n        showvalue = TRUE, \n        variable = widthVariable, resolution = 0.1, orient = \"horizontal\", \n        command=updateWidth)\n    heightVariable <- tclVar(size[2])\n    heightSlider <- tkscale(sliderFrame, from = hmin, to = hmax, \n        showvalue = TRUE, \n        variable = heightVariable, resolution = 0.1, orient = \"horizontal\",\n        command=updateHeight)\n    pointSizeVariable <- tclVar(dialog.values$initial.pointsize)\n    pointSizeSlider <- tkscale(sliderFrame, from = 6, to = 16, \n        showvalue = TRUE, variable = pointSizeVariable, resolution = 1, \n        orient = \"horizontal\")\n    onOK <- function() {\n        closeDialog()\n        width <- tclvalue(widthVariable)\n        height <- tclvalue(heightVariable)\n        type <- tclvalue(filetypeVariable)\n        units <- tclvalue(unitsVariable)\n        pointsize <- tclvalue(pointSizeVariable)\n        putDialog (\"savePDF\", list (initial.type = type, initial.pointsize = pointsize, initial.units=units))\n        if (units == \"cm\") {\n            width <- round(as.numeric(width)/2.54, 1)\n            height <- round(as.numeric(height)/2.54, 1)\n        } \n        if (type == \"pdf\") {\n            ext <- \"pdf\"\n            filetypes <- gettextRcmdr(\"{\\\"All Files\\\" {\\\"*\\\"}} {\\\"PDF Files\\\" {\\\".pdf\\\" \\\".PDF\\\"}}\")\n            initial <- \"RGraph.pdf\"\n        }\n        else if (type == \"postscript\") {\n            ext <- \"ps\"\n            filetypes <- gettextRcmdr(\"{\\\"All Files\\\" {\\\"*\\\"}} {\\\"Postscript Files\\\" {\\\".ps\\\" \\\".PS\\\"}}\")\n            initial <- \"RGraph.ps\"\n        }\n        else {\n            ext <- \"eps\"\n            filetypes <- gettextRcmdr(\"{\\\"All Files\\\" {\\\"*\\\"}} {\\\"Encapsulated Postscript Files\\\" {\\\".eps\\\" \\\".EPS\\\"}}\")\n            initial <- \"RGraph.eps\"\n        }\n        filename <- tclvalue(tkgetSaveFile(filetypes = filetypes, \n            defaultextension = ext, initialfile = initial, parent = CommanderWindow()))\n        if (filename == \"\") \n            return()\n        command <- if (type == \"eps\") \n            paste(\"dev.copy2eps(file=\\\"\", filename, \"\\\", width=\", \n                width, \", height=\", height, \", pointsize=\", pointsize, \n                \")\", sep = \"\")\n        else paste(\"dev.print(\", type, \", file=\\\"\", filename, \n            \"\\\", width=\", width, \", height=\", height, \", pointsize=\", \n            pointsize, \")\", sep = \"\")\n        doItAndPrint(command, rmd=FALSE)\n        Message(paste(gettextRcmdr(\"Graph saved to file\"), filename), \n            type = \"note\")\n    }\n    OKCancelHelp(helpSubject = \"pdf\", reset = \"savePDF\")\n    tkgrid(filetypeFrame, sticky = \"w\")\n    tkgrid(unitsFrame, stick=\"w\")\n    tkgrid(labelRcmdr(aspectFrame, text = gettextRcmdr(\"Fixed aspect ratio (height:width)\")),\n        aspectCheckBox, sticky=\"w\")\n    tkgrid(aspectFrame, sticky=\"w\")\n    tkgrid(wlabel <- labelRcmdr(sliderFrame, text = paste(gettextRcmdr(c(\"Width\", \" (\", all.units[units], \")\")), collapse=\"\")), \n        widthSlider, sticky = \"sw\")\n    tkgrid(hlabel <- labelRcmdr(sliderFrame, text = paste(gettextRcmdr(c(\"Height\",  \" (\", all.units[units], \")\")), collapse=\"\")), \n        heightSlider, sticky = \"sw\")\n    tkgrid(labelRcmdr(sliderFrame, text = gettextRcmdr(\"Text size (points)\")), \n        pointSizeSlider, sticky = \"sw\")\n    tkgrid(sliderFrame, sticky = \"w\")\n    tkgrid(buttonsFrame, sticky = \"w\")\n    dialogSuffix()\n}\n\nsaveRglGraph <- function(){\n    if (0 == rgl.cur()) {\n        Message(message=gettextRcmdr(\"There is no current RGL graphics device to save.\"),\n            type=\"error\")\n        return()\n    }\n    ext <- \"png\"\n    filetypes <- gettextRcmdr('{\"All Files\" {\"*\"}} {\"PNG Files\" {\".png\" \".PNG\"}}')\n    initial <- \"RGLGraph.png\"\n    filename <- tclvalue(tkgetSaveFile(filetypes=filetypes,\n        defaultextension=ext,\n        initialfile=initial,\n        parent=CommanderWindow()))\n    if (filename == \"\") return()\n    command <- paste('rgl.snapshot(\"', filename, '\")', sep=\"\")\n    doItAndPrint(command, rmd=FALSE)\n    Message(paste(gettextRcmdr(\"Graph saved to file\"), filename), type=\"note\")\n}\n\n## The following function by Richard Heiberger, with small modifications by J. Fox\n## with more modifications by Richard Heiberger.\n## 2008-01-03 added conditions, layout, and multiple colors\n## 2012-08-19 rmh added memory to the dialogs, using John Fox's getDialog and putDialog functions\n## 2013-06-19 J. Fox added Data and Options tabs, Apply button\n\nXyplot <- function() {\n    Library(\"lattice\")\n    defaults <- list(initial.predictor = NULL, initial.response = NULL,\n        initial.auto.key = 1, initial.outer = 0,\n        initial.x.relation = \"same\", initial.y.relation = \"same\",\n        initial.layoutColumns = \"\", initial.layoutRows = \"\",\n        initial.conditions = FALSE,\n        initial.groups = FALSE,\n        initial.points = 1, initial.lines = 0, initial.tab=0,\n        initial.xlab=gettextRcmdr(\"<auto>\"), initial.ylab=gettextRcmdr(\"<auto>\"),\n        initial.main=gettextRcmdr(\"<auto>\"))\n    dialog.values <- getDialog(\"Xyplot\", defaults)\n    initializeDialog(title=gettextRcmdr(\"XY Conditioning Plot\"), use.tabs=TRUE)\n    predictorFrame <- tkframe(dataTab)\n    predictorBox <-\n        variableListBox(predictorFrame, Numeric(),\n            title=gettextRcmdr(\"Explanatory variables (pick one or more)\"),\n            selectmode=\"multiple\",\n            initialSelection = varPosn (dialog.values$initial.predictor, \"numeric\"))\n    responseBox <- variableListBox(predictorFrame, Numeric(),\n        title=gettextRcmdr(\"Response variables (pick one or more)\"),\n        selectmode=\"multiple\",\n        initialSelection = varPosn (dialog.values$initial.response, \"numeric\"))\n    cgFrame <- tkframe(dataTab)\n    conditions.if <-\n        length(dialog.values$initial.conditions) == 1 &&\n        dialog.values$initial.conditions == FALSE\n    conditionsBox <- variableListBox(cgFrame, Factors(),\n        title=gettextRcmdr(\"Conditions '|' (pick zero or more)\"),\n        selectmode=\"multiple\",\n        initialSelection=if (conditions.if) FALSE else\n            varPosn(dialog.values$initial.conditions, \"factor\"))\n    groups.if <-\n        length(dialog.values$initial.groups) == 1 &&\n        dialog.values$initial.groups == FALSE\n    groupsBox <- variableListBox(cgFrame, Factors(),\n        title=gettextRcmdr(\"Groups 'groups=' (pick zero or more)\"),\n        selectmode=\"multiple\",\n        initialSelection=if (groups.if) FALSE else\n            varPosn(dialog.values$initial.groups, \"factor\"))\n    optionsFrame <- tkframe(optionsTab)\n    optFrame <- ttklabelframe(optionsFrame, labelwidget=tklabel(optionsFrame, text = gettextRcmdr(\"Plot Options\"),\n        font=\"RcmdrTitleFont\", foreground=getRcmdr(\"title.color\")))\n    parFrame <- ttklabelframe(optionsFrame, labelwidget=tklabel(optionsFrame, text = gettextRcmdr(\"Plot Labels\"),\n        font=\"RcmdrTitleFont\", foreground=getRcmdr(\"title.color\")))\n    checkBoxes(window = optFrame, frame=\"otherFrame\",\n        boxes=c(\"auto.key\", \"outer\"),\n        initialValues=c(dialog.values$initial.auto.key, dialog.values$initial.outer),\n        labels=gettextRcmdr(c(\"Automatically draw key\",\n            \"Different panels for different y ~ x combinations\")))\n    relationFrame <- tkframe(optFrame)\n    radioButtons(window=relationFrame,\n        name=\"x.relation\",\n        buttons=c(\"same\", \"free\", \"sliced\"),\n        labels=gettextRcmdr(c(\"Identical\", \"Free\", \"Same range\")),\n        title=gettextRcmdr(\"X-Axis Scales in Different Panels\"),\n        initialValue = dialog.values$initial.x.relation)\n    radioButtons(window=relationFrame,\n        name=\"y.relation\",\n        buttons=c(\"same\", \"free\", \"sliced\"),\n        labels=gettextRcmdr(c(\"Identical\", \"Free\", \"Same range\")),\n        title=gettextRcmdr(\"Y-Axis Scales in Different Panels\"),\n        initialValue = dialog.values$initial.y.relation)\n    \n    scalarsFrame <- tkframe(optFrame)\n    layoutColumnsVar <- tclVar(dialog.values$initial.layoutColumns)\n    layoutColumnsEntry <- tkentry(scalarsFrame, width=\"6\", textvariable=layoutColumnsVar)\n    layoutRowsVar <- tclVar(dialog.values$initial.layoutRows)\n    layoutRowsEntry <- tkentry(scalarsFrame, width=\"6\", textvariable=layoutRowsVar)\n    \n    checkBoxes(window = optFrame, frame=\"typeFrame\",\n        boxes=c(\"points\", \"lines\"),\n        initialValues=c(dialog.values$initial.points, dialog.values$initial.lines),\n        labels=gettextRcmdr(c(\"Points\", \"Lines\")))\n    xlabVar <- tclVar(dialog.values$initial.xlab)\n    ylabVar <- tclVar(dialog.values$initial.ylab)\n    mainVar <- tclVar(dialog.values$initial.main)\n    xlabEntry <- ttkentry(parFrame, width = \"25\", textvariable = xlabVar)\n    xlabScroll <- ttkscrollbar(parFrame, orient = \"horizontal\",\n        command = function(...) tkxview(xlabEntry, ...))\n    tkconfigure(xlabEntry, xscrollcommand = function(...) tkset(xlabScroll,\n        ...))\n    tkgrid(labelRcmdr(parFrame, text = gettextRcmdr(\"x-axis label\")), xlabEntry, sticky = \"ew\", padx=6)\n    tkgrid(labelRcmdr(parFrame, text =\"\"), xlabScroll, sticky = \"ew\", padx=6)\n    ylabEntry <- ttkentry(parFrame, width = \"25\", textvariable = ylabVar)\n    ylabScroll <- ttkscrollbar(parFrame, orient = \"horizontal\",\n        command = function(...) tkxview(ylabEntry, ...))\n    tkconfigure(ylabEntry, xscrollcommand = function(...) tkset(ylabScroll,\n        ...))\n    tkgrid(labelRcmdr(parFrame, text = gettextRcmdr(\"y-axis label\")), ylabEntry, sticky = \"ew\", padx=6)\n    tkgrid(labelRcmdr(parFrame, text =\"\"), ylabScroll, sticky = \"ew\", padx=6)\n    mainEntry <- ttkentry(parFrame, width = \"25\", textvariable = mainVar)\n    mainScroll <- ttkscrollbar(parFrame, orient = \"horizontal\",\n        command = function(...) tkxview(mainEntry, ...))\n    tkconfigure(mainEntry, xscrollcommand = function(...) tkset(mainScroll,\n        ...))\n    tkgrid(labelRcmdr(parFrame, text = gettextRcmdr(\"Graph title\")), mainEntry, sticky = \"ew\", padx=6)\n    tkgrid(labelRcmdr(parFrame, text=\"\"), mainScroll, sticky = \"ew\", padx=6)\n    onOK <- function() {\n        tab <- if (as.character(tkselect(notebook)) == dataTab$ID) 0 else 1\n        predictor <- getSelection(predictorBox)\n        response <- getSelection(responseBox)\n        conditions <- getSelection(conditionsBox)\n        groups <- getSelection(groupsBox)\n        closeDialog()\n        \n        if (0 == length(response)) {\n            errorCondition(recall=Xyplot,\n                message=gettextRcmdr(\"At least one response variable must be selected.\"))\n            return()\n        }\n        if (0 == length(predictor)) {\n            errorCondition(recall=Xyplot,\n                message=gettextRcmdr(\"At least one explanatory variable must be selected.\"))\n            return()\n        }\n        auto.key <- (\"1\" == tclvalue(auto.keyVariable))\n        outer    <- (\"1\" == tclvalue(outerVariable))\n        x.relation <- as.character(tclvalue(x.relationVariable))\n        y.relation <- as.character(tclvalue(y.relationVariable))\n        \n        layoutColumns  <- as.numeric(tclvalue(layoutColumnsVar))\n        layoutRows     <- as.numeric(tclvalue(layoutRowsVar))\n        \n        points <- (\"1\" == tclvalue(pointsVariable))\n        lines  <- (\"1\" == tclvalue(linesVariable))\n        xlab <- trim.blanks(tclvalue(xlabVar))\n        xlab <- if (xlab == gettextRcmdr(\"<auto>\"))\n            \"\"\n        else paste(\", xlab=\\\"\", xlab, \"\\\"\", sep = \"\")\n        ylab <- trim.blanks(tclvalue(ylabVar))\n        ylab <- if (ylab == gettextRcmdr(\"<auto>\"))\n            \"\"\n        else paste(\", ylab=\\\"\", ylab, \"\\\"\", sep = \"\")\n        main <- trim.blanks(tclvalue(mainVar))\n        main <- if (main == gettextRcmdr(\"<auto>\"))\n            \"\"\n        else paste(\", main=\\\"\", main, \"\\\"\", sep = \"\")\n        putDialog (\"Xyplot\", list(initial.predictor = predictor, initial.response = response,\n            initial.auto.key = auto.key, initial.outer = outer,\n            initial.x.relation = x.relation,\n            initial.y.relation = y.relation,\n            initial.layoutColumns = tclvalue(layoutColumnsVar),\n            initial.layoutRows = tclvalue(layoutRowsVar),\n            initial.conditions = if (length(conditions) != 0) conditions else FALSE,\n            initial.groups = if (length(groups) != 0) groups else FALSE,\n            initial.points = points,\n            initial.lines = lines,\n            initial.tab=tab, initial.xlab=tclvalue(xlabVar),\n            initial.ylab=tclvalue(ylabVar), initial.main=tclvalue(mainVar)))\n        \n        layout.command <- \"\"\n        number.na <- is.na(layoutColumns) + is.na(layoutRows)\n        \n        if (number.na==1) {\n            errorCondition(recall=Xyplot,\n                message=gettextRcmdr(\"Both or neither layout values must be numbers.\"))\n            return()\n        }\n        if (number.na==0) layout.command <- deparse(c(layoutColumns, layoutRows))\n        \n        .activeDataSet <- ActiveDataSet()\n        \n        \n        \n        conditions.command <-\n            if (length(conditions) == 0) {\n                if (outer) {\n                    if (layout.command == \"\")\n                        paste(\", layout=c(\",\n                            length(predictor),\n                            \",\",\n                            length(response),\n                            \")\")\n                    else\n                        paste(\", layout=\", layout.command, sep=\"\")\n                }\n                else\n                    if (layout.command != \"\")\n                        paste(\", layout=\", layout.command, sep=\"\")\n            }\n        else {  ## (length(conditions) > 0)\n            if (outer) {\n                condition.levels <- prod(sapply(conditions, d.f=get(.activeDataSet),\n                    function(g, d.f) length(levels(d.f[[g]]))))\n                if (layout.command != \"\")\n                    paste(\", layout=\", layout.command, sep=\"\")\n                else\n                    paste(\", layout=c(\",\n                        condition.levels,\n                        \"*\",\n                        length(predictor),\n                        \",\",\n                        length(response),\n                        \")\",\n                        ## \", between=list(x=c(0,0, 1, 0,0), y=1)\",\n                        \", between=list(x=c(\",\n                        paste(rep(c(rep(0, condition.levels-1), 1),\n                            length=condition.levels*length(predictor)-1),\n                            collapse=\",\"),\n                        \"), y=1)\")\n            }\n            else\n                if (layout.command != \"\")\n                    paste(\", layout=\", layout.command, sep=\"\")\n        }\n        \n        \n        groups.command <- switch(as.character(length(groups)),\n            \"0\"=\"\",\n            \"1\"=paste(\", groups=\", groups, sep=\"\"),\n            paste(\", groups=interaction(\",\n                paste(groups, collapse=\",\"),\n                \")\", sep=\"\"))\n        \n        if(!(points || lines)) {\n            errorCondition(recall=Xyplot,\n                message=gettextRcmdr(\"Choose at least one of points or lines.\"))\n            return()\n        }\n        \n        type.command <- paste(\", type=\",\n            deparse(c(\"p\"[points], \"l\"[lines])),\n            sep=\"\")\n        \n        xyplot.command <- paste(\"xyplot(\",\n            paste(response, collapse=\" + \"),\n            \" ~ \",\n            paste(predictor, collapse=\" + \"),\n            if (length(conditions) > 0)\n                paste(\" |\",\n                    paste(conditions, collapse=\" + \")\n                ) else \"\",\n            if (outer) \", outer=TRUE\",\n            conditions.command,\n            groups.command,\n            type.command,\n            \", pch=16\",\n            if (auto.key) \", auto.key=list(border=TRUE), par.settings=simpleTheme(pch=16)\" else \"\",\n            paste(\", scales=list(x=list(relation='\",\n                x.relation,\n                \"'), y=list(relation='\",\n                y.relation,\n                \"'))\", sep=\"\"),\n            \", data=\", .activeDataSet, xlab, ylab, main, \")\", sep=\"\")\n        doItAndPrint(xyplot.command)\n        activateMenus()\n        tkfocus(CommanderWindow())\n    }\n    OKCancelHelp(helpSubject=\"xyplot\", reset = \"Xyplot\", apply = \"Xyplot\")\n    tkgrid(getFrame(predictorBox), getFrame(responseBox),\n        columnspan=1, sticky=\"w\")\n    tkgrid(predictorFrame, sticky=\"w\")\n    tkgrid(getFrame(conditionsBox),\n        tklabel(cgFrame, text=gettextRcmdr(\"           \")),\n        getFrame(groupsBox),\n        columnspan=1, sticky=\"w\")\n    tkgrid(cgFrame, sticky=\"w\")\n    tkgrid(tklabel(optFrame, text=gettextRcmdr(\"Other Options\"), fg=getRcmdr(\"title.color\"), font=\"RcmdrTitleFont\"), sticky=\"w\")\n    tkgrid(otherFrame, sticky=\"w\")\n    tkgrid(tklabel(optFrame, text=gettextRcmdr(\"Plot Type (one or both)\"), fg=getRcmdr(\"title.color\"), font=\"RcmdrTitleFont\"), sticky=\"w\")\n    tkgrid(typeFrame, sticky=\"w\")\n    \n    tkgrid(x.relationFrame, y.relationFrame, columnspan=2, sticky=\"w\")\n    tkgrid(relationFrame, sticky=\"w\")\n    \n    tkgrid(tklabel(optFrame, text=gettextRcmdr(\"Layout\"), fg=getRcmdr(\"title.color\"), font=\"RcmdrTitleFont\"),\n        sticky=\"w\")\n    tkgrid(tklabel(scalarsFrame, text=gettextRcmdr(\"number of columns:\")), layoutColumnsEntry, sticky=\"w\")\n    tkgrid(tklabel(scalarsFrame, text=gettextRcmdr(\"number of rows:\")), layoutRowsEntry, sticky=\"w\")\n    tkgrid(scalarsFrame, sticky=\"w\")\n    tkgrid(optFrame, parFrame, sticky = \"nswe\", padx=6, pady=6)\n    tkgrid(optionsFrame, sticky = \"w\")\n    dialogSuffix(use.tabs=TRUE, grid.buttons=TRUE)\n}\n\n# set the colour palette\n\n# some unexported functions for dealing with colors\n\npickColor <- function(initialcolor, parent){\n    newcolor <- tclvalue(.Tcl(paste(\"tk_chooseColor\", .Tcl.args(title = \"Select a Color\",\n                                                                initialcolor=initialcolor, parent=parent))))\n    newcolor <- toupper(newcolor)\n    if (newcolor == \"\") initialcolor else newcolor\n}\n\n# the following local function from Thomas Lumley via r-help\nconvert <- function (color){\n    rgb <- col2rgb(color)/255\n    L <- c(0.2, 0.6, 0) %*% rgb\n    ifelse(L >= 0.2, \"#000060\", \"#FFFFA0\")\n}\n\ncol2hex <- function(col){\n    hexcolor <- colorConverter(toXYZ = function(hex,...) {\n        rgb <- t(col2rgb(hex))/255\n        colorspaces$sRGB$toXYZ(rgb,...) },\n        fromXYZ = function(xyz,...) {\n            rgb <- colorspaces$sRGB$fromXYZ(xyz,...)\n            rgb <- round(rgb,5)\n            if (min(rgb) < 0 || max(rgb) > 1) as.character(NA)\n            else rgb(rgb[1],rgb[2],rgb[3])},\n        white = \"D65\", name = \"#rrggbb\")\n    cols <- t(col2rgb(col))\n    convertColor(cols, from=\"sRGB\", to=hexcolor, scale.in=255, scale.out=NULL)\n}\n\nsetPalette <- function() {\n    env <- environment()\n    initializeDialog(title=gettextRcmdr(\"Set Color Palette\"))\n    hex <- col2hex(palette())\n    for (i in 1:8) assign(paste(\"hex\", i, sep=\".\"), hex[i], envir=env)\n    paletteFrame <- tkframe(top)\n    colorField1 <- labelRcmdr(paletteFrame, text=rgb2col(hex[1]), fg=hex[1])\n    button1 <- tkbutton(paletteFrame, text=hex[1], bg = hex[1],\n        fg=convert(hex[1]),\n        command=function() {\n            color <- pickColor(hex[1], parent=button1)\n            fg <- convert(color)\n            tkconfigure(button1, bg=color, fg=fg, text=toupper(color))\n            tkconfigure(colorField1, text=rgb2col(color), foreground=color)\n            assign(\"hex.1\", color, envir=env)\n        }\n    )\n    colorField2 <- labelRcmdr(paletteFrame, text=rgb2col(hex[2]), fg=hex[2])\n    button2 <- tkbutton(paletteFrame, text=hex[2], bg = hex[2],\n        fg=convert(hex[2]),\n        command=function() {\n            color <- pickColor(hex[2], parent=button2)\n            fg <- convert(color)\n            tkconfigure(button2, bg=color, fg=fg, text=toupper(color))\n            tkconfigure(colorField2, text=rgb2col(color), foreground=color)\n            assign(\"hex.2\", color, envir=env)\n        }\n    )\n    colorField3 <- labelRcmdr(paletteFrame, text=rgb2col(hex[3]), fg=hex[3])\n    button3 <- tkbutton(paletteFrame, text=hex[3], bg = hex[3],\n        fg=convert(hex[3]),\n        command=function() {\n            color <- pickColor(hex[3], parent=button3)\n            fg <- convert(color)\n            tkconfigure(button3, bg=color, fg=fg, text=toupper(color))\n            tkconfigure(colorField3, text=rgb2col(color), foreground=color)\n            assign(\"hex.3\", color, envir=env)\n        }\n    )\n    colorField4 <- labelRcmdr(paletteFrame, text=rgb2col(hex[4]), fg=hex[4])\n    button4 <- tkbutton(paletteFrame, text=hex[4], bg = hex[4],\n        fg=convert(hex[4]),\n        command=function() {\n            color <- pickColor(hex[4], parent=button4)\n            fg <- convert(color)\n            tkconfigure(button4, bg=color, fg=fg, text=toupper(color))\n            tkconfigure(colorField4, text=rgb2col(color), foreground=color)\n            assign(\"hex.4\", color, envir=env)\n        }\n    )\n    colorField5 <- labelRcmdr(paletteFrame, text=rgb2col(hex[5]), fg=hex[5])\n    button5 <- tkbutton(paletteFrame, text=hex[5], bg = hex[5],\n        fg=convert(hex[5]),\n        command=function() {\n            color <- pickColor(hex[5], parent=button5)\n            fg <- convert(color)\n            tkconfigure(button5, bg=color, fg=fg, text=toupper(color))\n            tkconfigure(colorField5, text=rgb2col(color), foreground=color)\n            assign(\"hex.5\", color, envir=env)\n        }\n    )\n    colorField6 <- labelRcmdr(paletteFrame, text=rgb2col(hex[6]), fg=hex[6])\n    button6 <- tkbutton(paletteFrame, text=hex[6], bg = hex[6],\n        fg=convert(hex[6]),\n        command=function() {\n            color <- pickColor(hex[6], parent=button6)\n            fg <- convert(color)\n            tkconfigure(button6, bg=color, fg=fg, text=toupper(color))\n            tkconfigure(colorField6, text=rgb2col(color), foreground=color)\n            assign(\"hex.6\", color, envir=env)\n        }\n    )\n    colorField7 <- labelRcmdr(paletteFrame, text=rgb2col(hex[7]), fg=hex[7])\n    button7 <- tkbutton(paletteFrame, text=hex[7], bg = hex[7],\n        fg=convert(hex[7]),\n        command=function() {\n            color <- pickColor(hex[7], parent=button7)\n            fg <- convert(color)\n            tkconfigure(button7, bg=color, fg=fg, text=toupper(color))\n            tkconfigure(colorField7, text=rgb2col(color), foreground=color)\n            assign(\"hex.7\", color, envir=env)\n        }\n    )\n    colorField8 <- labelRcmdr(paletteFrame, text=rgb2col(hex[8]), fg=hex[8])\n    button8 <- tkbutton(paletteFrame, text=hex[8], bg = hex[8],\n        fg=convert(hex[8]),\n        command=function() {\n            color <- pickColor(hex[8], parent=button8)\n            fg <- convert(color)\n            tkconfigure(button8, bg=color, fg=fg, text=toupper(color))\n            tkconfigure(colorField8, text=rgb2col(color), foreground=color)\n            assign(\"hex.8\", color, envir=env)\n        }\n    )\n    onOK <- function(){\n        closeDialog(top)\n        palette(c(hex.1, hex.2, hex.3, hex.4, hex.5, hex.6, hex.7, hex.8))\n        Message(gettextRcmdr(\"Color palette reset.\", type=\"note\"))\n    }\n    OKCancelHelp(helpSubject=\"palette\")\n    tkgrid(button1, button2, button3, button4, button5, button6, button7, button8)\n    tkgrid(colorField1, colorField2, colorField3, colorField4, colorField5, \n        colorField6, colorField7, colorField8)\n    tkgrid(paletteFrame)\n    tkgrid(buttonsFrame, sticky=\"ew\")\n    dialogSuffix()\n}\n\nstripChart <- function () {\n    defaults <- list (initial.group = NULL, initial.response = NULL, initial.plotType = \"stack\",\n        initial.xlab=gettextRcmdr(\"<auto>\"), initial.ylab=gettextRcmdr(\"<auto>\"), \n        initial.main=gettextRcmdr(\"<auto>\"), initial.tab=0)\n    dialog.values <- getDialog(\"stripChart\", defaults)\n    initializeDialog(title = gettextRcmdr(\"Strip Chart\"), use.tabs=TRUE)\n    groupBox <- variableListBox(dataTab, Factors(), title = gettextRcmdr(\"Factors (pick zero or more)\"),\n        selectmode = \"multiple\", initialSelection = varPosn (dialog.values$initial.group, \"factor\"))\n    responseBox <- variableListBox(dataTab, Numeric(), title = gettextRcmdr(\"Response Variable (pick one)\"),\n        initialSelection = varPosn (dialog.values$initial.response, \"numeric\"))\n    optionsFrame <- tkframe(optionsTab)\n    optFrame <- ttklabelframe(optionsFrame, labelwidget=tklabel(optionsFrame, text = gettextRcmdr(\"Duplicate Values\"),\n        font=\"RcmdrTitleFont\", foreground=getRcmdr(\"title.color\")))\n    parFrame <- ttklabelframe(optionsFrame, labelwidget=tklabel(optionsFrame, text = gettextRcmdr(\"Plot Labels\"),\n        font=\"RcmdrTitleFont\", foreground=getRcmdr(\"title.color\")))\n    xlabVar <- tclVar(dialog.values$initial.xlab)\n    ylabVar <- tclVar(dialog.values$initial.ylab)\n    mainVar <- tclVar(dialog.values$initial.main)\n    xlabEntry <- ttkentry(parFrame, width = \"25\", textvariable = xlabVar)\n    xlabScroll <- ttkscrollbar(parFrame, orient = \"horizontal\",\n        command = function(...) tkxview(xlabEntry, ...))\n    tkconfigure(xlabEntry, xscrollcommand = function(...) tkset(xlabScroll,\n        ...))\n    tkgrid(labelRcmdr(parFrame, text = gettextRcmdr(\"x-axis label\")), xlabEntry, sticky = \"ew\", padx=6)\n    tkgrid(labelRcmdr(parFrame, text =\"\"), xlabScroll, sticky = \"ew\", padx=6)\n    ylabEntry <- ttkentry(parFrame, width = \"25\", textvariable = ylabVar)\n    ylabScroll <- ttkscrollbar(parFrame, orient = \"horizontal\",\n        command = function(...) tkxview(ylabEntry, ...))\n    tkconfigure(ylabEntry, xscrollcommand = function(...) tkset(ylabScroll,\n        ...))\n    tkgrid(labelRcmdr(parFrame, text = gettextRcmdr(\"y-axis label\")), ylabEntry, sticky = \"ew\", padx=6)\n    tkgrid(labelRcmdr(parFrame, text =\"\"), ylabScroll, sticky = \"ew\", padx=6)\n    mainEntry <- ttkentry(parFrame, width = \"25\", textvariable = mainVar)\n    mainScroll <- ttkscrollbar(parFrame, orient = \"horizontal\",\n        command = function(...) tkxview(mainEntry, ...))\n    tkconfigure(mainEntry, xscrollcommand = function(...) tkset(mainScroll,\n        ...))\n    tkgrid(labelRcmdr(parFrame, text = gettextRcmdr(\"Graph title\")), mainEntry, sticky = \"ew\", padx=6)\n    tkgrid(labelRcmdr(parFrame, text=\"\"), mainScroll, sticky = \"ew\", padx=6)\n    onOK <- function() {\n        tab <- if (as.character(tkselect(notebook)) == dataTab$ID) 0 else 1\n        groups <- getSelection(groupBox)\n        response <- getSelection(responseBox)\n        closeDialog()\n        if (0 == length(response)) {\n            errorCondition(recall = stripChart, message = gettextRcmdr(\"No response variable selected.\"))\n            return()\n        }\n        .activeDataSet <- ActiveDataSet()\n        plotType <- tclvalue(plotTypeVariable)\n        \n        main <- trim.blanks(tclvalue(mainVar))\n        main <- if (main == gettextRcmdr(\"<auto>\"))\n            \"\"\n        else paste(\", main=\\\"\", main, \"\\\"\", sep = \"\")\n        putDialog (\"stripChart\", list (initial.group = groups, initial.response = response,\n            initial.plotType = plotType, initial.xlab=tclvalue(xlabVar),\n            initial.ylab=tclvalue(ylabVar), initial.main=tclvalue(mainVar),\n            initial.tab=tab))\n        method <- paste(\", method=\\\"\", plotType, \"\\\"\", sep = \"\")\n        if (length(groups) == 0) {\n            xlab <- trim.blanks(tclvalue(xlabVar))\n            xlab <- if (xlab == gettextRcmdr(\"<auto>\"))\n                paste(\", xlab=\\\"\", response, \"\\\"\", sep = \"\")\n            else paste(\", xlab=\\\"\", xlab, \"\\\"\", sep = \"\")\n            ylab <- trim.blanks(tclvalue(ylabVar))\n            ylab <- if (ylab == gettextRcmdr(\"<auto>\"))\n                \"\"\n            else paste(\", ylab=\\\"\", ylab, \"\\\"\", sep = \"\")\n            doItAndPrint(paste(\"stripchart(\", .activeDataSet,\n                \"$\", response, method, xlab, ylab, main, \")\", sep = \"\"))\n        }\n        else {\n            groupNames <- paste(groups, collapse = \"*\")\n            xlab <- trim.blanks(tclvalue(xlabVar))\n            xlab <- if (xlab == gettextRcmdr(\"<auto>\"))\n                \"\"\n            else paste(\", xlab=\\\"\", xlab, \"\\\"\", sep = \"\")\n            ylab <- trim.blanks(tclvalue(ylabVar))\n            ylab <- if (ylab == gettextRcmdr(\"<auto>\"))\n                paste(\", ylab=\\\"\", response, \"\\\"\", sep = \"\")\n            else paste(\", ylab=\\\"\", ylab, \"\\\"\", sep = \"\")\n            doItAndPrint(paste(\"stripchart(\", response, \" ~ \",\n                groupNames, \", vertical=TRUE\", method, xlab, ylab, main, \", data=\",\n                .activeDataSet, \")\", sep = \"\"))\n        }\n        activateMenus()\n        tkfocus(CommanderWindow())\n    }\n    plotFrame <- tkframe(optFrame)\n    radioButtons(window = plotFrame, name = \"plotType\", buttons = c(\"stack\", \"jitter\"),\n        labels = gettextRcmdr(c(\"Stack\", \"Jitter\")), title = \"\",\n        initialValue = dialog.values$initial.plotType)\n    OKCancelHelp(helpSubject = \"stripchart\", reset = \"stripChart\", apply = \"stripChart\")\n    tkgrid(getFrame(groupBox), getFrame(responseBox), sticky = \"nw\")\n    tkgrid(plotTypeFrame, sticky = \"w\")\n    tkgrid(plotFrame, sticky = \"w\")\n    tkgrid(optFrame, parFrame, sticky = \"nswe\", padx=6, pady=6)\n    tkgrid(optionsFrame, sticky = \"w\")\n    dialogSuffix(use.tabs=TRUE, grid.buttons=TRUE)\n}\n\nDensityPlot <- function () {\n    defaults <- list(initial.x = NULL, initial.bw = gettextRcmdr(\"<auto>\"),\n        initial.kernel=\"gaussian\", initial.adjust=1, initial.group=NULL, initial.tab=0,\n        initial.xlab=gettextRcmdr(\"<auto>\"), initial.ylab=gettextRcmdr(\"<auto>\"))\n    dialog.values <- getDialog(\"DensityPlot\", defaults)\n    initializeDialog(title = gettextRcmdr(\"Nonparametric Density Estimate\"), use.tabs=TRUE)\n    xBox <- variableListBox(dataTab, Numeric(), title = gettextRcmdr(\"Variable (pick one)\"),\n        initialSelection = varPosn (dialog.values$initial.x, \"numeric\"))\n    optionsFrame <- tkframe(optionsTab)\n    optFrame <- ttklabelframe(optionsFrame, labelwidget=tklabel(optionsFrame, text = gettextRcmdr(\"Kernel Function\"),\n        font=\"RcmdrTitleFont\", foreground=getRcmdr(\"title.color\")))\n    parFrame <- ttklabelframe(optionsFrame, labelwidget=tklabel(optionsFrame, text = gettextRcmdr(\"Plot Labels\"),\n        font=\"RcmdrTitleFont\", foreground=getRcmdr(\"title.color\")))\n    kerFrame <- tkframe(optFrame)\n    radioButtons(kerFrame, name = \"kernel\", buttons = c(\"gaussian\", \"epanechnikov\", \"biweight\"),\n        labels = gettextRcmdr(c(\"Gaussian\", \"Epanechnikov\", \"Tukey biweight\")),\n        initialValue = dialog.values$initial.kernel)\n    bwFrame <- tkframe(optFrame)\n    bwVariable <- tclVar(dialog.values$initial.bw)\n    bwField <- ttkentry(bwFrame, width = \"8\", textvariable = bwVariable)\n    adjustVariable <- tclVar(dialog.values$initial.adjust)\n    adjustSlider <- tkscale(bwFrame, from = 0.1, to = 10, showvalue = TRUE,\n        variable = adjustVariable, resolution = 0.1, orient = \"horizontal\")\n    initial.group <- dialog.values$initial.group\n    .groups <- if (is.null(initial.group)) FALSE else initial.group\n    xlabVar <- tclVar(dialog.values$initial.xlab)\n    ylabVar <- tclVar(dialog.values$initial.ylab)\n    xlabEntry <- ttkentry(parFrame, width = \"25\", textvariable = xlabVar)\n    xlabScroll <- ttkscrollbar(parFrame, orient = \"horizontal\",\n        command = function(...) tkxview(xlabEntry, ...))\n    tkconfigure(xlabEntry, xscrollcommand = function(...) tkset(xlabScroll,\n        ...))\n    tkgrid(labelRcmdr(parFrame, text = gettextRcmdr(\"x-axis label\")), xlabEntry, sticky = \"ew\", padx=6)\n    tkgrid(labelRcmdr(parFrame, text=\"\"), xlabScroll, sticky = \"ew\", padx=6)\n    ylabEntry <- ttkentry(parFrame, width = \"25\", textvariable = ylabVar)\n    ylabScroll <- ttkscrollbar(parFrame, orient = \"horizontal\",\n        command = function(...) tkxview(ylabEntry, ...))\n    tkconfigure(ylabEntry, xscrollcommand = function(...) tkset(ylabScroll,\n        ...))\n    tkgrid(labelRcmdr(parFrame, text = gettextRcmdr(\"y-axis label\")), ylabEntry, sticky = \"ew\", padx=6)\n    tkgrid(labelRcmdr(parFrame, text =\"\"), ylabScroll, sticky = \"ew\", padx=6)\n    onOK <- function() {\n        tab <- if (as.character(tkselect(notebook)) == dataTab$ID) 0 else 1\n        x <- getSelection(xBox)\n        kernel <- tclvalue(kernelVariable)\n        adjust <- tclvalue(adjustVariable)\n        bw <- tclvalue(bwVariable)\n        if (length(x) == 0) {\n            errorCondition(recall = DensityPlot, message = gettextRcmdr(\"You must select a variable\"))\n            return()\n        }\n        if (bw != gettextRcmdr(\"<auto>\")){\n            test.bw <- suppressWarnings(as.numeric(bw))\n            if (is.na(test.bw) || test.bw <= 0){\n                errorCondition(recall = DensityPlot,\n                    message = gettextRcmdr(\"Bandwidth must be <auto> or a positive number\"))\n                return()\n            }\n        }\n        xlab <- trim.blanks(tclvalue(xlabVar))\n        xlab <- if (xlab == gettextRcmdr(\"<auto>\"))\n            \"\"\n        else paste(\", xlab=\\\"\", xlab, \"\\\"\", sep = \"\")\n        ylab <- trim.blanks(tclvalue(ylabVar))\n        ylab <- if (ylab == gettextRcmdr(\"<auto>\"))\n            \"\"\n        else paste(\", ylab=\\\"\", ylab, \"\\\"\", sep = \"\")\n        putDialog (\"DensityPlot\", list(initial.x = x, initial.bw = bw, initial.kernel=kernel,\n            initial.adjust=adjust,\n            initial.group=if (.groups == FALSE) NULL else .groups,\n            initial.tab=tab, initial.xlab=tclvalue(xlabVar),\n            initial.ylab=tclvalue(ylabVar)))\n        if (bw == gettextRcmdr(\"<auto>\")) bw  <- '\"SJ\"'\n        closeDialog()\n        .activeDataSet <- ActiveDataSet()\n        var <- paste(.activeDataSet, \"$\", x, sep = \"\")\n        if (is.null(.groups) || .groups == FALSE) {\n            command <- paste(\"densityPlot( ~ \", x, \", data=\", .activeDataSet, ', bw=', bw,\n                \", adjust=\", adjust, ', kernel=\"', kernel, '\"', xlab, ylab, ')', sep=\"\")\n            doItAndPrint(command)\n        }\n        else {\n            command <- paste(\"densityPlot(\", x, \"~\", .groups, \", data=\",\n                .activeDataSet, ', bw=', bw,\n                \", adjust=\", adjust, ', kernel=\"', kernel, '\"', xlab, ylab, ')', sep=\"\")\n            doItAndPrint(command)\n        }\n        activateMenus()\n        tkfocus(CommanderWindow())\n    }\n    groupsBox(DensityPlot, initialGroup=initial.group,\n        initialLabel=if (is.null(initial.group)) gettextRcmdr(\"Plot by groups\")\n        else paste(gettextRcmdr(\"Plot by:\"), initial.group),\n        window=dataTab)\n    OKCancelHelp(helpSubject = \"densityPlot\", reset = \"DensityPlot\", apply=\"DensityPlot\")\n    tkgrid(getFrame(xBox), sticky = \"nw\")\n    tkgrid(groupsFrame, sticky = \"w\")\n    tkgrid(kernelFrame, stick = \"w\")\n    tkgrid(kerFrame, sticky=\"w\")\n    tkgrid(labelRcmdr(bwFrame, text = gettextRcmdr(\"Bandwidth\")), bwField,\n        labelRcmdr(bwFrame, text = gettextRcmdr(\"Multiply bandwidth by\")),\n        adjustSlider, sticky = \"swe\", padx=6)\n    tkgrid(bwFrame, sticky=\"sw\")\n    tkgrid(optFrame, parFrame, sticky = \"nswe\", padx=6, pady=6)\n    tkgrid(optionsFrame, sticky = \"w\")\n    dialogSuffix(use.tabs=TRUE, grid.buttons=TRUE)\n}\n",
    "created" : 1478719738695.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "380121930",
    "id" : "EA09AD3A",
    "lastKnownWriteTime" : 1472135131,
    "last_content_update" : 1472135131,
    "path" : "D:/R-package-sources/Rcmdr-svn/Rcmdr-current/R/graphs-menu.R",
    "project_path" : "R/graphs-menu.R",
    "properties" : {
        "chunk_rendered_width" : "650"
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}