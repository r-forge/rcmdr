{
    "collab_server" : "",
    "contents" : "# last modified 2016-06-02 by J. Fox\n\n# Data menu dialogs\n\nnewDataSet <- function() {\n    initializeDialog(title=gettextRcmdr(\"New Data Set\"))\n    dsname <- tclVar(\"Dataset\")\n    entryDsname <- ttkentry(top, width=\"20\", textvariable=dsname)\n    onOK <- function(){\n        dsnameValue <- trim.blanks(tclvalue(dsname))\n        if (dsnameValue == \"\") {\n            errorCondition(recall=newDataSet,\n                           message=gettextRcmdr(\"You must enter the name of a data set.\"))\n            return()\n        }\n        if (!is.valid.name(dsnameValue)) {\n            errorCondition(recall=newDataSet,\n                           message=paste('\"', dsnameValue, '\" ', gettextRcmdr(\"is not a valid name.\"), sep=\"\"))\n            return()\n        }\n        if (is.element(dsnameValue, listDataSets())) {\n            if (\"no\" == tclvalue(checkReplace(dsnameValue, gettextRcmdr(\"Data set\")))){\n                newDataSet()\n                return()\n            }\n        }\n        closeDialog()\n        command <- paste(\"editDataset(dsname='\", dsnameValue, \"')\", sep=\"\")\n        result <- justDoIt(command)\n        if (class(result)[1] !=  \"try-error\"){\n            if (!getRcmdr(\"dataset.modified\")) return()\n            .data <- try(get(dsnameValue, envir=.GlobalEnv), silent=TRUE)\n            if (nrow(.data) == 0){\n                errorCondition(recall=newDataSet, message=gettextRcmdr(\"empty data set.\"))\n                return()\n            }\n            tempdir <- tempdir()\n            tempdir <- gsub(\"\\\\\\\\\", \"/\", tempdir)\n            savefile <- paste(tempdir, \"/\", dsnameValue, sep=\"\")\n            save(\".data\", file=savefile)\n            if (getRcmdr(\"use.markdown\")) {\n                removeNullRmdBlocks()\n                enterMarkdown(paste('load(\"', savefile, '\")', sep=\"\"))\n            }\n            if (getRcmdr(\"use.knitr\")) {\n                removeNullRnwBlocks()\n                enterKnitr(paste('load(\"', savefile, '\")', sep=\"\"))\n            }\n       }\n        tkfocus(CommanderWindow())\n    }\n    OKCancelHelp(helpSubject=\"editDataset\")\n    tkgrid(labelRcmdr(top, text=gettextRcmdr(\"Enter name for data set:\")), entryDsname, sticky=\"e\")\n    tkgrid(buttonsFrame, columnspan=\"2\", sticky=\"w\")\n    tkgrid.configure(entryDsname, sticky=\"w\")\n    dialogSuffix(focus=entryDsname)\n}\n\nselectActiveDataSet <- function(){\n\tdataSets <- listDataSets()\n\t.activeDataSet <- ActiveDataSet()\n\tif ((length(dataSets) == 1) && !is.null(.activeDataSet)) {\n\t\tMessage(message=gettextRcmdr(\"There is only one dataset in memory.\"),\n\t\t\t\ttype=\"warning\")\n\t\ttkfocus(CommanderWindow())\n\t\treturn()\n\t}\n\tif (length(dataSets) == 0){\n\t\tMessage(message=gettextRcmdr(\"There are no data sets from which to choose.\"),\n\t\t\t\ttype=\"error\")\n\t\ttkfocus(CommanderWindow())\n\t\treturn()\n\t}\n\tinitializeDialog(title=gettextRcmdr(\"Select Data Set\"))\n\tdataSetsBox <- variableListBox(top, dataSets, title=gettextRcmdr(\"Data Sets (pick one)\"),\n\t\t\tinitialSelection=if (is.null(.activeDataSet)) NULL else which(.activeDataSet == dataSets) - 1)\n\tonOK <- function(){\n\t\tselection <- getSelection(dataSetsBox)\n\t\tcloseDialog()\n\t\tsetBusyCursor()\n\t\ton.exit(setIdleCursor())\n\t\tactiveDataSet(selection)\n\t\ttkfocus(CommanderWindow())\n\t}\n\tOKCancelHelp()\n\ttkgrid(getFrame(dataSetsBox), sticky=\"nw\")\n\ttkgrid(buttonsFrame, sticky=\"w\")\n\tdialogSuffix()\n}\n\nlistDataSetsInPackages <- function() doItAndPrint(\"data()\")\n\nRecodeDialog <- function () {\n  processRecode <- function(recode) {\n    parts <- strsplit(recode, \"=\")[[1]]\n    if (length(grep(\",\", parts[1])) > 0) \n      paste(\"c(\", parts[1], \") = \", parts[2], sep = \"\")\n    else paste(parts, collapse = \"=\")\n  }\n  dataSet <- activeDataSet()\n  defaults <- list (initial.asFactor = 1, initial.variables = NULL, initial.name = \"variable\",\n                    initial.recode.directives=\"\")\n  dialog.values <- getDialog (\"RecodeDialog\", defaults)\n  initializeDialog(title = gettextRcmdr(\"Recode Variables\"))\n  variablesBox <- variableListBox(top, Variables(), selectmode = \"multiple\", \n                                  title = gettextRcmdr(\"Variables to recode (pick one or more)\"),\n                                  initialSelection = varPosn (dialog.values$initial.variables, \"all\"))\n  variablesFrame <- tkframe(top)\n  newVariableName <- tclVar(dialog.values$initial.name)\n  newVariable <- ttkentry(variablesFrame, width = \"20\", textvariable = newVariableName)\n  recodesFrame <- tkframe(top)\n  recodes <- tktext(recodesFrame, bg = \"white\", font = getRcmdr(\"logFont\"), \n                    height = \"5\", width = \"40\", wrap = \"none\")\n  recodesXscroll <- ttkscrollbar(recodesFrame, orient = \"horizontal\", \n                                 command = function(...) tkxview(recodes, ...))\n  recodesYscroll <- ttkscrollbar(recodesFrame, command = function(...) tkyview(recodes, \n                                                                               ...))\n  tkconfigure(recodes, xscrollcommand = function(...) tkset(recodesXscroll, \n                                                            ...))\n  tkconfigure(recodes, yscrollcommand = function(...) tkset(recodesYscroll, \n                                                            ...))\n  tkinsert(recodes, \"1.0\", dialog.values$initial.recode.directives)\n  asFactorFrame <- tkframe(top)\n  asFactorVariable <- tclVar(dialog.values$initial.asFactor)\n  asFactorCheckBox <- ttkcheckbutton(asFactorFrame, variable = asFactorVariable)\n  onOK <- function() {\n    asFactor <- tclvalue(asFactorVariable) == \"1\"\n    save.recodes <- trim.blanks(tclvalue(tkget(recodes, \"1.0\", \"end\")))\n    recode.directives <- gsub(\"\\n\", \"; \", save.recodes)\n    check.empty <- gsub(\";\", \"\", gsub(\" \", \"\", recode.directives))\n    if (\"\" == check.empty) {\n      errorCondition(recall = RecodeDialog, message = gettextRcmdr(\"No recode directives specified.\"))\n      return()\n    }\n    if (0 != length(grep(\"'\", recode.directives))) {\n      errorCondition(recall = RecodeDialog, message = gettextRcmdr(\"Use only double-quotes (\\\" \\\") in recode directives\"))\n      return()\n    }\n    recode.directives <- strsplit(recode.directives, \";\")[[1]]\n    recode.directives <- paste(sapply(recode.directives, \n                                      processRecode), collapse = \";\")\n    recode.directives <- sub(\" *; *$\", \"\", recode.directives)\n    variables <- getSelection(variablesBox)\n    closeDialog()\n    if (length(variables) == 0) {\n      errorCondition(recall = RecodeDialog, message = gettextRcmdr(\"You must select a variable.\"))\n      return()\n    }\n    multiple <- if (length(variables) > 1) \n      TRUE\n    else FALSE\n    name <- trim.blanks(tclvalue(newVariableName))\n    #        save.recodes <- gsub(\"; \", \"\\\\\\n\", trim.blanks(recode.directives))  \n    putDialog (\"RecodeDialog\", list (initial.asFactor = asFactor, initial.variables = variables,\n                                     initial.name = name, initial.recode.directives=save.recodes))\n    command <- paste(dataSet, \" <- within(\", dataSet, \", {\", sep=\"\")\n    nvar <- length(variables)\n    for (i in 1:nvar) {\n      variable <- variables[nvar - i + 1]\n      newVar <- if (multiple) \n        paste(name, variable, sep = \"\")\n      else name\n      if (!is.valid.name(newVar)) {\n        errorCondition(recall = RecodeDialog, message = paste(\"\\\"\", \n                                                              newVar, \"\\\" \", gettextRcmdr(\"is not a valid name.\"), \n                                                              sep = \"\"))\n        return()\n      }\n      if (is.element(newVar, Variables())) {\n        if (\"no\" == tclvalue(checkReplace(newVar))) {\n          RecodeDialog()\n          return()\n        }\n      }\n      command <- paste(command, \"\\n  \", newVar, \" <- Recode(\", variable, \", '\", \n                       recode.directives, \"', as.factor.result=\", asFactor, \n                       \")\", sep = \"\")  \n    }\n    command <- paste(command, \"\\n})\", sep=\"\")\n    result <- doItAndPrint(command)\n    if (class(result)[1] != \"try-error\")\n      activeDataSet(dataSet, flushModel = FALSE, flushDialogMemory = FALSE)\n    #     else{\n    #       if (getRcmdr(\"use.markdown\")) removeLastRmdBlock()\n    #       if (getRcmdr(\"use.knitr\")) removeLastRnwBlock()\n    #    }\n    tkfocus(CommanderWindow())\n  }\n  OKCancelHelp(helpSubject = \"RecodeDialog\", reset = \"RecodeDialog\", apply = \"RecodeDialog\")\n  tkgrid(getFrame(variablesBox), sticky = \"nw\")\n  tkgrid(labelRcmdr(variablesFrame, text = \"\"))\n  tkgrid(labelRcmdr(variablesFrame, text = gettextRcmdr(\"New variable name or prefix for multiple recodes: \")), \n         newVariable, sticky = \"w\")\n  tkgrid(asFactorCheckBox, labelRcmdr(asFactorFrame, text = gettextRcmdr(\"Make (each) new variable a factor\")), \n         sticky = \"w\")\n  tkgrid(labelRcmdr(asFactorFrame, text = \"\"))\n  tkgrid(labelRcmdr(recodesFrame, text = gettextRcmdr(\"Enter recode directives\"), \n                    fg = getRcmdr(\"title.color\"), font=\"RcmdrTitleFont\"), sticky = \"w\")\n  tkgrid(recodes, recodesYscroll, sticky = \"nw\")\n  tkgrid(recodesXscroll)\n  tkgrid(variablesFrame, sticky = \"w\")\n  tkgrid(asFactorFrame, sticky = \"w\")\n  tkgrid(recodesFrame, sticky = \"w\")\n  tkgrid(buttonsFrame, sticky = \"w\", columnspan = 2)\n  tkgrid.configure(recodesXscroll, sticky = \"ew\")\n  tkgrid.configure(recodesYscroll, sticky = \"ns\")\n  dialogSuffix(bindReturn = FALSE)\n}\n\nCompute <- function(){\n    onDoubleClick <-function(){\n        var <- trim.blanks(getSelection(variablesBox))\n        word <- paste(\"\\\\[\", gettextRcmdr(\"factor\"), \"\\\\]\", sep=\"\")\n        if (length(grep(word, var)) == 1)\n            var <- trim.blanks(sub(word, \"\",  var))\n        tkfocus(compute)\n        expr <- tclvalue(computeVar)\n        tclvalue(computeVar) <- if (expr == \"\") var\n        else paste(expr, var, sep=if (rev(strsplit(expr, \"\")[[1]])[1] ==\"(\" ) \"\" else \" \")\n        tkicursor(compute, \"end\")\n        tkxview.moveto(compute, \"1\")\n    }\n    defaults <- list(initial.name = \"variable\", initial.expression = \"\")\n    dialog.values <- getDialog(\"Compute\", defaults)\n    dataSet <- activeDataSet()\n    initializeDialog(title=gettextRcmdr(\"Compute New Variable\"))\n    .variables <- Variables()\n    variables <- paste(.variables, ifelse(is.element(.variables, Factors()), gettextRcmdr(\"[factor]\"), \"\"))\n    variablesBox <- variableListBox(top, variables, title=gettextRcmdr(\"Current variables (double-click to expression)\"))\n    tkbind(variablesBox$listbox, \"<Double-ButtonPress-1>\", onDoubleClick)\n    variablesFrame <- tkframe(top)\n    newVariableName <- tclVar(dialog.values$initial.name)\n    newVariable <- ttkentry(variablesFrame, width=\"20\", textvariable=newVariableName)\n    computeFrame <- tkframe(top)\n    computeVar <- tclVar(dialog.values$initial.expression)\n    compute <- ttkentry(computeFrame, font=getRcmdr(\"logFont\"), width=\"30\", textvariable=computeVar)\n    computeXscroll <- ttkscrollbar(computeFrame,\n                                   orient=\"horizontal\", command=function(...) tkxview(compute, ...))\n    tkconfigure(compute, xscrollcommand=function(...) tkset(computeXscroll, ...))\n    onOK <- function(){\n        closeDialog()\n        newVar <- trim.blanks(tclvalue(newVariableName))\n        if (!is.valid.name(newVar)){\n            errorCondition(recall=Compute,\n                           message=paste('\"', newVar, '\" ', gettextRcmdr(\"is not a valid name.\"), sep=\"\"))\n            return()\n        }\n        express <- tclvalue(computeVar)\n        check.empty <- gsub(\";\", \"\", gsub(\" \", \"\", express))\n        if (\"\" == check.empty) {\n            errorCondition(recall=Compute,\n                           message=gettextRcmdr(\"No expression specified.\"))\n            return()\n        }\n        putDialog(\"Compute\", list(initial.name=newVar, initial.expression=express))\n        if (is.element(newVar, Variables())) {\n            if (\"no\" == tclvalue(checkReplace(newVar, gettextRcmdr(\"Variable\")))){\n                Compute()\n                return()\n            }\n        }\n        command <-  paste(dataSet,\"$\",newVar, \" <- with(\", ActiveDataSet(),\n                          \", \", express, \")\", sep=\"\")\n        logger(command)\n        result <- justDoIt(command)\n        if (class(result)[1] !=  \"try-error\") activeDataSet(dataSet, flushModel=FALSE, flushDialogMemory=FALSE)\n        else{\n            if (getRcmdr(\"use.markdown\")) removeLastRmdBlock()\n            if (getRcmdr(\"use.knitr\")) removeLastRnwBlock()\n        }\n        tkfocus(CommanderWindow())\n    }\n    OKCancelHelp(helpSubject=\"Compute\", reset = \"Compute\", apply = \"Compute\")\n    tkgrid(getFrame(variablesBox), sticky=\"nw\", columnspan=2)\n    tkgrid(labelRcmdr(variablesFrame, text=gettextRcmdr(\"New variable name\")), sticky=\"w\")\n    tkgrid(newVariable, labelRcmdr(variablesFrame, text=\"     \"), sticky=\"w\")\n    tkgrid(labelRcmdr(computeFrame, text=gettextRcmdr(\"Expression to compute\")), sticky=\"w\")\n    tkgrid(compute, sticky=\"w\")\n    tkgrid(computeXscroll, sticky=\"ew\")\n    tkgrid(variablesFrame, computeFrame, sticky=\"nw\")\n    tkgrid(buttonsFrame, sticky=\"w\", columnspan=2)\n    dialogSuffix(focus=compute)\n}\n\ndeleteVariable <- function(){\n  dataSet <- activeDataSet()\n  initializeDialog(title=gettextRcmdr(\"Delete Variables\"))\n  variablesBox <- variableListBox(top, Variables(),\n                                  title=gettextRcmdr(\"Variable(s) to delete (pick one or more)\"), selectmode=\"multiple\",\n                                  initialSelection=NULL)\n  onOK <- function(){\n    variables <- getSelection(variablesBox)\n    closeDialog()\n    if (length(variables) == 0) {\n      errorCondition(recall=deleteVariable, message=gettextRcmdr(\"You must select one or more variables.\"))\n      return()\n    }\n    if (length(variables) == 1){\n      response <- tclvalue(RcmdrTkmessageBox(message=sprintf(gettextRcmdr(\"Delete %s?\\nPlease confirm.\"), variables), icon=\"warning\", type=\"okcancel\", default=\"cancel\"))\n      if (response == \"cancel\") {\n        onCancel()\n        return()\n      }\n    }\n    else{\n      response <- tclvalue(RcmdrTkmessageBox(message=\n                                               sprintf(gettextRcmdr(\"Delete %d variables?\\nPlease confirm.\"), length(variables)),\n                                             icon=\"warning\", type=\"okcancel\", default=\"cancel\"))\n      if (response == \"cancel\") {\n        onCancel()\n        return()\n      }\n    }\n    command <- paste(dataSet, \" <- within(\", dataSet, \", {\", sep=\"\")\n    for (variable in variables){\n      command <- paste(command, \"\\n  \", variable, \" <- NULL\", sep=\"\")\n    }\n    command <- paste(command, \"\\n})\")\n    doItAndPrint(command)\n    activeDataSet(dataSet, flushModel=FALSE, flushDialogMemory=FALSE)\n    tkfocus(CommanderWindow())\n  }\n  OKCancelHelp(helpSubject=\"NULL\")\n  tkgrid(getFrame(variablesBox), sticky=\"nw\")\n  tkgrid(buttonsFrame, sticky=\"w\")\n  dialogSuffix()\n}\n\nreadDataSet <- function() {\n    initializeDialog(title=gettextRcmdr(\"Read Text Data From File, Clipboard, or URL\"))\n    optionsFrame <- tkframe(top)\n    dsname <- tclVar(\"Dataset\")\n    entryDsname <- ttkentry(optionsFrame, width=\"20\", textvariable=dsname)\n    radioButtons(optionsFrame, \"location\", buttons=c(\"local\", \"clipboard\", \"url\"), \n                 labels=gettextRcmdr(c(\"Local file system\", \"Clipboard\", \"Internet URL\")), title=gettextRcmdr(\"Location of Data File\"))\n    headerVariable <- tclVar(\"1\")\n    headerCheckBox <- ttkcheckbutton(optionsFrame, variable=headerVariable)\n    radioButtons(optionsFrame, \"delimiter\", buttons=c(\"whitespace\", \"commas\", \"semicolons\", \"tabs\"),\n                 labels=gettextRcmdr(c(\"White space\", \"Commas [,]\", \"Semicolons [;]\", \"Tabs\")), title=gettextRcmdr(\"Field Separator\"))\n    otherDelimiterFrame <- tkframe(delimiterFrame)\n    otherButton <- ttkradiobutton(otherDelimiterFrame, variable=delimiterVariable, value=\"other\", text=gettextRcmdr(\"Other\"))\n    otherVariable <- tclVar(\"\")\n    otherEntry <- ttkentry(otherDelimiterFrame, width=\"4\", textvariable=otherVariable)\n    radioButtons(optionsFrame, \"decimal\", buttons=c(\"period\", \"comma\"),\n                 labels=gettextRcmdr(c(\"Period [.]\", \"Comma [,]\")), title=gettextRcmdr(\"Decimal-Point Character\"))\n    missingVariable <- tclVar(\"NA\")\n    missingEntry <- ttkentry(optionsFrame, width=\"8\", textvariable=missingVariable)\n    onOK <- function(){\n        closeDialog()\n        setBusyCursor()\n        on.exit(setIdleCursor())\n        dsnameValue <- trim.blanks(tclvalue(dsname))\n        if (dsnameValue == \"\"){\n            errorCondition(recall=readDataSet,\n                           message=gettextRcmdr(\"You must enter a name for the data set.\"))\n            return()\n        }\n        if (!is.valid.name(dsnameValue)){\n            errorCondition(recall=readDataSet,\n                           message=paste('\"', dsnameValue, '\" ', gettextRcmdr(\"is not a valid name.\"), sep=\"\"))\n            return()\n        }\n        if (is.element(dsnameValue, listDataSets())) {\n            if (\"no\" == tclvalue(checkReplace(dsnameValue, gettextRcmdr(\"Data set\")))){\n                readDataSet()\n                return()\n            }\n        }\n        location <- tclvalue(locationVariable)\n        file <- if (location == \"clipboard\") \"clipboard\" \n        else if (location == \"local\") tclvalue(tkgetOpenFile(filetypes=\n                                                                 gettextRcmdr('{\"All Files\" {\"*\"}} {\"Text Files\" {\".txt\" \".TXT\" \".dat\" \".DAT\" \".csv\" \".CSV\"}}')))\n        else {\n            initializeDialog(subdialog, title=gettextRcmdr(\"Internet URL\"))\n            onOKsub <- function(){\n                closeDialog(subdialog)\n            }\n            urlFrame <- tkframe(subdialog)\n            urlVar <- tclVar(\"\")\n            url <- ttkentry(urlFrame, font=getRcmdr(\"logFont\"), width=\"30\", textvariable=urlVar)\n            urlXscroll <- ttkscrollbar(urlFrame,\n                                       orient=\"horizontal\", command=function(...) tkxview(url, ...))\n            tkconfigure(url, xscrollcommand=function(...) tkset(urlXscroll, ...))\n            .subexit <- function() tclvalue(urlVar) <- \"\"\n            subOKCancelHelp()\n            tkgrid(url, sticky=\"w\")\n            tkgrid(urlXscroll, sticky=\"ew\")\n            tkgrid(urlFrame, sticky=\"nw\")\n            tkgrid(subButtonsFrame, sticky=\"w\")\n            dialogSuffix(subdialog, focus=url, onOK=onOKsub, force.wait=TRUE)\n            tclvalue(urlVar)\n        }\n        if (file == \"\") {\n            if (getRcmdr(\"grab.focus\")) tkgrab.release(top)\n            tkdestroy(top)\n            return()\n        }\n        head <- tclvalue(headerVariable) == \"1\"\n        delimiter <- tclvalue(delimiterVariable)\n        del <- if (delimiter == \"whitespace\") \"\"\n        else if (delimiter == \"commas\") \",\"\n        else if (delimiter == \"semicolons\") \";\"\n        else if (delimiter == \"tabs\") \"\\\\t\"\n        else tclvalue(otherVariable)\n        miss <- tclvalue(missingVariable)\n        dec <- if (tclvalue(decimalVariable) == \"period\") \".\" else \",\"\n        command <- paste('read.table(\"', file,'\", header=', head,\n                         ', sep=\"', del, '\", na.strings=\"', miss, '\", dec=\"', dec, '\", strip.white=TRUE)', sep=\"\")\n        logger(paste(dsnameValue, \" <- \", command, sep=\"\"))\n        result <- justDoIt(command)\n        if (class(result)[1] !=  \"try-error\"){\n            gassign(dsnameValue, result)\n            activeDataSet(dsnameValue)\n        }\n        tkfocus(CommanderWindow())\n    }\n    OKCancelHelp(helpSubject=\"read.table\")\n    tkgrid(labelRcmdr(optionsFrame, text=gettextRcmdr(\"Enter name for data set:\")), entryDsname, sticky=\"w\")\n    tkgrid(labelRcmdr(optionsFrame, text=gettextRcmdr(\"Variable names in file:\")), headerCheckBox, sticky=\"w\")\n    tkgrid(labelRcmdr(optionsFrame, text=gettextRcmdr(\"Missing data indicator:\")), missingEntry, sticky=\"w\")\n    tkgrid(locationFrame, sticky=\"w\")\n    tkgrid(otherButton, \n           labelRcmdr(otherDelimiterFrame, text=gettextRcmdr(\"    Specify:\")), otherEntry, sticky=\"w\")\n    tkgrid(otherDelimiterFrame, sticky=\"w\")\n    tkgrid(delimiterFrame, sticky=\"w\", columnspan=2)\n    tkgrid(decimalFrame, sticky=\"w\")\n    tkgrid(optionsFrame, sticky=\"w\")\n    tkgrid(buttonsFrame, sticky=\"w\")\n    dialogSuffix()\n}\n\nreadDataFromPackage <- function() {\n\tenv <- environment()\n\tdatasets <- NULL\n\tinitializeDialog(title=gettextRcmdr(\"Read Data From Package\"))\n\tdsname <- tclVar(\"\")\n\tpackage <- NULL\n\tenterFrame <- tkframe(top)\n\tentryDsname <- ttkentry(enterFrame, width=\"20\", textvariable=dsname)\n\tpackages <- sort(.packages())\n\tpackages <- packages[! packages %in% c(\"base\", \"stats\")]\n\tpackages <- packages[sapply(packages, function(package){\n\t\t\t\t\t\tds <- data(package=package)$results\n\t\t\t\t\t\tif (nrow(ds) == 0) return(FALSE)\n\t\t\t\t\t\tds <- ds[, \"Item\"]\n\t\t\t\t\t\t# ds <- trim.blanks(sub(\"\\\\(.*\\\\)\", \"\", ds))\n\t\t\t\t\t\tvalid <- sapply(ds, is.valid.name)\n\t\t\t\t\t\tlength(ds[valid]) > 0\n\t\t\t\t\t})]\n\tpackageDatasetFrame <- tkframe(top)\n\tpackageFrame <- tkframe(packageDatasetFrame)\n\tmax.height <- getRcmdr(\"variable.list.height\")\n\tpackageBox <- tklistbox(packageFrame, height=min(max.height, length(packages)), \n            exportselection=\"FALSE\",\n\t\t\tselectmode=\"single\", background=\"white\")\n\tpackageScroll <- ttkscrollbar(packageFrame,\n\t\t\tcommand=function(...) tkyview(packageBox, ...))\n\ttkconfigure(packageBox, yscrollcommand=function(...) tkset(packageScroll, ...))\n\tfor (p in packages) tkinsert(packageBox, \"end\", p)\n\tdatasetFrame <- tkframe(packageDatasetFrame)\n\tdatasetBox <- tklistbox(datasetFrame, height=max.height, exportselection=\"FALSE\",\n\t\t\tselectmode=\"single\", background=\"white\")\n\tdatasetScroll <- ttkscrollbar(datasetFrame,\n\t\t\tcommand=function(...) tkyview(datasetBox, ...))\n\ttkconfigure(datasetBox, yscrollcommand=function(...) tkset(datasetScroll, ...))\n\tonPackageSelect <- function(){\n\t\tassign(\"package\", packages[as.numeric(tkcurselection(packageBox)) + 1], envir=env)\n\t\tdatasets <<- data(package=package)$results[,3]\n\t\tvalid <- sapply(datasets, is.valid.name)\n\t\tdatasets <<- datasets[valid]\n\t\ttkdelete(datasetBox, \"0\", \"end\")\n\t\tfor (dataset in datasets) tkinsert(datasetBox, \"end\", dataset)\n\t\ttkconfigure(datasetBox, height=min(max.height, length(datasets)))\n\t\tfirstChar <- tolower(substr(datasets, 1, 1))\n\t\tlen <- length(datasets)\n\t\tonLetter <- function(letter){\n\t\t\tletter <- tolower(letter)\n\t\t\tcurrent <- 1 + round(as.numeric(unlist(strsplit(tclvalue(tkyview(datasetBox) ), \" \"))[1])*len)\n\t\t\tmat <- match(letter, firstChar[-(1:current)])\n\t\t\tif (is.na(mat)) return()\n\t\t\ttkyview.scroll(datasetBox, mat, \"units\")\n\t\t}\n\t\tonA <- function() onLetter(\"a\")\n\t\tonB <- function() onLetter(\"b\")\n\t\tonC <- function() onLetter(\"c\")\n\t\tonD <- function() onLetter(\"d\")\n\t\tonE <- function() onLetter(\"e\")\n\t\tonF <- function() onLetter(\"f\")\n\t\tonG <- function() onLetter(\"g\")\n\t\tonH <- function() onLetter(\"h\")\n\t\tonI <- function() onLetter(\"i\")\n\t\tonJ <- function() onLetter(\"j\")\n\t\tonK <- function() onLetter(\"k\")\n\t\tonL <- function() onLetter(\"l\")\n\t\tonM <- function() onLetter(\"m\")\n\t\tonN <- function() onLetter(\"n\")\n\t\tonO <- function() onLetter(\"o\")\n\t\tonP <- function() onLetter(\"p\")\n\t\tonQ <- function() onLetter(\"q\")\n\t\tonR <- function() onLetter(\"r\")\n\t\tonS <- function() onLetter(\"s\")\n\t\tonT <- function() onLetter(\"t\")\n\t\tonU <- function() onLetter(\"u\")\n\t\tonV <- function() onLetter(\"v\")\n\t\tonW <- function() onLetter(\"w\")\n\t\tonX <- function() onLetter(\"x\")\n\t\tonY <- function() onLetter(\"y\")\n\t\tonZ <- function() onLetter(\"z\")\n\t\tfor (letter in c(letters, LETTERS)){\n\t\t\ttkbind(datasetBox, paste(\"<\", letter, \">\", sep=\"\"),\n\t\t\t\t\tget(paste(\"on\", toupper(letter), sep=\"\")))\n\t\t}\n\t\tonClick <- function() tkfocus(datasetBox)\n\t\ttkbind(datasetBox, \"<ButtonPress-1>\", onClick)\n\t}\n\tonDatasetSelect <- function(){\n\t\ttclvalue(dsname) <- datasets[as.numeric(tkcurselection(datasetBox)) + 1]\n\t}\n\tfirstChar <- tolower(substr(packages, 1, 1))\n\tlen <- length(packages)\n\tonLetter <- function(letter){\n\t\tletter <- tolower(letter)\n\t\tcurrent <- 1 + round(as.numeric(unlist(strsplit(tclvalue(tkyview(packageBox) ), \" \"))[1])*len)\n\t\tmat <- match(letter, firstChar[-(1:current)])\n\t\tif (is.na(mat)) return()\n\t\ttkyview.scroll(packageBox, mat, \"units\")\n\t}\n\tonA <- function() onLetter(\"a\")\n\tonB <- function() onLetter(\"b\")\n\tonC <- function() onLetter(\"c\")\n\tonD <- function() onLetter(\"d\")\n\tonE <- function() onLetter(\"e\")\n\tonF <- function() onLetter(\"f\")\n\tonG <- function() onLetter(\"g\")\n\tonH <- function() onLetter(\"h\")\n\tonI <- function() onLetter(\"i\")\n\tonJ <- function() onLetter(\"j\")\n\tonK <- function() onLetter(\"k\")\n\tonL <- function() onLetter(\"l\")\n\tonM <- function() onLetter(\"m\")\n\tonN <- function() onLetter(\"n\")\n\tonO <- function() onLetter(\"o\")\n\tonP <- function() onLetter(\"p\")\n\tonQ <- function() onLetter(\"q\")\n\tonR <- function() onLetter(\"r\")\n\tonS <- function() onLetter(\"s\")\n\tonT <- function() onLetter(\"t\")\n\tonU <- function() onLetter(\"u\")\n\tonV <- function() onLetter(\"v\")\n\tonW <- function() onLetter(\"w\")\n\tonX <- function() onLetter(\"x\")\n\tonY <- function() onLetter(\"y\")\n\tonZ <- function() onLetter(\"z\")\n\tfor (letter in c(letters, LETTERS)){\n\t\ttkbind(packageBox, paste(\"<\", letter, \">\", sep=\"\"),\n\t\t\t\tget(paste(\"on\", toupper(letter), sep=\"\")))\n\t}\n\tonClick <- function() tkfocus(packageBox)\n\ttkbind(packageBox, \"<ButtonPress-1>\", onClick)\n\tonOK <- function(){\n\t\tdatasetName <- datasets[as.numeric(tkcurselection(datasetBox)) + 1]\n\t\tdsnameValue <- tclvalue(dsname)\n\t\tif (dsnameValue != \"\" && is.null(package)){\n\t\t\tcloseDialog()\n\t\t\tif (is.element(dsnameValue, listDataSets())) {\n\t\t\t\tif (\"no\" == tclvalue(checkReplace(dsnameValue, gettextRcmdr(\"Data set\")))){\n\t\t\t\t\tif (GrabFocus()) tkgrab.release(top)\n\t\t\t\t\ttkdestroy(top)\n\t\t\t\t\treadDataFromPackage()\n\t\t\t\t\treturn()\n\t\t\t\t}\n\t\t\t}\n\t\t\tsave.options <- options(warn=2)\n\t\t\tcheck <- try(eval(parse(text=logger(paste(\"data(\", dsnameValue, \")\", sep=\"\"))),\n\t\t\t\t\t\t\tenvir=.GlobalEnv), silent=TRUE)\n\t\t\toptions(save.options)\n\t\t\tif (class(check) == \"try-error\"){\n\t\t\t\terrorCondition(recall=readDataFromPackage,\n\t\t\t\t\t\tmessage=sprintf(gettextRcmdr(\"Data set %s does not exit\"), dsnameValue))\n\t\t\t\treturn()\n\t\t\t}\n\t\t\tactiveDataSet(dsnameValue)\n\t\t\ttkfocus(CommanderWindow())\n\t\t}\n\t\telse{\n\t\t\tif (is.null(package)) {\n\t\t\t\terrorCondition(recall=readDataFromPackage, message=gettextRcmdr(\"You must select a package.\"))\n\t\t\t\treturn()\n\t\t\t}\n\t\t\tif (length(datasetName) == 0) {\n\t\t\t\terrorCondition(recall=readDataFromPackage, message=gettextRcmdr(\"You must select a data set.\")    )\n\t\t\t\treturn()\n\t\t\t}\n\t\t\tif (is.element(datasetName, listDataSets())) {\n\t\t\t\tif (\"no\" == tclvalue(checkReplace(datasetName, gettextRcmdr(\"Data set\")))){\n\t\t\t\t\tif (GrabFocus()) tkgrab.release(top)\n\t\t\t\t\ttkdestroy(top)\n\t\t\t\t\treadDataFromPackage()\n\t\t\t\t\treturn()\n\t\t\t\t}\n\t\t\t}\n\t\t\tcloseDialog()\n\t\t\tcommand <- paste(\"data(\", datasetName, ', package=\"', package, '\")', sep=\"\")\n\t\t\tresult <- justDoIt(command)\n\t\t\tlogger(command)\n\t\t\tif (class(result)[1] !=  \"try-error\") activeDataSet(datasetName)\n\t\t\ttkfocus(CommanderWindow())\n\t\t}\n\t}\n\tonDataHelp <- function(){\n#\t\tdatasetName <- data(package=package)$results[as.numeric(tkcurselection(datasetBox)) + 1,3]\n    datasetName <- datasets[as.numeric(tkcurselection(datasetBox)) + 1]\n\t\tdsnameValue <- tclvalue(dsname)\n\t\tif (dsnameValue == \"\") dsnameValue <- datasetName\n\t\tif (length(dsnameValue) == 0) Message(gettextRcmdr(\"No data set selected.\"), type=\"warning\")\n\t\telse if (is.null(package)) doItAndPrint(paste('help(\"', dsnameValue, '\")', sep=\"\"))\n\t\telse doItAndPrint(paste('help(\"', dsnameValue, '\", package=\"', package, '\")', sep=\"\"))\n\t}\n\tOKCancelHelp(helpSubject=\"data\")\n\tdataHelpButton <- buttonRcmdr(top, text=gettextRcmdr(\"Help on selected data set\"), command=onDataHelp)\n\ttkgrid(labelRcmdr(packageDatasetFrame, text=gettextRcmdr(\"Package (Double-click to select)\"), fg=getRcmdr(\"title.color\"), font=\"RcmdrTitleFont\"),\n\t\t\tlabelRcmdr(packageDatasetFrame, text=\"   \"), labelRcmdr(packageDatasetFrame, text=gettextRcmdr(\"Data set (Double-click to select)\"),\n\t\t\t\t\tfg=getRcmdr(\"title.color\"), font=\"RcmdrTitleFont\"), sticky=\"w\")\n\ttkgrid(packageBox, packageScroll, sticky=\"nw\")\n\ttkgrid(datasetBox, datasetScroll, sticky=\"nw\")\n\ttkgrid(packageFrame, labelRcmdr(packageDatasetFrame, text=\"   \"), datasetFrame, sticky=\"nw\")\n\ttkgrid(packageDatasetFrame, sticky=\"w\")\n\ttkgrid(labelRcmdr(top, text=gettextRcmdr(\"OR\"), fg=\"red\"), sticky=\"w\")\n\ttkgrid(labelRcmdr(enterFrame, text=gettextRcmdr(\"Enter name of data set:  \"), fg=getRcmdr(\"title.color\"), font=\"RcmdrTitleFont\"), entryDsname, sticky=\"w\")\n\ttkgrid(enterFrame, sticky=\"w\")\n\ttkgrid(dataHelpButton, sticky=\"w\")\n\ttkgrid(buttonsFrame, sticky=\"ew\")\n\ttkgrid.configure(packageScroll, sticky=\"ns\")\n\ttkgrid.configure(datasetScroll, sticky=\"ns\")\n\ttkbind(packageBox, \"<Double-ButtonPress-1>\", onPackageSelect)\n\ttkbind(datasetBox, \"<Double-ButtonPress-1>\", onDatasetSelect)\n\tdialogSuffix(focus=entryDsname)\n}\n\nimportSAS <- function() {\n    # the following local function is adapted from ?chartr\n    capwords <- function(s) {\n        cap <- function(s) paste(toupper(substring(s,1,1)), {s <- substring(s, 2); tolower(s)}, sep = \"\", collapse = \" \" )\n        sapply(strsplit(s, split = \" \"), cap)\n    }\n    Library(\"foreign\")\n    file <- tclvalue(tkgetOpenFile(\n        filetypes=gettextRcmdr('{\"All Files\" {\"*\"}} {\"SAS xport files\" {\".xpt\" \".XPT\" \".xport\" \".XPORT\"}}')))\n    if (file == \"\") {\n        tkfocus(CommanderWindow())\n        return()\n    }\n    command <- paste('read.xport(\"', file,'\")', sep=\"\")\n    logger(paste(\".Datasets <- \", command, sep=\"\"))\n    result <- justDoIt(command)\n    if (class(result)[1] !=  \"try-error\"){\n        gassign(\".Datasets\", result)\n        if (is.data.frame(.Datasets)){\n            getdsname <- function(){\n                initializeDialog(title=gettextRcmdr(\"Data Set Name\"))\n                dsname <- tclVar(\"Dataset\")\n                entryDsname <- ttkentry(top, width=\"20\", textvariable=dsname)\n                onOK <- function(){\n                    closeDialog()\n                    setBusyCursor()\n                    on.exit(setIdleCursor())\n                    dsnameValue <- trim.blanks(tclvalue(dsname))\n                    if (dsnameValue == \"\"){\n                        errorCondition(recall=getdsname,\n                                       message=gettextRcmdr(\"You must enter the name of a data set.\"))\n                        return()\n                    }\n                    if (!is.valid.name(dsnameValue)){\n                        errorCondition(recall=getdsname,\n                                       message=paste('\"', dsnameValue, '\" ', gettextRcmdr(\"is not a valid name.\"), sep=\"\"))\n                        return()\n                    }\n                    if (is.element(dsnameValue, listDataSets())) {\n                        if (\"no\" == tclvalue(checkReplace(dsnameValue, gettextRcmdr(\"Data set\")))){\n                            getdsname()\n                            return()\n                        }\n                    }\n                    doItAndPrint(paste(dsnameValue, \" <- .Datasets\", sep=\"\"))\n                    logger(\"remove(.Datasets)\")\n                    remove(\".Datasets\", envir=.GlobalEnv)\n                    activeDataSet(dsnameValue)\n                }\n                OKCancelHelp()\n                tkgrid(labelRcmdr(top, text=gettextRcmdr(\"Enter name for data set:\")), entryDsname, sticky=\"w\")\n                tkgrid(buttonsFrame, columnspan=\"2\", sticky=\"w\")\n                tkgrid.configure(entryDsname, sticky=\"w\")\n                dialogSuffix(focus=entryDsname)\n            }\n            getdsname()\n        }\n        else {\n            fmt <- grep(\"^FORMAT\", names(.Datasets))\n            if (length(fmt) >= 1) gassign(\".Datasets\", .Datasets[-fmt])\n            if (length(.Datasets) == 1){\n                dsname <- capwords(names(.Datasets))\n                if (is.element(dsname, listDataSets())) {\n                    if (\"no\" == tclvalue(checkReplace(dsname, gettextRcmdr(\"Data set\")))){\n                        importSAS()\n                        return()\n                    }\n                }\n                doItAndPrint(paste(dsname, \" <- .Datasets[[1]]\", sep=\"\"))\n                doItAndPrint(paste(\"colnames(\", dsname, \") <- \", \"tolower(colnames(\", \n                                   dsname, \"))\", sep=\"\"))\n                logger(\"remove(.Datasets)\")\n                remove(\".Datasets\", envir=.GlobalEnv)\n                activeDataSet(dsname)\n            }\n            else {\n                dsnames <- capwords(names(.Datasets))\n                datasets <- listDataSets()\n                initializeDialog(title=gettextRcmdr(\"Select Dataset\"))\n                datasetsBox <- variableListBox(top, dsnames, \n                                               title=gettextRcmdr(\"Datasets in file (pick one)\"),\n                                               initialSelection=0)\n                onOK <- function() {\n                    dsname <- getSelection(datasetsBox)\n                    for (ds in 1:length(dsnames)){\n                        if (is.element(dsnames[ds], datasets)) {\n                            if (\"no\" == tclvalue(checkReplace(dsnames[ds], gettextRcmdr(\"Data set\")))){\n                                next()\n                            }\n                        }\n                        doItAndPrint(paste(dsnames[ds], \" <- .Datasets[[\", ds, \"]]\", sep=\"\"))\n                        doItAndPrint(paste(\"colnames(\", dsnames[ds], \") <- \", \"tolower(colnames(\", \n                                           dsnames[ds], \"))\", sep=\"\"))\n                    }\n                    logger(\"remove(.Datasets)\")\n                    remove(\".Datasets\", envir=.GlobalEnv)\n                    activeDataSet(dsname)\n                    closeDialog()\n                    tkfocus(CommanderWindow())\n                }\n                OKCancelHelp(helpSubject=\"read.xport\")\n                tkgrid(getFrame(datasetsBox), sticky=\"w\")\n                tkgrid(buttonsFrame, sticky=\"w\")\n                dialogSuffix()\n            }\n        }\n    }\n    tkfocus(CommanderWindow())\n}\n\nimportSPSS <- function() {\n    Library(\"foreign\")\n    initializeDialog(title=gettextRcmdr(\"Import SPSS Data Set\"))\n    dsnameFrame <- tkframe(top)\n    dsname <- tclVar(\"Dataset\")\n    entryDsname <- ttkentry(dsnameFrame, width=\"20\", textvariable=dsname)\n    asFactorFrame <- tkframe(top)\n    asFactor <- tclVar(\"1\")\n    asFactorCheckBox <- ttkcheckbutton(asFactorFrame, variable=asFactor)\n    toLowerFrame <- tkframe(top)\n    toLower <- tclVar(\"1\")\n    toLowerCheckBox <- ttkcheckbutton(toLowerFrame, variable=toLower)\n    maxLevelsFrame <- tkframe(top)\n    maxLevels <- tclVar(\"Inf\")\n    entryMaxLevels <- ttkentry(maxLevelsFrame, width=\"5\", textvariable=maxLevels)\n    onOK <- function(){\n        closeDialog()\n        setBusyCursor()\n        on.exit(setIdleCursor())\n        dsnameValue <- trim.blanks(tclvalue(dsname))\n        if (dsnameValue == \"\"){\n            errorCondition(recall=importSPSS,\n                           message=gettextRcmdr(\"You must enter the name of a data set.\"))\n            return()\n        }\n        if (!is.valid.name(dsnameValue)){\n            errorCondition(recall=importSPSS,\n                           message=paste('\"', dsnameValue, '\" ', gettextRcmdr(\"is not a valid name.\"), sep=\"\"))\n            return()\n        }\n        if (is.element(dsnameValue, listDataSets())) {\n            if (\"no\" == tclvalue(checkReplace(dsnameValue, gettextRcmdr(\"Data set\")))){\n                importSPSS()\n                return()\n            }\n        }\n        file <- tclvalue(tkgetOpenFile(\n            filetypes=gettextRcmdr('{\"All Files\" {\"*\"}} {\"SPSS portable files\" {\".por\" \".POR\"}} {\"SPSS save files\" {\".sav\" \".SAV\"}}')))\n        if (file == \"\") {\n            tkfocus(CommanderWindow())\n            return()\n        }\n        factor <- tclvalue(asFactor) == \"1\"\n        levels <- as.numeric(tclvalue(maxLevels))\n        command <- paste('read.spss(\"', file,'\", use.value.labels=', factor,\n                         \", max.value.labels=\", levels, \", to.data.frame=TRUE)\", sep=\"\")\n        logger(paste(dsnameValue, \" <- \", command, sep=\"\"))\n        result <- justDoIt(command)\n        if (class(result)[1] !=  \"try-error\"){\n            gassign(dsnameValue, result)\n            if (tclvalue(toLower) == \"1\") \n                doItAndPrint(paste(\"colnames(\", dsnameValue, \") <- tolower(colnames(\",\n                                   dsnameValue, \"))\", sep=\"\"))\n            activeDataSet(dsnameValue)\n        }\n        tkfocus(CommanderWindow())\n    }\n    OKCancelHelp(helpSubject=\"read.spss\")\n    tkgrid(labelRcmdr(dsnameFrame, text=gettextRcmdr(\"Enter name for data set:  \")), entryDsname, sticky=\"w\")\n    tkgrid(dsnameFrame, sticky=\"w\")\n    tkgrid(asFactorCheckBox, labelRcmdr(asFactorFrame, text=gettextRcmdr(\"Convert value labels\\nto factor levels\"), justify=\"left\"),\n           sticky=\"nw\")\n    tkgrid(asFactorFrame, sticky=\"w\")\n    tkgrid(toLowerCheckBox, labelRcmdr(toLowerFrame, text=gettextRcmdr(\"Convert variable names\\nto lower case\"), justify=\"left\"),\n           sticky=\"nw\")\n    tkgrid(toLowerFrame, sticky=\"w\")\n    tkgrid(labelRcmdr(maxLevelsFrame, text=gettextRcmdr(\"Maximum number\\nof value labels\\nfor factor conversion\"), justify=\"left\"),\n           entryMaxLevels, sticky=\"nw\")\n    tkgrid(maxLevelsFrame, sticky=\"w\")\n    tkgrid(buttonsFrame, sticky=\"ew\")\n    dialogSuffix(focus=entryDsname)\n}\n\nimportMinitab <- function() {\n\tLibrary(\"foreign\")\n\tinitializeDialog(title=gettextRcmdr(\"Import Minitab Data Set\"))\n\tdsname <- tclVar(\"Dataset\")\n\tentryDsname <- ttkentry(top, width=\"20\", textvariable=dsname)\n\tonOK <- function(){\n\t\tcloseDialog()\n\t\tsetBusyCursor()\n\t\ton.exit(setIdleCursor())\n\t\tdsnameValue <- trim.blanks(tclvalue(dsname))\n\t\tif (dsnameValue == \"\"){\n\t\t\terrorCondition(recall=importMinitab,\n\t\t\t\t\tmessage=gettextRcmdr(\"You must enter the name of a data set.\"))\n\t\t\treturn()\n\t\t}\n\t\tif (!is.valid.name(dsnameValue)){\n\t\t\terrorCondition(recall=importMinitab,\n\t\t\t\t\tmessage=paste('\"', dsnameValue, '\" ', gettextRcmdr(\"is not a valid name.\"), sep=\"\"))\n\t\t\treturn()\n\t\t}\n\t\tif (is.element(dsnameValue, listDataSets())) {\n\t\t\tif (\"no\" == tclvalue(checkReplace(dsnameValue, gettextRcmdr(\"Data set\")))){\n\t\t\t\timportMinitab()\n\t\t\t\treturn()\n\t\t\t}\n\t\t}\n\t\tfile <- tclvalue(tkgetOpenFile(\n\t\t\t\t\t\tfiletypes=gettextRcmdr('{\"All Files\" {\"*\"}} {\"Minitab portable files\" {\".mtp\" \".MTP\"}}')))\n\t\tif (file == \"\") {\n\t\t\ttkfocus(CommanderWindow())\n\t\t\treturn()\n\t\t}\n\t\tcommand <- paste('read.mtp(\"', file,'\")', sep=\"\")\n\t\tdatalist <- justDoIt(command)\n\t\tlengths <- sapply(datalist, length)\n\t\tdatalist <- datalist[lengths != 0]\n\t\tlengths <- lengths[lengths != 0]\n\t\tif (!all(lengths == length(datalist[[1]]))){\n\t\t\tMessage(message=\n\t\t\t\t\t\t\tpaste(gettextRcmdr(\"Minitab data set contains elements of unequal length.\\nData set cannot be converted.\")),\n\t\t\t\t\ttype=\"error\")\n\t\t\ttkdestroy(top)\n\t\t\ttkfocus(CommanderWindow())\n\t\t\treturn()\n\t\t}\n\t\tdoItAndPrint(paste(dsnameValue, \" <- as.data.frame(\", command, \")\", sep=\"\"))\n\t\tactiveDataSet(dsnameValue)\n\t\ttkfocus(CommanderWindow())\n\t}\n\tOKCancelHelp(helpSubject=\"read.mtp\")\n\ttkgrid(labelRcmdr(top, text=gettextRcmdr(\"Enter name for data set:\")), entryDsname, sticky=\"e\")\n\ttkgrid(buttonsFrame, columnspan=\"2\", sticky=\"w\")\n\ttkgrid.configure(entryDsname, sticky=\"w\")\n\tdialogSuffix(focus=entryDsname)\n}\n\n# the following function was contributed by Michael Ash (modified by J. Fox)\n\nimportSTATA <- function() {\n    Library(\"foreign\")\n    initializeDialog(title=gettextRcmdr(\"Import STATA Data Set\"))\n    dsname <- tclVar(\"Dataset\")\n    dsnameFrame <- tkframe(top)\n    entryDsname <- ttkentry(dsnameFrame, width=\"20\", textvariable=dsname)\n    optionsFrame <- tkframe(top)\n    asFactor <- tclVar(\"1\")\n    asFactorCheckBox <- ttkcheckbutton(optionsFrame, variable=asFactor)\n    asDate <- tclVar(\"1\")\n    asDateCheckBox <- ttkcheckbutton(optionsFrame, variable=asDate)\n    asMissingType <- tclVar(\"1\")\n    asMissingTypeCheckBox <- ttkcheckbutton(optionsFrame, variable=asMissingType)\n    asConvertUnderscore <- tclVar(\"1\")\n    asConvertUnderscoreCheckBox <- ttkcheckbutton(optionsFrame, variable=asConvertUnderscore)\n    asWarnMissingLabels <- tclVar(\"1\")\n    asWarnMissingLabelsCheckBox <- ttkcheckbutton(optionsFrame, variable=asWarnMissingLabels)\n    onOK <- function(){\n        closeDialog()\n        setBusyCursor()\n        on.exit(setIdleCursor())\n        dsnameValue <- trim.blanks(tclvalue(dsname))\n        if (dsnameValue == \"\"){\n            errorCondition(recall=importSTATA,\n                           message=gettextRcmdr(\"You must enter the name of a data set.\"))\n            return()\n        }\n        if (!is.valid.name(dsnameValue)){\n            errorCondition(recall=importSTATA,\n                           message=paste('\"', dsnameValue, '\" ', gettextRcmdr(\"is not a valid name.\"), sep=\"\"))\n            return()\n        }\n        if (is.element(dsnameValue, listDataSets())) {\n            if (\"no\" == tclvalue(checkReplace(dsnameValue, gettextRcmdr(\"Data set\")))){\n                importSTATA()\n                return()\n            }\n        }\n        file <- tclvalue(tkgetOpenFile(\n            filetypes=gettextRcmdr('{\"All Files\" {\"*\"}} {\"STATA datasets\" {\".dta\" \".DTA\"}}')))\n        if (file == \"\") {\n            tkfocus(CommanderWindow())\n            return()\n        }\n        convert.date <- tclvalue(asDate) == \"1\"\n        factor <- tclvalue(asFactor) == \"1\"\n        missingtype <- tclvalue(asMissingType) == \"1\"\n        convertunderscore <- tclvalue(asConvertUnderscore) == \"1\"\n        warnmissinglabels <- tclvalue(asWarnMissingLabels) == \"1\"\n        command <- paste('read.dta(\"', file,'\", convert.dates=', convert.date,\n                         \", convert.factors=\", factor, \", missing.type=\", missingtype,\n                         \", convert.underscore=\", convertunderscore, \", warn.missing.labels=TRUE)\", sep=\"\")\n        logger(paste(dsnameValue, \" <- \", command, sep=\"\"))\n        result <- justDoIt(command)\n        if (class(result)[1] !=  \"try-error\"){\n            gassign(dsnameValue, result)\n            activeDataSet(dsnameValue)\n        }\n        tkfocus(CommanderWindow())\n    }\n    OKCancelHelp(helpSubject=\"read.dta\")\n    tkgrid(labelRcmdr(dsnameFrame, text=gettextRcmdr(\"Enter name for data set:  \")), entryDsname, sticky=\"w\")\n    tkgrid(dsnameFrame, columnspan=2, sticky=\"w\")\n    tkgrid(asFactorCheckBox, labelRcmdr(optionsFrame, text=gettextRcmdr(\"Convert value labels\\nto factor levels\"), justify=\"left\"),\n           sticky=\"nw\")\n    tkgrid(asDateCheckBox, labelRcmdr(optionsFrame, text=gettextRcmdr(\"Convert dates to R format\"), justify=\"left\"),\n           sticky=\"w\")\n    tkgrid(asMissingTypeCheckBox, labelRcmdr(optionsFrame, text=gettextRcmdr(\"Multiple missing types (>=Stata 8)\"), justify=\"left\"),\n           sticky=\"w\")\n    tkgrid(asConvertUnderscoreCheckBox, labelRcmdr(optionsFrame, text=gettextRcmdr(\"Convert underscore to period\"), justify=\"left\"),\n           sticky=\"w\")\n    tkgrid(asWarnMissingLabelsCheckBox, labelRcmdr(optionsFrame, text=gettextRcmdr(\"Warn on missing labels\"), justify=\"left\"),\n           sticky=\"w\")\n    tkgrid(optionsFrame, sticky=\"w\")\n    tkgrid(buttonsFrame, columnspan=\"2\", sticky=\"ew\")\n    dialogSuffix(focus=entryDsname)\n}\n\n# The following function was contributed by Matthieu Lesnoff\n#  (added with small changes by J. Fox)\n\n# importRODBCtable <- function(){\n# \tLibrary(\"RODBC\")\n# \t# close all databases in case of error\n# \ton.exit(odbcCloseAll())\n# # Enter the name of data set, by default : Dataset\n# \tinitializeDialog(title = gettextRcmdr(\"Import from Excel, Access or dBase data set\"))\n# \tdsname <- tclVar(gettextRcmdr(\"Dataset\"))\n# \tentryDsname <- ttkentry(top, width = \"35\", textvariable = dsname)\n# \tonOK <- function(){\n# \t\tcloseDialog()\n# \t\tsetBusyCursor()\n# \t\ton.exit(setIdleCursor())\n# \t\tdsnameValue <- trim.blanks(tclvalue(dsname))\n# \t\tif(dsnameValue == \"\"){\n# \t\t\terrorCondition(recall = importRODBCtable,\n# \t\t\t\t\tmessage = gettextRcmdr(\"You must enter the name of a data set.\"))\n# \t\t\treturn()\n# \t\t}\n# \t\tif(!is.valid.name(dsnameValue)){\n# \t\t\terrorCondition(recall = queryimportRODBCtable,\n# \t\t\t\t\tmessage = paste('\"', dsnameValue, '\" ',\n# \t\t\t\t\t\t\tgettextRcmdr(\"is not a valid name.\"), sep = \"\"))\n# \t\t\treturn()\n# \t\t}\n# \t\tif(is.element(dsnameValue, listDataSets())){\n# \t\t\tif(\"no\" == tclvalue(checkReplace(dsnameValue, gettextRcmdr(\"Data set\")))){\n# \t\t\t\timportRODBCtable()\n# \t\t\t\treturn()\n# \t\t\t}\n# \t\t}\n# \t\tFile <- tclvalue(tkgetOpenFile(filetypes = gettextRcmdr(\n# \t\t\t\t\t\t\t\t'{\"All Files\" {\"*\"}} {\"MS Access database\" {\".mdb\" \".MDB\"}} {\"MS Access 2007 database\" {\".accdb\" \".ACCDB\"}} {\"dBase-like file\" {\".dbf\" \".DBF\"}} {\"MS Excel 2007 file\" {\".xlsx\" \".XLSX\"}} {\"MS Excel file\" {\".xls\" \".XLS\"}}'\n# \t\t\t\t\t\t), parent=CommanderWindow()))\n# \t\tif(File == \"\"){\n# \t\t\ttkfocus(CommanderWindow())\n# \t\t\treturn()\n# \t\t}\n# \t\tsop <- match(\".\", rev(strsplit(File, NULL)[[1]]))[1]\n# \t\text <- tolower(substring(File, nchar(File) - sop + 2, nchar(File)))\n# \t\tchannel <- switch(EXPR = ext,\n# \t\t\t\txls = odbcConnectExcel(File),\n# \t\t\t\txlsx = odbcConnectExcel2007(File),\n# \t\t\t\tmdb = odbcConnectAccess(File),\n# \t\t\t\taccdb = odbcConnectAccess2007(File),\n# \t\t\t\tdbf = odbcConnectDbase(File))\n# \t\t# For Excel and Access cases, need to select a particular sheet or table\n# \t\tif(ext != \"dbf\"){\n# \t\t\ttabdat <- sqlTables(channel)\n# \t\t\tnames(tabdat) <- tolower(names(tabdat))\n# \t\t\tif(ext == \"mdb\" || ext == \"accdb\")\n# \t\t\t\ttabdat <- tabdat[tabdat$table_type == \"TABLE\", 3]\n# \t\t\tif(ext == \"xls\" || ext == \"xlsx\"){\n# \t\t\t\ttabname <- tabdat$table_name\n# \t\t\t\ttabdat <- ifelse(tabdat$table_type ==\"TABLE\",\n# \t\t\t\t\t\tsubstring(tabname, 2, nchar(tabname) - 2),\n# \t\t\t\t\t\tsubstring(tabname, 1, nchar(tabname) - 1))\n# \t\t\t}\n# \t\t\t# if there are several tables\n# \t\t\tif(length(tabdat)>1)\n# \t\t\t\tfil <- tk_select.list(sort(tabdat),\n# \t\t\t\t\t\ttitle = gettextRcmdr(\"Select one table\"))\n# \t\t\telse\n# \t\t\t\tfil <- tabdat\n# \t\t\tif(fil == \"\"){\n# \t\t\t\terrorCondition(message=gettextRcmdr(\"No table selected\"))\n# \t\t\t\treturn()\n# \t\t\t}\n# \t\t\tif(ext == \"xls\" || ext == \"xlsx\")\n# \t\t\t\tfil <- paste(\"[\", fil, \"$]\", sep = \"\")\n# \t\t}\n# \t\t# dBase file\n# \t\telse{\n# \t\t\tsop <- match(\".\", rev(strsplit(File, NULL)[[1]]))[1]\n# \t\t\troot <- tolower(substring(File, 1, nchar(File) - sop))\n# \t\t\trevstr <- rev(strsplit(root, NULL)[[1]])\n# \t\t\tsop <- if(is.na(match(c(\"/\", \"\\\\\"), revstr)[1]))\n# \t\t\t\t\t\tlength(revstr) else match(c(\"/\", \"\\\\\"), revstr)[1] - 1\n# \t\t\ttoor <- revstr[seq(sop)]\n# \t\t\tfil <- paste(rev(toor), collapse = \"\")\n# \t\t}\n# \t\t# Retrieve the data\n# \t\tdat <- sqlQuery(channel = channel, query = paste(\"select * from\", fil))\n# \t\tnames(dat)<- trim.blanks(names(dat))\n# \t\tdat <- trim.col.na(dat)\n# \t\todbcCloseAll()\n# \t\tgassign(dsnameValue, as.data.frame(dat))\n# \t\tcommand <- paste(\"sqlQuery(channel = \",channel,\", select * from \", fil,\")\",\n# \t\t\t\tsep = \"\")\n# \t\tlogger(paste(dsnameValue, \" <- \", command, sep = \"\"))\n# \t\tactiveDataSet(dsnameValue)\n# \t\ttkfocus(CommanderWindow())\n# \t}  ## End of function onOK\n# \tOKCancelHelp(helpSubject=\"odbcConnect\")\n# \ttkgrid(labelRcmdr(top, text=gettextRcmdr(\"Enter name of data set:  \")),\n# \t\t\tentryDsname, sticky=\"e\")\n# \ttkgrid(buttonsFrame, columnspan=\"2\", sticky=\"w\")\n# \ttkgrid.configure(entryDsname, sticky=\"w\")\n# \tdialogSuffix(focus=entryDsname)\n# }\n\n# importExcel <- function(){\n#   Library(\"XLConnect\")\n#   initializeDialog(title = gettextRcmdr(\"Import Excel Data Set\"))\n#   dsname <- tclVar(gettextRcmdr(\"Dataset\"))\n#   dsnameFrame <- tkframe(top)\n#   entryDsname <- ttkentry(dsnameFrame, width = \"35\", textvariable = dsname)\n#   checkBoxFrame <- tkframe(top)\n#   variableNames <- tclVar(\"1\")\n#   variableNamesCheckBox <- ttkcheckbutton(checkBoxFrame, variable=variableNames)\n#   rowNames <- tclVar(\"0\")\n#   rowNamesCheckBox <- ttkcheckbutton(checkBoxFrame, variable=rowNames)\n#   onOK <- function(){\n#     closeDialog()\n#     setBusyCursor()\n#     on.exit(setIdleCursor())\n#     dsnameValue <- trim.blanks(tclvalue(dsname))\n#     variableNamesValue <- tclvalue(variableNames)\n#     rowNamesValue <- tclvalue(rowNames)\n#     if(dsnameValue == \"\"){\n#       errorCondition(recall = importExcel,\n#                      message = gettextRcmdr(\"You must enter the name of a data set.\"))\n#       return()\n#     }\n#     if(!is.valid.name(dsnameValue)){\n#       errorCondition(recall = importExcel,\n#                      message = paste('\"', dsnameValue, '\" ',\n#                                      gettextRcmdr(\"is not a valid name.\"), sep = \"\"))\n#       return()\n#     }\n#     if(is.element(dsnameValue, listDataSets())){\n#       if(\"no\" == tclvalue(checkReplace(dsnameValue, gettextRcmdr(\"Data set\")))){\n#         importExcel()\n#         return()\n#       }\n#     }\n#     File <- tclvalue(tkgetOpenFile(filetypes = gettextRcmdr(\n#       '{\"All Files\" {\"*\"}} {\"MS Excel 2007 file\" {\".xlsx\" \".XLSX\"}} {\"MS Excel file\" {\".xls\" \".XLS\"}}'\n#     ), parent=CommanderWindow()))\n#     if(File == \"\"){\n#       tkfocus(CommanderWindow())\n#       return()\n#     }\n#     command <- paste('loadWorkbook(\"', File, '\")', sep=\"\")\n#     doItAndPrint(paste(\".Workbook <- \", command, sep=\"\"))\n#     worksheets <- getSheets(.Workbook)\n#     if(length(worksheets)>1)\n#       worksheet <- tk_select.list(worksheets,\n#                                   title = gettextRcmdr(\"Select one table\"))\n#     else\n#       worksheet <- worksheets\n#     if(worksheet == \"\"){\n#       errorCondition(message=gettextRcmdr(\"No table selected\"))\n#       return()\n#     }\n#     command <- paste('readWorksheet(.Workbook, \"', worksheet,\n#                      '\", header=', if (variableNamesValue == \"1\") 'TRUE' else 'FALSE',\n#                      ', rownames=', if(rowNamesValue == \"1\") '1' else 'NULL',\n#                      ')', sep=\"\")\n#     logger(paste(dsnameValue, \" <- \", command, sep=\"\"))\n#     result <- justDoIt(command)\n#     if (class(result)[1] !=  \"try-error\"){\n#       gassign(dsnameValue, result)\n#     }\n#     logger(\"remove(.Workbook)\")\n#     justDoIt(\"remove(.Workbook, envir=.GlobalEnv)\")\n#     if (class(result)[1] !=  \"try-error\"){\n#       factors <- sapply(get(dsnameValue, envir=.GlobalEnv), is.character)\n#       if (any(factors)){\n#         factors <- which(factors)\n#         command <- paste(dsnameValue, \"[, c(\", paste(factors, collapse=\", \"), \n#                          \")] <- lapply(\", dsnameValue, \"[, c(\", \n#                          paste(factors, collapse=\", \"), \"), drop=FALSE], as.factor)\",\n#                          sep=\"\")\n#         doItAndPrint(command)\n#       }\n#       activeDataSet(dsnameValue)\n#     }\n#   }\n#   OKCancelHelp(helpSubject=\"readWorksheet\")\n#   tkgrid(labelRcmdr(dsnameFrame, text=gettextRcmdr(\"Enter name of data set: \")),\n#          entryDsname, sticky=\"w\")\n#   tkgrid(dsnameFrame, sticky=\"w\")\n#   tkgrid(variableNamesCheckBox, labelRcmdr(checkBoxFrame, text=gettextRcmdr(\"Variable names in first row of spreadsheet\")),\n#          sticky=\"w\")\n#   tkgrid(rowNamesCheckBox, labelRcmdr(checkBoxFrame, text=gettextRcmdr(\"Row names in first column of spreadsheet\")),\n#          sticky=\"w\")\n#   tkgrid(checkBoxFrame, sticky=\"w\")\n#   tkgrid(buttonsFrame, sticky=\"w\")\n#   dialogSuffix(focus=entryDsname)\n# }\n\nimportExcel <- function(){\n    initializeDialog(title = gettextRcmdr(\"Import Excel Data Set\"))\n    dsname <- tclVar(\"Dataset\")\n    dsnameFrame <- tkframe(top)\n    entryDsname <- ttkentry(dsnameFrame, width = \"35\", textvariable = dsname)\n    checkBoxFrame <- tkframe(top)\n    variableNames <- tclVar(\"1\")\n    variableNamesCheckBox <- ttkcheckbutton(checkBoxFrame, variable=variableNames)\n    rowNames <- tclVar(\"0\")\n    rowNamesCheckBox <- ttkcheckbutton(checkBoxFrame, variable=rowNames)\n    stringsAsFactors <- tclVar(\"1\")\n    stringsAsFactorsCheckBox <- ttkcheckbutton(checkBoxFrame, variable=stringsAsFactors)\n    missingFrame <- tkframe(top)\n    missingVariable <- tclVar(gettextRcmdr(\"<empty cell>\"))\n    missingEntry <- ttkentry(missingFrame, width=\"15\", textvariable=missingVariable)\n    onOK <- function(){\n        closeDialog()\n        setBusyCursor()\n        on.exit(setIdleCursor())\n        dsnameValue <- trim.blanks(tclvalue(dsname))\n        variableNamesValue <- tclvalue(variableNames)\n        rowNamesValue <- tclvalue(rowNames)\n        stringsAsFactorsValue <- tclvalue(stringsAsFactors)\n        missingValues <- as.character(tclvalue(missingVariable))\n        if (missingValues == gettextRcmdr(\"<empty cell>\")) missingValues <- \"\"\n        if(dsnameValue == \"\"){\n            errorCondition(recall = importExcel,\n                message = gettextRcmdr(\"You must enter the name of a data set.\"))\n            return()\n        }\n        if(!is.valid.name(dsnameValue)){\n            errorCondition(recall = importExcel,\n                message = paste('\"', dsnameValue, '\" ',\n                    gettextRcmdr(\"is not a valid name.\"), sep = \"\"))\n            return()\n        }\n        if(is.element(dsnameValue, listDataSets())){\n            if(\"no\" == tclvalue(checkReplace(dsnameValue, gettextRcmdr(\"Data set\")))){\n                importExcel()\n                return()\n            }\n        }\n        File <- tclvalue(tkgetOpenFile(filetypes = gettextRcmdr(\n            '{\"All Files\" {\"*\"}} {\"MS Excel file\" {\".xlsx\" \".XLSX\" \".xls\" \".XLS\"}}'\n        ), parent=CommanderWindow()))\n        if(File == \"\"){\n            tkfocus(CommanderWindow())\n            return()\n        }\n        worksheets <- excel_sheets(File)\n        if(length(worksheets) > 1)\n            worksheet <- tk_select.list(worksheets,\n                title = gettextRcmdr(\"Select one table\"))\n        else\n            worksheet <- worksheets\n        if(worksheet == \"\"){\n            errorCondition(message=gettextRcmdr(\"No table selected\"))\n            return()\n        }\n        command <- paste('readXL(\"', File, '\", rownames=', if (rowNamesValue == \"1\") \"TRUE\" else \"FALSE\",\n            \", header=\", if (variableNamesValue == \"1\") \"TRUE\" else \"FALSE\",\n            ', na=\"', missingValues, '\", sheet=\"', worksheet,\n            '\", stringsAsFactors=', if(stringsAsFactorsValue == \"1\") \"TRUE\" else \"FALSE\",\n            ')', sep=\"\")\n        logger(paste(dsnameValue, \" <- \", command, sep=\"\"))\n        result <- justDoIt(command)\n        if (class(result)[1] !=  \"try-error\"){\n            gassign(dsnameValue, result)\n            activeDataSet(dsnameValue)\n        }\n    }\n    OKCancelHelp(helpSubject=\"readXL\")\n    tkgrid(labelRcmdr(dsnameFrame, text=gettextRcmdr(\"Enter name of data set: \")),\n        entryDsname, sticky=\"w\")\n    tkgrid(dsnameFrame, sticky=\"w\")\n    tkgrid(variableNamesCheckBox, labelRcmdr(checkBoxFrame, text=gettextRcmdr(\"Variable names in first row of spreadsheet\")),\n        sticky=\"w\")\n    tkgrid(rowNamesCheckBox, labelRcmdr(checkBoxFrame, text=gettextRcmdr(\"Row names in first column of spreadsheet\")),\n        sticky=\"w\")\n    tkgrid(stringsAsFactorsCheckBox, labelRcmdr(checkBoxFrame, text=gettextRcmdr(\"Convert character data to factors\")),\n        sticky=\"w\")\n    tkgrid(labelRcmdr(missingFrame, text=gettextRcmdr(\"Missing data indicator:\")), missingEntry, sticky=\"w\")\n    tkgrid(checkBoxFrame, sticky=\"w\")\n    tkgrid(missingFrame, sticky=\"w\")\n    tkgrid(buttonsFrame, sticky=\"w\")\n    dialogSuffix(focus=entryDsname)\n}\n\n\nnumericToFactor <- function(){\n  initializeDialog(title=gettextRcmdr(\"Convert Numeric Variables to Factors\"))\n  dataFrame <- tkframe(top)\n  variableBox <- variableListBox(dataFrame, Numeric(), selectmode=\"multiple\",\n                                 title=gettextRcmdr(\"Variables (pick one or more)\"))\n  radioButtons(dataFrame, name=\"levels\", buttons=c(\"names\", \"numbers\"),\n               labels=gettextRcmdr(c(\"Supply level names\", \"Use numbers\")), title=gettextRcmdr(\"Factor Levels\"))\n  factorNameFrame <- tkframe(top)\n  factorName <- tclVar(gettextRcmdr(\"<same as variables>\"))\n  factorNameField <- ttkentry(factorNameFrame, width=\"20\", textvariable=factorName)\n  onOK <- function(){\n    variables <- getSelection(variableBox)\n    closeDialog()\n    facname <- trim.blanks(tclvalue(factorName))\n    .activeDataSet <- ActiveDataSet()\n    cmd <- paste(\"apply(\", .activeDataSet, \"[c(\", paste(\n      paste('\"', variables, '\"', sep=\"\"),\n      collapse=\",\"), \")], 2, function(x) sort(unique(x)))\", sep=\"\")\n    levs <- eval(parse(text=cmd), envir=.GlobalEnv)\n    sameLevels <- (length(variables) == 1) ||\n      ((is.matrix(levs)) && (all(0 == apply(levs, 1, var))))\n    if (length(variables) == 0) {\n      errorCondition(recall=numericToFactor, message=gettextRcmdr(\"You must select a variable.\"))}\n    else command <- paste(.activeDataSet, \" <- within(\", .activeDataSet, \", {\", sep=\"\")\n    for (name in variables){\n      fname <- if (facname == gettextRcmdr(\"<same as variables>\")) name\n      else if (length(variables) == 1) facname\n      else paste(facname, name, sep=\"\")\n      if (!is.valid.name(fname)){\n        errorCondition(recall=numericToFactor,\n                       message=paste('\"', fname, '\" ', gettextRcmdr(\"is not a valid name.\"), sep=\"\"))\n        return()\n      }\n      if (is.element(fname, Variables())) {\n        if (\"no\" == tclvalue(checkReplace(fname))){\n          numericToFactor()\n          return()\n        }\n      }\n      levelsType <- tclvalue(levelsVariable)\n      env <- environment()\n      if (((name == variables[1]) || (!sameLevels)) && (levelsType == \"names\")){\n        values <- sort(unique(eval(parse(text=paste(.activeDataSet, \"$\", name, sep=\"\")),\n                                   envir=.GlobalEnv)))\n        nvalues <- length(values)\n        if (nvalues > 30) {\n          errorCondition(recall=numericToFactor,\n                         message=sprintf(gettextRcmdr(\"Number of levels (%d) too large.\"), nvalues))\n          return()\n        }\n        initializeDialog(subdialog,\n                         title=paste(gettextRcmdr(\"Level Names for\"),\n                                     if(sameLevels && length(variables) > 1) \"Factors\" else fname))\n        names <- rep(\"\", nvalues)\n        onOKsub <- function() {\n          closeDialog(subdialog)\n          for (i in 1:nvalues){\n            names[i] <- eval(parse(text=paste(\"tclvalue(levelName\", i, \")\", sep=\"\")))\n          }\n          if (length(unique(names)) != nvalues){\n            errorCondition(recall=numericToFactor,\n                           message=gettextRcmdr(\"Levels names are not unique.\"))\n            return()\n          }\n          if (any(names == \"\")){\n            errorCondition(recall=numericToFactor,\n                           message=gettextRcmdr(\"A level name is empty.\"))\n            return()\n          }\n          assign(\"labels\", paste(paste(\"'\", names, \"'\", sep=\"\"), collapse=\",\"),\n                 envir=env)\n        }\n        subOKCancelHelp()\n        tkgrid(labelRcmdr(subdialog, text=gettextRcmdr(\"Numeric value\")), labelRcmdr(subdialog, text=gettextRcmdr(\"Level name\")), sticky=\"w\")\n        for (i in 1:nvalues){\n          valVar <- paste(\"levelName\", i, sep=\"\")\n          assign(valVar, tclVar(\"\"))\n          assign(paste(\"entry\", i, sep=\"\"), ttkentry(subdialog, width=\"20\",\n                                                     textvariable=get(valVar)))\n          tkgrid(labelRcmdr(subdialog, text=values[i]), get(paste(\"entry\", i, sep=\"\")), sticky=\"w\")\n        }\n        tkgrid(subButtonsFrame, sticky=\"w\", columnspan=2)\n        dialogSuffix(subdialog, focus=entry1, onOK=onOKsub, force.wait=TRUE)\n      }\n      if (levelsType == \"names\"){\n        if (!exists(\"labels\", mode=\"character\")) return()\n        cmd <- paste(\"factor(\", name,\n                     \", labels=c(\", labels, \"))\", sep=\"\")\n        command <- paste(command, \"\\n  \", fname, \" <- \", cmd, sep=\"\")\n      }\n      else{\n        command <- paste(command, \"\\n  \", fname, \" <- as.factor(\", name, \")\", sep=\"\")\n      }\n    }\n    command <- paste(command, \"\\n})\", sep=\"\")\n    result <- doItAndPrint(command)\n    if (class(result)[1] !=  \"try-error\") activeDataSet(.activeDataSet, flushModel=FALSE, flushDialogMemory=FALSE)\n    tkfocus(CommanderWindow())\n  }\n  OKCancelHelp(helpSubject=\"factor\")\n  tkgrid(getFrame(variableBox), labelRcmdr(dataFrame, text=\"  \"), levelsFrame, sticky=\"nw\")\n  tkgrid(dataFrame, sticky=\"w\")\n  tkgrid(labelRcmdr(factorNameFrame,\n                    text=gettextRcmdr(\"New variable name or prefix for multiple variables:  \")),\n         factorNameField, sticky=\"w\")\n  tkgrid(factorNameFrame, sticky=\"w\")\n  tkgrid(buttonsFrame, sticky=\"ew\", columnspan=2)\n  tkgrid.configure(numbersButton, sticky=\"w\")\n  tkgrid.configure(namesButton, sticky=\"w\")\n  dialogSuffix(preventGrabFocus=TRUE)\n}\n\nbinVariable <- function () {\n  # Author: Dan Putler (revision by J. Fox, 2 Feb 05)\n  defaults <- list (initial.levels = \"specify\", initial.bins = \"3\", initial.varName = NULL, \n                    initial.newVar = \"variable\", initial.method = \"intervals\")\n  dialog.values <- getDialog (\"binVariable\", defaults)\n  env <- environment()\n  initializeDialog(title = gettextRcmdr(\"Bin a Numeric Variable\"))\n  variableFrame <- tkframe(top)\n  variableBox <- variableListBox(variableFrame, Numeric(), \n                                 title = gettextRcmdr(\"Variable to bin (pick one)\"), \n                                 initialSelection = varPosn (dialog.values$initial.varName, \"numeric\"))\n  newVariableFrame <- tkframe(variableFrame)\n  newVariableName <- tclVar(dialog.values$initial.newVar)\n  newVariable <- ttkentry(newVariableFrame, width = \"18\", textvariable = newVariableName)\n  binsFrame <- tkframe(top)\n  binsVariable <- tclVar(dialog.values$initial.bins)\n  slider <- tkscale(binsFrame, from = 2, to = 20, showvalue = TRUE, \n                    variable = binsVariable, resolution = 1, orient = \"horizontal\")\n  optionsFrame <- tkframe(top)\n  radioButtons(optionsFrame, name = \"levels\", buttons = c(\"specify\", \n                                                          \"numbers\", \"ranges\"), labels = gettextRcmdr(c(\"Specify names\", \n                                                                                                        \"Numbers\", \"Ranges\")), title = gettextRcmdr(\"Level Names\"),\n               initialValue = dialog.values$initial.levels)\n  radioButtons(optionsFrame, name = \"method\", buttons = c(\"intervals\", \n                                                          \"proportions\", \"natural\"), labels = gettextRcmdr(c(\"Equal-width bins\", \n                                                                                                             \"Equal-count bins\", \"Natural breaks\\n(from K-means clustering)\")), \n               title = gettextRcmdr(\"Binning Method\"), \n               initialValue = dialog.values$initial.method)\n  onOK <- function() {\n    levels <- tclvalue(levelsVariable)\n    bins <- as.numeric(tclvalue(binsVariable))\n    varName <- getSelection(variableBox)\n    closeDialog()\n    if (length(varName) == 0) {\n      errorCondition(recall = binVariable, message = gettextRcmdr(\"You must select a variable.\"))\n      return()\n    }\n    newVar <- tclvalue(newVariableName)\n    if (is.element(newVar, Variables())) {\n      if (\"no\" == tclvalue(checkReplace(newVar))) {\n        binVariable()\n        return()\n      }\n    }\n    if (!is.valid.name(newVar)) {\n      errorCondition(message = paste(\"\\\"\", newVar, \"\\\" \", \n                                     gettextRcmdr(\"is not a valid name.\"), sep = \"\"), \n                     recall = binVariable)\n      return()\n    }\n    method <- tclvalue(methodVariable)\n    putDialog (\"binVariable\", list (initial.levels = levels, initial.bins = bins, initial.varName = varName, \n                                    initial.newVar = newVar, initial.method = method))\n    if (levels == \"specify\") {\n      initializeDialog(subdialog, title = gettextRcmdr(\"Bin Names\"))\n      onOKsub <- function() {\n        closeDialog(subdialog)\n        level <- character(bins)\n        for (i in 1:bins) {\n          level[i] <- eval(parse(text = paste(\"tclvalue(levelName\", \n                                              i, \")\", sep = \"\")))\n        }\n        if (length(unique(level)) != length(level)) {\n          errorCondition(window = subdialog, message = gettextRcmdr(\"Level names must be unique.\"), \n                         recall = onOK)\n          return()\n        }\n        assign(\"levelNames\", level, envir = env)\n      }\n      subOKCancelHelp()\n      tkgrid(labelRcmdr(subdialog, text = gettextRcmdr(\"Bin\"), \n                        fg = getRcmdr(\"title.color\"), font=\"RcmdrTitleFont\"), labelRcmdr(subdialog, text = gettextRcmdr(\"Name\"), \n                                                                                         fg = getRcmdr(\"title.color\"), font=\"RcmdrTitleFont\"), sticky = \"w\")\n      for (i in 1:bins) {\n        valVar <- paste(\"levelName\", i, sep = \"\")\n        assign(valVar, tclVar(i))\n        assign(paste(\"entry\", i, sep = \"\"), ttkentry(subdialog, \n                                                     width = \"20\", textvariable = get(valVar)))\n        tkgrid(labelRcmdr(subdialog, text = as.character(i)), \n               get(paste(\"entry\", i, sep = \"\")), sticky = \"w\")\n      }\n      tkgrid(subButtonsFrame, sticky = \"w\", columnspan = 2)\n      dialogSuffix(subdialog, focus = entry1, bindReturn = FALSE, force.wait=TRUE)\n    }\n    labels <- if (levels == \"numbers\") \n      \"FALSE\"\n    else if (levels == \"ranges\") \n      \"NULL\"\n    else {\n      if (!exists(\"levelNames\")) {\n        onCancel()\n        binVariable()\n        return()\n      }\n      paste(\"c('\", paste(levelNames, collapse = \"','\"), \n            \"')\", sep = \"\")\n    }\n    .activeDataSet <- ActiveDataSet()\n    command <- paste(.activeDataSet, \"$\", newVar, \" <- \", \n                     \"with(\", .activeDataSet, \", bin.var(\", varName, \", bins=\", \n                     bins, \", method=\", \"'\", method, \"', labels=\", labels, \n                     \"))\", sep = \"\")\n    logger(command)\n    result <- justDoIt(command)\n    if (class(result)[1] != \"try-error\") \n      activeDataSet(.activeDataSet, flushModel = FALSE, \n                    flushDialogMemory = FALSE)\n    tkfocus(CommanderWindow())\n  }\n  OKCancelHelp(helpSubject = \"bin.var\", reset = \"binVariable\")\n  tkgrid(labelRcmdr(newVariableFrame, text = gettextRcmdr(\"New variable name\"), \n                    fg = getRcmdr(\"title.color\"), font=\"RcmdrTitleFont\"), sticky = \"w\")\n  tkgrid(newVariable, sticky = \"w\")\n  tkgrid(getFrame(variableBox), labelRcmdr(variableFrame, text = \"    \"), \n         newVariableFrame, sticky = \"nw\")\n  tkgrid(variableFrame, sticky = \"w\")\n  tkgrid(labelRcmdr(binsFrame, text = gettextRcmdr(\"Number of bins:\")), \n         slider, sticky = \"s\")\n  tkgrid(binsFrame, sticky = \"w\")\n  tkgrid(levelsFrame, labelRcmdr(optionsFrame, text = \"    \"), \n         methodFrame, sticky = \"nw\")\n  tkgrid(optionsFrame, sticky = \"w\")\n  tkgrid(buttonsFrame, sticky = \"w\")\n  dialogSuffix()\n}\n\nreorderFactor <- function(){\n  initializeDialog(title=gettextRcmdr(\"Reorder Factor Levels\"))\n  variableBox <- variableListBox(top, Factors(), title=gettextRcmdr(\"Factor (pick one)\"))\n  orderedFrame <- tkframe(top)\n  orderedVariable <- tclVar(\"0\")\n  orderedCheckBox <- ttkcheckbutton(orderedFrame, variable=orderedVariable)\n  factorName <- tclVar(gettextRcmdr(\"<same as original>\"))\n  factorNameField <- ttkentry(top, width=\"20\", textvariable=factorName)\n  onOK <- function(){\n    variable <- getSelection(variableBox)\n    closeDialog()\n    if (length(variable) == 0) {\n      errorCondition(recall=reorderFactor, message=gettextRcmdr(\"You must select a variable.\"))\n      return()\n    }\n    name <- trim.blanks(tclvalue(factorName))\n    if (name == gettextRcmdr(\"<same as original>\")) name <- variable\n    if (!is.valid.name(name)){\n      errorCondition(recall=reorderFactor,\n                     message=paste('\"', name, '\" ', gettextRcmdr(\"is not a valid name.\"), sep=\"\"))\n      return()\n    }\n    if (is.element(name, Variables())) {\n      if (\"no\" == tclvalue(checkReplace(name))){\n        reorderFactor()\n        return()\n      }\n    }\n    .activeDataSet <- ActiveDataSet()\n    old.levels <- eval(parse(text=paste(\"levels(\", .activeDataSet, \"$\", variable, \")\",\n                                        sep=\"\")), envir=.GlobalEnv)\n    nvalues <- length(old.levels)\n    ordered <- tclvalue(orderedVariable)\n    if (nvalues > 30) {\n      errorCondition(recall=reorderFactor,\n                     message=sprintf(gettextRcmdr(\"Number of levels (%d) too large.\"), nvalues))\n      return()\n    }\n    initializeDialog(subdialog, title=gettextRcmdr(\"Reorder Levels\"))\n    order <- 1:nvalues\n    onOKsub <- function() {\n      closeDialog(subdialog)\n      opt <- options(warn=-1)\n      for (i in 1:nvalues){\n        order[i] <- as.numeric(eval(parse(text=paste(\"tclvalue(levelOrder\", i, \")\", sep=\"\"))))\n      }\n      options(opt)\n      if (any(sort(order) != 1:nvalues) || any(is.na(order))){\n        errorCondition(recall=reorderFactor,\n                       message=paste(gettextRcmdr(\"Order of levels must include all integers from 1 to \"), nvalues, sep=\"\"))\n        return()\n      }\n      levels <- old.levels[order(order)]\n      ordered <- if (ordered == \"1\") \", ordered=TRUE\" else \"\"\n      command <- paste(\"with(\", .activeDataSet, \", factor(\", variable,\n                       \", levels=c(\", paste(paste(\"'\", levels, \"'\", sep=\"\"), collapse=\",\"), \")\",\n                       ordered, \"))\", sep=\"\")\n      result <- justDoIt(paste(.activeDataSet, \"$\", name, \" <- \", command, sep=\"\"))\n      logger(paste(.activeDataSet,\"$\", name,\" <- \", command, sep=\"\"))\n      if (class(result)[1] !=  \"try-error\") activeDataSet(.activeDataSet, flushModel=FALSE, flushDialogMemory=FALSE)\n    }\n    subOKCancelHelp()\n    tkgrid(labelRcmdr(subdialog, text=gettextRcmdr(\"Old Levels\"), fg=getRcmdr(\"title.color\"), font=\"RcmdrTitleFont\"),\n           labelRcmdr(subdialog, text=gettextRcmdr(\"New order\"), fg=getRcmdr(\"title.color\"), font=\"RcmdrTitleFont\"), sticky=\"w\")\n    for (i in 1:nvalues){\n      valVar <- paste(\"levelOrder\", i, sep=\"\")\n      assign(valVar, tclVar(i))\n      assign(paste(\"entry\", i, sep=\"\"), ttkentry(subdialog, width=\"2\",\n                                                 textvariable=get(valVar)))\n      tkgrid(labelRcmdr(subdialog, text=old.levels[i]), get(paste(\"entry\", i, sep=\"\")), sticky=\"w\")\n    }\n    tkgrid(subButtonsFrame, sticky=\"w\", columnspan=2)\n    dialogSuffix(subdialog, focus=entry1, force.wait=TRUE)\n  }\n  OKCancelHelp(helpSubject=\"factor\")\n  tkgrid(getFrame(variableBox), sticky=\"nw\")\n  tkgrid(labelRcmdr(top, text=gettextRcmdr(\"Name for factor\")), sticky=\"w\")\n  tkgrid(factorNameField, sticky=\"w\")\n  tkgrid(orderedCheckBox, labelRcmdr(orderedFrame, text=gettextRcmdr(\"Make ordered factor\")), sticky=\"w\")\n  tkgrid(orderedFrame, sticky=\"w\")\n  tkgrid(buttonsFrame, sticky=\"w\")\n  dialogSuffix(preventGrabFocus=TRUE)\n}\n\nstandardize <- function(X){\n  initializeDialog(title=gettextRcmdr(\"Standardize Variables\"))\n  xBox <- variableListBox(top, Numeric(), title=gettextRcmdr(\"Variables (pick one or more)\"),\n                          selectmode=\"multiple\")\n  onOK <- function(){\n    x <- getSelection(xBox)\n    closeDialog()\n    if (length(x) == 0) {\n      errorCondition(recall=standardize, message=gettextRcmdr(\"You must select one or more variables.\"))\n      return()\n    }\n    xx <- paste('\"', x, '\"', sep=\"\")\n    .activeDataSet <- ActiveDataSet()\n    command <- paste(.activeDataSet, \" <- \", \"local({\\n  .Z <- scale(\", \n                     .activeDataSet, \"[,c(\", paste(xx, collapse=\",\"),\n                     \")])\\n  within(\", .activeDataSet, \", {\", sep=\"\")\n    for (i in length(x):1){\n      Z <- paste(\"Z.\", x[i], sep=\"\")\n      if (is.element(Z, Variables())) {\n        if (\"no\" == tclvalue(checkReplace(Z))){\n          if (GrabFocus()) tkgrab.release(top)\n          tkdestroy(top)\n          next\n        }\n      }\n      command <- paste(command, \"\\n    \", Z, \" <- .Z[,\", i, \"]\", sep=\"\")\n    }\n    command <- paste(command, \"\\n  })\\n})\")\n    result <- doItAndPrint(command)\n    if (class(result)[1] !=  \"try-error\") activeDataSet(.activeDataSet, flushModel=FALSE, flushDialogMemory=FALSE)\n    tkfocus(CommanderWindow()) \n  }\n  OKCancelHelp(helpSubject=\"scale\")\n  tkgrid(getFrame(xBox), sticky=\"w\")\n  tkgrid(buttonsFrame, sticky=\"w\")\n  dialogSuffix()\n}\n\nhelpDataSet <- function(){\n\t.activeDataSet <- ActiveDataSet()\n\tif (as.numeric(R.Version()$major) >= 2) doItAndPrint(paste('help(\"', .activeDataSet, '\")', sep=\"\"))\n\telse {\n\t\tjustDoIt(paste(\"help('\", .activeDataSet, \"')\", sep=\"\"))\n\t\tlogger(paste('help(\"', .activeDataSet, '\")', sep=\"\"))\n\t}\n\tNULL\n}\n\nvariablesDataSet <- function(){\n\tdoItAndPrint(paste(\"names(\", ActiveDataSet(), \")\", sep=\"\"))\n}\n\nexportDataSet <- function() {\n    dsname <- activeDataSet()\n    initializeDialog(title=gettextRcmdr(\"Export Active Data Set\"))\n    checkBoxes(frame=\"optionsFrame\", boxes=c(\"colnames\", \"rownames\", \"quotes\"),\n               initialValues=rep(1,3), labels=gettextRcmdr(c(\"Write variable names\", \"Write row names\", \"Quotes around character values\")))\n    missingFrame <- tkframe(optionsFrame)\n    missingVariable <- tclVar(\"NA\")\n    missingEntry <- ttkentry(missingFrame, width=\"8\", textvariable=missingVariable)\n    radioButtons(name=\"delimiter\", buttons=c(\"spaces\", \"tabs\", \"commas\", \"semicolons\"), \n                 labels=gettextRcmdr(c(\"Spaces\", \"Tabs\", \"Commas [,]\", \"Semicolons [;]\")),\n                 title=gettextRcmdr(\"Field Separator\"))\n    otherButton <- ttkradiobutton(delimiterFrame, variable=delimiterVariable, value=\"other\", text=gettextRcmdr(\"Other\"))\n    otherVariable <- tclVar(\"\")\n    otherEntry <- ttkentry(delimiterFrame, width=\"4\", textvariable=otherVariable)\n    onOK <- function(){\n        closeDialog()\n        col <- tclvalue(colnamesVariable) == 1\n        row <- tclvalue(rownamesVariable) == 1\n        quote <- tclvalue(quotesVariable) == 1\n        delim <- tclvalue(delimiterVariable)\n        missing <- tclvalue(missingVariable)\n        sep <- if (delim == \"tabs\") \"\\\\t\"\n        else if (delim == \"spaces\") \" \"\n        else if (delim == \"commas\") \",\"\n        else if (delim == \"semicolons\") \";\"\n        else trim.blanks(tclvalue(otherVariable))\n        saveFile <- tclvalue(tkgetSaveFile(filetypes=gettextRcmdr('{\"All Files\" {\"*\"}} {\"Text Files\" {\".txt\" \".TXT\" \".dat\" \".DAT\" \".csv\" \".CSV\"}}'),\n                                           defaultextension=\"txt\",\n                                           initialfile=paste(dsname, if (delim == \"commas\") \".csv\" else \".txt\", sep=\"\"),\n                                           parent=CommanderWindow()))\n        if (saveFile == \"\") {\n            tkfocus(CommanderWindow())\n            return()\n        }\n        command <- paste(\"write.table(\", dsname, ', \"', saveFile, '\", sep=\"', sep,\n                         '\", col.names=', col, \", row.names=\", row, \", quote=\", quote,\n                         ', na=\"', missing, '\")', sep=\"\")\n        justDoIt(command)\n        logger(command)\n        Message(paste(gettextRcmdr(\"Active dataset exported to file\"), saveFile), type=\"note\")\n        tkfocus(CommanderWindow())\n    }\n    OKCancelHelp(helpSubject=\"write.table\")\n    tkgrid(labelRcmdr(missingFrame, text=gettextRcmdr(\"Missing values:  \")), missingEntry, sticky=\"w\")\n    tkgrid(missingFrame, sticky=\"w\")\n    tkgrid(optionsFrame, sticky=\"w\")\n    tkgrid(otherButton,\n           labelRcmdr(delimiterFrame, text=gettextRcmdr(\"Specify:\")), otherEntry, sticky=\"w\")\n    tkgrid(delimiterFrame, stick=\"w\")\n    tkgrid(buttonsFrame, sticky=\"w\")\n    dialogSuffix()\n}\n\nfilterNA <- function(){\n    dataSet <- activeDataSet()\n    initializeDialog(title=gettextRcmdr(\"Remove Missing Data\"))\n    allVariablesFrame <- tkframe(top)\n    allVariables <- tclVar(\"1\")\n    allVariablesCheckBox <- ttkcheckbutton(allVariablesFrame, variable=allVariables, \n                                           text=gettextRcmdr(\"Include all variables\"))\n    variablesBox <- variableListBox(top, Variables(), selectmode=\"multiple\", initialSelection=NULL,\n                                    title=gettextRcmdr(\"Variables (select one or more)\"))\n    newDataSetName <- tclVar(gettextRcmdr(\"<same as active data set>\"))\n    dataSetNameFrame <- tkframe(top)\n    dataSetNameEntry <- ttkentry(dataSetNameFrame, width=\"25\", textvariable=newDataSetName)\n    onOK <- function(){\n        x <- getSelection(variablesBox)\n        closeDialog()\n        newName <- trim.blanks(tclvalue(newDataSetName))\n        .activeDataSet <- ActiveDataSet()\n        if (newName == gettextRcmdr(\"<same as active data set>\")) newName <- .activeDataSet\n        if (!is.valid.name(newName)){\n            errorCondition(recall=filterNA,\n                           message=paste('\"', newName, '\" ', gettextRcmdr(\"is not a valid name.\"), sep=\"\"))\n            return()\n        }\n        if (is.element(newName, listDataSets())) {\n            if (\"no\" == tclvalue(checkReplace(newName, gettextRcmdr(\"Data set\")))){\n                filterNA()\n                return()\n            }\n        }\n        if (tclvalue(allVariables) == \"1\"){\n            command <- paste(newName, \" <- na.omit(\", .activeDataSet, \")\", sep=\"\")\n            logger(command)\n            result <- justDoIt(command)\n            if (class(result)[1] !=  \"try-error\") activeDataSet(newName)\n            tkfocus(CommanderWindow())\n        }\n        else {\n            if (length(x) == 0) {\n                errorCondition(recall=filterNA, message=gettextRcmdr(\"No variables were selected.\"))\n                return()\n            }\n            x <- paste('\"', x, '\"', sep=\"\")\n            command <- paste(newName, \" <- na.omit(\", .activeDataSet, \"[,c(\", paste(x, collapse=\",\"),\n                             ')])', sep=\"\")\n            logger(command)\n            result <- justDoIt(command)\n            if (class(result)[1] !=  \"try-error\") activeDataSet(newName)\n            tkfocus(CommanderWindow())\n        }\n    }\n    OKCancelHelp(helpSubject=\"na.omit\")\n    tkgrid(allVariablesCheckBox, sticky=\"w\")\n    tkgrid(allVariablesFrame, sticky=\"w\")\n    tkgrid(labelRcmdr(top, text=gettextRcmdr(\"   OR\"), fg=\"red\"), sticky=\"w\")\n    tkgrid(getFrame(variablesBox), sticky=\"nw\")\n    tkgrid(labelRcmdr(dataSetNameFrame, text=gettextRcmdr(\"Name for new data set\")), sticky=\"w\")\n    tkgrid(dataSetNameEntry, sticky=\"w\")\n    tkgrid(dataSetNameFrame, sticky=\"w\")\n    tkgrid(buttonsFrame, sticky=\"w\")\n    dialogSuffix()\n}\n\nsubsetDataSet <- function(){\n    dataSet <- activeDataSet()\n    initializeDialog(title=gettextRcmdr(\"Subset Data Set\"))\n    allVariablesFrame <- tkframe(top)\n    allVariables <- tclVar(\"1\")\n    allVariablesCheckBox <- ttkcheckbutton(allVariablesFrame, variable=allVariables)\n    variablesBox <- variableListBox(top, Variables(), selectmode=\"multiple\",\n                                    initialSelection=NULL, title=gettextRcmdr(\"Variables (select one or more)\"))\n    subsetVariable <- tclVar(gettextRcmdr(\"<all cases>\"))\n    subsetFrame <- tkframe(top)\n    subsetEntry <- ttkentry(subsetFrame, width=\"20\", textvariable=subsetVariable)\n    subsetScroll <- ttkscrollbar(subsetFrame, orient=\"horizontal\",\n                                 command=function(...) tkxview(subsetEntry, ...))\n    tkconfigure(subsetEntry, xscrollcommand=function(...) tkset(subsetScroll, ...))\n    newDataSetName <- tclVar(gettextRcmdr(\"<same as active data set>\"))\n    dataSetNameFrame <- tkframe(top)\n    dataSetNameEntry <- ttkentry(dataSetNameFrame, width=\"25\", textvariable=newDataSetName)\n    onOK <- function(){\n        newName <- trim.blanks(tclvalue(newDataSetName))\n        if (newName == gettextRcmdr(\"<same as active data set>\")) newName <- ActiveDataSet()\n        if (!is.valid.name(newName)){\n            errorCondition(recall=subsetDataSet,\n                           message=paste('\"', newName, '\" ', gettextRcmdr(\"is not a valid name.\"), sep=\"\"))\n            return()\n        }\n        if (is.element(newName, listDataSets())) {\n            if (\"no\" == tclvalue(checkReplace(newName, type=gettextRcmdr(\"Data set\")))){\n                closeDialog()\n                subsetDataSet()\n                return()\n            }\n        }\n        selectVars <- if (tclvalue(allVariables) == \"1\") \"\"\n        else {\n            x <- getSelection(variablesBox)\n            if (0 == length(x)) {\n                errorCondition(recall=subsetDataSet,\n                               message=gettextRcmdr(\"No variables were selected.\"))\n                return()\n            }\n            paste(\", select=c(\", paste(x, collapse=\",\"), \")\", sep=\"\")\n        }\n        closeDialog()\n        cases <- tclvalue(subsetVariable)\n        selectCases <- if (cases == gettextRcmdr(\"<all cases>\")) \"\"\n        else paste(\", subset=\", cases, sep=\"\")\n        if (selectVars == \"\" && selectCases ==\"\"){\n            errorCondition(recall=subsetDataSet,\n                           message=gettextRcmdr(\"New data set same as active data set.\"))\n            return()\n        }\n        command <- paste(newName, \" <- subset(\", ActiveDataSet(), selectCases, selectVars, \")\",\n                         sep=\"\")\n        logger(command)\n        result <- justDoIt(command)\n        if (class(result)[1] !=  \"try-error\") activeDataSet(newName)\n        tkfocus(CommanderWindow())\n    }\n    OKCancelHelp(helpSubject=\"subset\")\n    tkgrid(allVariablesCheckBox, labelRcmdr(allVariablesFrame, text=gettextRcmdr(\"Include all variables\")),\n           sticky=\"w\")\n    tkgrid(allVariablesFrame, sticky=\"w\")\n    tkgrid(labelRcmdr(top, text=gettextRcmdr(\"   OR\"), fg=\"red\"), sticky=\"w\")\n    tkgrid(getFrame(variablesBox), sticky=\"nw\")\n    tkgrid(labelRcmdr(subsetFrame, text=gettextRcmdr(\"Subset expression\")), sticky=\"w\")\n    tkgrid(subsetEntry, sticky=\"w\")\n    tkgrid(subsetScroll, sticky=\"ew\")\n    tkgrid(subsetFrame, sticky=\"w\")\n    tkgrid(labelRcmdr(dataSetNameFrame, text=gettextRcmdr(\"Name for new data set\")), sticky=\"w\")\n    tkgrid(dataSetNameEntry, sticky=\"w\")\n    tkgrid(dataSetNameFrame, sticky=\"w\")\n    tkgrid(buttonsFrame, sticky=\"w\")\n    dialogSuffix()\n}\n\nsetCaseNames <- function(){\n\tdataSet <- activeDataSet()\n\tinitializeDialog(title=gettextRcmdr(\"Set Case Names\"))\n\tvariablesBox <- variableListBox(top, Variables(), title=gettextRcmdr(\"Select variable containing row names\"),\n\t\t\tinitialSelection=NULL)\n\tonOK <- function(){\n\t\tvariable <- getSelection(variablesBox)\n\t\tcloseDialog()\n\t\tif (length(variable) == 0) {\n\t\t\terrorCondition(recall=setCaseNames, message=gettextRcmdr(\"You must select a variable.\"))\n\t\t\treturn()\n\t\t}\n\t\tvar <- eval(parse(text=paste(dataSet, \"$\", variable, sep=\"\")), envir=.GlobalEnv)\n\t\tif (length(var) != length(unique(var))){\n\t\t\terrorCondition(recall=setCaseNames, message=gettextRcmdr(\"Case names must be unique.\"))\n\t\t\treturn()\n\t\t}\n\t\tcommand <- paste(\"row.names(\", dataSet, \") <- as.character(\", dataSet, \"$\", variable, \")\", sep=\"\")\n\t\tresult <- justDoIt(command)\n\t\tlogger(command)\n\t\teval(parse(text=paste(dataSet, \"$\", variable, \"<- NULL\", sep=\"\")), envir=.GlobalEnv)\n\t\tlogger(paste(dataSet, \"$\", variable, \" <- NULL\", sep=\"\"))\n\t\tif (class(result)[1] !=  \"try-error\") activeDataSet(dataSet, flushModel=FALSE, flushDialogMemory=FALSE)\n\t\ttkfocus(CommanderWindow())\n\t}\n\tOKCancelHelp(helpSubject=\"row.names\")\n\ttkgrid(getFrame(variablesBox), sticky=\"nw\")\n\ttkgrid(buttonsFrame, sticky=\"w\")\n\tdialogSuffix()\n}\n\nrenameVariables <- function(){\n\tinitializeDialog(title=gettextRcmdr(\"Rename Variables\"))\n\tvariableBox <- variableListBox(top, Variables(), title=gettextRcmdr(\"Variables (pick one or more)\"),\n\t\t\tselectmode=\"multiple\", initialSelection=NULL)\n\tonOK <- function(){\n\t\tvariables <- getSelection(variableBox)\n\t\tcloseDialog()\n\t\tnvariables <- length(variables)\n\t\tif (nvariables < 1) {\n\t\t\terrorCondition(recall=renameVariables, message=gettextRcmdr(\"No variables selected.\"))\n\t\t\treturn()\n\t\t}\n\t\t.activeDataSet <- ActiveDataSet()\n\t\tunordered.names <- names(get(.activeDataSet))\n\t\twhich.variables <- match(variables, unordered.names)\n\t\tinitializeDialog(subdialog, title=gettextRcmdr(\"Variable Names\"))\n\t\tnewnames <- rep(\"\", nvariables)\n\t\tonOKsub <- function() {\n\t\t\tcloseDialog(subdialog)\n\t\t\tfor (i in 1:nvariables){\n\t\t\t\tnewnames[i] <- eval(parse(text=paste(\"tclvalue(newName\", i, \")\", sep=\"\")))\n\t\t\t}\n\t\t\tif (any(newnames == \"\")){\n\t\t\t\terrorCondition(recall=renameVariables, message=gettextRcmdr(\"A variable name is empty.\"))\n\t\t\t\treturn()\n\t\t\t}\n\t\t\ttest.names <- newnames == make.names(newnames)\n\t\t\tif (!all(test.names)){\n\t\t\t\terrorCondition(recall=renameVariables,\n\t\t\t\t\t\tmessage=paste(gettextRcmdr(\"The following variable names are not valid:\\n\"),\n\t\t\t\t\t\t\t\tpaste(newnames[!test.names], collapse=\", \")))\n\t\t\t\treturn()\n\t\t\t}\n\t\t\tall.names <- names(get(.activeDataSet))\n\t\t\tall.names[which.variables] <- newnames\n\t\t\tif (length(unique(all.names)) != length(all.names)){\n\t\t\t\terrorCondition(recall=renameVariables, message=gettextRcmdr(\"Variable names are not unique\"))\n\t\t\t\treturn()\n\t\t\t}\n\t\t\tcommand <- paste(\"names(\", .activeDataSet, \")[c(\", paste(which.variables, collapse=\",\"),\n\t\t\t\t\t\")] <- c(\", paste('\"', newnames, '\"', collapse=\",\", sep=\"\"), \")\", sep=\"\")\n\t\t\tresult <- justDoIt(command)\n\t\t\tlogger(command)\n\t\t\tif (class(result)[1] !=  \"try-error\") activeDataSet(.activeDataSet, flushModel=FALSE, flushDialogMemory=FALSE)\n\t\t\ttkfocus(CommanderWindow())\n\t\t}\n\t\tsubOKCancelHelp()\n\t\ttkgrid(labelRcmdr(subdialog, text=gettextRcmdr(\"Old Name\"), fg=getRcmdr(\"title.color\"), font=\"RcmdrTitleFont\"),\n\t\t\t\tlabelRcmdr(subdialog, text=gettextRcmdr(\"New name\"), fg=getRcmdr(\"title.color\"), font=\"RcmdrTitleFont\"), sticky=\"w\")\n\t\tfor (i in 1:nvariables){\n\t\t\tvalVar <- paste(\"newName\", i, sep=\"\")\n\t\t\tassign(valVar, tclVar(\"\"))\n\t\t\tassign(paste(\"entry\", i, sep=\"\"), ttkentry(subdialog, width=\"20\",\n\t\t\t\t\t\t\ttextvariable=get(valVar)))\n\t\t\ttkgrid(labelRcmdr(subdialog, text=variables[i]), get(paste(\"entry\", i, sep=\"\")), sticky=\"w\")\n\t\t}\n\t\ttkgrid(subButtonsFrame, sticky=\"w\", columnspan=2)\n\t\tdialogSuffix(subdialog, focus=entry1, onOK=onOKsub, force.wait=TRUE)\n\t}\n\tOKCancelHelp(helpSubject=\"names\")\n\ttkgrid(getFrame(variableBox), sticky=\"nw\")\n\ttkgrid(buttonsFrame, sticky=\"w\")\n\tdialogSuffix()\n}\n\nsetContrasts <- function(){\n  initializeDialog(title=gettextRcmdr(\"Set Contrasts for Factor\"))\n  variableBox <- variableListBox(top, Factors(), title=gettextRcmdr(\"Factor (pick one)\"))\n  radioButtons(name=\"contrasts\", buttons=c(\"treatment\", \"sum\", \"helmert\", \"poly\", \"specify\"),\n               values=c(\"contr.Treatment\", \"contr.Sum\", \"contr.helmert\", \"contr.poly\", \"specify\"),\n               labels=gettextRcmdr(c(\"Treatment (dummy) contrasts\", \"Sum (deviation) contrasts\", \"Helmert contrasts\",\n                                     \"Polynomial contrasts\", \"Other (specify)\")), title=gettextRcmdr(\"Contrasts\"))\n  onOK <- function(){\n    variable <- getSelection(variableBox)\n    closeDialog()\n    if (length(variable) == 0) {\n      errorCondition(recall=setContrasts, message=gettextRcmdr(\"You must select a variable.\"))\n      return()\n    }\n    contrasts <- tclvalue(contrastsVariable)\n    if (contrasts != \"specify\"){\n      command <- paste(\"contrasts(\", ActiveDataSet(), \"$\", variable, ') <- \"', contrasts, '\"', sep=\"\")\n      result <- justDoIt(command)\n      logger(command)\n      if (class(result)[1] !=  \"try-error\") activeDataSet(ActiveDataSet())\n      tkfocus(CommanderWindow())\n    }\n    else{\n      initializeDialog(subdialog, title=gettextRcmdr(\"Specify Contrasts\"))\n      tkgrid(labelRcmdr(subdialog, text=gettextRcmdr(\"Enter Contrast Coefficients\"), fg=getRcmdr(\"title.color\"), font=\"RcmdrTitleFont\"), sticky=\"w\")\n      env <- environment()\n      tableFrame <- tkframe(subdialog)\n      row.names <- eval(parse(text=paste(\"levels(\", ActiveDataSet(), \"$\", variable, \")\")))\n      row.names <- substring(paste(abbreviate(row.names, 12), \"            \"), 1, 12)\n      nrows <- length(row.names)\n      ncols <- nrows - 1\n      make.col.names <- paste(\"labelRcmdr(tableFrame, text='\", gettextRcmdr(\"Contrast Name:\"), \"')\", sep=\"\")\n      for (j in 1:ncols) {\n        varname <- paste(\".col.\", j, sep=\"\")\n        assign(varname, tclVar(paste(\".\", j, sep=\"\")), envir=env)\n        make.col.names <- paste(make.col.names, \", \",\n                                \"ttkentry(tableFrame, width='12', textvariable=\", varname, \")\", sep=\"\")\n      }\n      eval(parse(text=paste(\"tkgrid(\", make.col.names, \", sticky='w')\", sep=\"\")), envir=env)\n      for (i in 1:nrows){\n        make.row <- paste(\"labelRcmdr(tableFrame, text='\", row.names[i], \"')\")\n        for (j in 1:ncols){\n          varname <- paste(\".tab.\", i, \".\", j, sep=\"\")\n          assign(varname, tclVar(\"0\"), envir=env)\n          make.row <- paste(make.row, \", \", \"ttkentry(tableFrame, width='5', textvariable=\",\n                            varname, \")\", sep=\"\")\n        }\n        eval(parse(text=paste(\"tkgrid(\", make.row, \", sticky='w')\", sep=\"\")), envir=env)\n      }\n      tkgrid(tableFrame, sticky=\"w\")\n      onOKsub <- function(){\n        closeDialog(subdialog)\n        cell <- 0\n        values <- rep(NA, nrows*ncols)\n        for (j in 1:ncols){\n          for (i in 1:nrows){\n            cell <- cell + 1\n            varname <- paste(\".tab.\", i, \".\", j, sep=\"\")\n            values[cell] <- as.numeric(eval(parse(text=paste(\"tclvalue(\", varname,\")\", sep=\"\"))))\n          }\n        }\n        values <- na.omit(values)\n        if (length(values) != nrows*ncols){\n          errorCondition(subdialog, recall=setContrasts,\n                         message=sprintf(gettextRcmdr(\n                           \"Number of valid entries in contrast matrix(%d)\\nnot equal to number of levels (%d) * number of contrasts (%d).\"), length(values), nrows, ncols))\n          return()\n        }\n        if (qr(matrix(values, nrows, ncols))$rank < ncols) {\n          errorCondition(subdialog, recall=setContrasts, message=gettextRcmdr(\"Contrast matrix is not of full column rank\"))\n          return()\n        }\n        contrast.names <- rep(\"\", ncols)\n        for (j in 1:ncols){\n          varname <- paste(\".col.\", j, sep=\"\")\n          contrast.names[j] <- eval(parse(text=paste(\"tclvalue(\", varname,\")\", sep=\"\")))\n        }\n        if (length(unique(contrast.names)) < ncols) {\n          errorCondition(subdialog, recall=setContrasts, message=gettextRcmdr(\"Contrast names must be unique\"))\n          return()\n        }\n        command <- paste(\".Contrasts <- matrix(c(\", paste(values, collapse=\",\"), \"), \", nrows, \", \", ncols,\n                         \")\", sep=\"\")\n        doItAndPrint(command)\n        command <- paste(\"colnames(.Contrasts) <- c(\",\n                         paste(\"'\", contrast.names, \"'\", sep=\"\", collapse=\", \"), \")\", sep=\"\")\n        doItAndPrint(command)\n        command <- paste(\"contrasts(\", ActiveDataSet(), \"$\", variable, \") <- .Contrasts\", sep=\"\")\n        result <- doItAndPrint(command)\n        logger(\"remove(.Contrasts)\")\n        remove(.Contrasts, envir=.GlobalEnv)\n        if (class(result)[1] !=  \"try-error\") activeDataSet(ActiveDataSet(), flushModel=FALSE, flushDialogMemory=FALSE)\n        tkfocus(CommanderWindow())\n      }\n      subOKCancelHelp(helpSubject=\"contrasts\")\n      tkgrid(tableFrame, sticky=\"w\")\n      tkgrid(labelRcmdr(subdialog, text=\"\"))\n      tkgrid(subButtonsFrame, sticky=\"w\")\n      dialogSuffix(subdialog, focus=subdialog, force.wait=TRUE)\n    }\n  }\n  OKCancelHelp(helpSubject=\"contrasts\")\n  tkgrid(getFrame(variableBox), sticky=\"nw\")\n  tkgrid(contrastsFrame, sticky=\"w\")\n  tkgrid(buttonsFrame, sticky=\"w\")\n  dialogSuffix()\n}\n\nrefreshActiveDataSet <- function() activeDataSet(ActiveDataSet())\n\naddObsNumbers <- function(){\n\tdsname <- ActiveDataSet()\n\tif (is.element(\"ObsNumber\", listVariables())) {\n\t\tif (\"no\" == tclvalue(checkReplace(\"ObsNumber\", gettextRcmdr(\"Variable\")))){\n\t\t\treturn()\n\t\t}\n\t}\n\tnrows <- nrow(get(dsname, envir=.GlobalEnv))\n\tcommand <- paste(dsname, \"$ObsNumber <- 1:\", nrows, sep=\"\")\n\tlogger(command)\n\tresult <- justDoIt(command)\n\tif (class(result)[1] !=  \"try-error\") activeDataSet(dsname, flushModel=FALSE, flushDialogMemory=FALSE)\n}\n\nStack <- function(){\n\tinitializeDialog(title=gettextRcmdr(\"Stack Variables\"))\n\tvariableBox <- variableListBox(top, Numeric(), selectmode=\"multiple\",\n\t\t\ttitle=gettextRcmdr(\"Variables (pick two or more)\"))\n\tfactorName <- tclVar(\"factor\")\n\tfactorNameField <- ttkentry(top, width=\"20\", textvariable=factorName)\n\tvariableName <- tclVar(\"variable\")\n\tvariableNameField <- ttkentry(top, width=\"20\", textvariable=variableName)\n\tdatasetName <- tclVar(\"StackedData\")\n\tdatasetNameField <- ttkentry(top, width=\"20\", textvariable=datasetName)\n\tonOK <- function(){\n\t\tvariables <- getSelection(variableBox)\n\t\tfacname <- tclvalue(factorName)\n\t\tvarname <- tclvalue(variableName)\n\t\tdsname <- tclvalue(datasetName)\n\t\tcloseDialog()\n\t\tif (length(variables) < 2) {\n\t\t\terrorCondition(recall=Stack,\n\t\t\t\t\tmessage=gettextRcmdr(\"You must select at least two variables.\"))\n\t\t\treturn()\n\t\t}\n\t\tif (!is.valid.name(facname)){\n\t\t\terrorCondition(recall=Stack,\n\t\t\t\t\tmessage=paste('\"', facname, '\" ', gettextRcmdr(\"is not a valid name.\"), sep=\"\"))\n\t\t\treturn()\n\t\t}\n\t\tif (!is.valid.name(varname)){\n\t\t\terrorCondition(recall=Stack,\n\t\t\t\t\tmessage=paste('\"', varname, '\" ', gettextRcmdr(\"is not a valid name.\"), sep=\"\"))\n\t\t\treturn()\n\t\t}\n\t\tif (!is.valid.name(dsname)){\n\t\t\terrorCondition(recall=Stack,\n\t\t\t\t\tmessage=paste('\"', dsname, '\" ', gettextRcmdr(\"is not a valid name.\"), sep=\"\"))\n\t\t\treturn()\n\t\t}\n\t\tif (is.element(dsname, listDataSets())) {\n\t\t\tif (\"no\" == tclvalue(checkReplace(dsname, gettextRcmdr(\"Data set\")))){\n\t\t\t\tStack()\n\t\t\t\treturn()\n\t\t\t}\n\t\t}\n\t\tcommand <- paste(dsname, \" <- stack(\", activeDataSet(), \"[, c(\",\n\t\t\t\tpaste(paste('\"', variables, '\"', sep=\"\"), collapse=\",\"), \")])\", sep=\"\")\n\t\tlogger(command)\n\t\tresult <- justDoIt(command)\n\t\tcommand <- paste(\"names(\", dsname, ') <- c(\"', varname, '\", \"', facname, '\")',\n\t\t\t\tsep=\"\")\n\t\tlogger(command)\n\t\tjustDoIt(command)\n\t\tif (class(result)[1] !=  \"try-error\") activeDataSet(dsname)\n\t\ttkfocus(CommanderWindow())\n\t}\n\tOKCancelHelp(helpSubject=\"stack\")\n\ttkgrid(getFrame(variableBox), sticky=\"nw\", columnspan=2)\n\ttkgrid(labelRcmdr(top, text=\"\"))\n\ttkgrid(labelRcmdr(top,\n\t\t\t\t\ttext=gettextRcmdr(\"Name for stacked data set:\")), datasetNameField, sticky=\"w\")\n\ttkgrid(labelRcmdr(top,\n\t\t\t\t\ttext=gettextRcmdr(\"Name for variable:\")), variableNameField, sticky=\"w\")\n\ttkgrid(labelRcmdr(top,\n\t\t\t\t\ttext=gettextRcmdr(\"Name for factor:\")), factorNameField, sticky=\"w\")\n\ttkgrid(buttonsFrame, sticky=\"w\", columnspan=2)\n\tdialogSuffix(preventGrabFocus=TRUE)\n}\n\nloadDataSet <- function() {\n\tfile <- tclvalue(tkgetOpenFile(filetypes=\n\t\t\t\t\t\t\tgettextRcmdr('{\"All Files\" {\"*\"}} {\"R Data Files\" {\".RData\" \".rda\" \".Rda\" \".RDA\"}}')))\n\tif (file == \"\") return()\n\tsetBusyCursor()\n\ton.exit(setIdleCursor())\n\tcommand <- paste('load(\"', file,'\")', sep=\"\")\n\tdsname <- justDoIt(command)\n\tlogger(command)\n\tif (class(dsname)[1] !=  \"try-error\") {\n\t    if (length(dsname) > 1) {\n\t        Message(message=paste(gettextRcmdr(\"There is more than one object in the file, with the following names:\\n\"),\n\t                                     paste(dsname, collapse=\", \")), type=\"error\")\n\t        return()\n\t    }\n\t    activeDataSet(dsname)\n\t}\n\ttkfocus(CommanderWindow())\n}\n\nsaveDataSet <- function() {\n\tfile <- tclvalue(tkgetSaveFile(filetypes=\n\t\t\t\t\t\t\tgettextRcmdr('{\"All Files\" {\"*\"}} {\"R Data Files\" {\".RData\" \".rda\" \".Rda\" \".RDA\"}}'),\n\t\t\t\t\tdefaultextension=\".RData\", initialfile=paste(activeDataSet(), \".RData\", sep=\"\")))\n\tif (file == \"\") return()\n\tsetBusyCursor()\n\ton.exit(setIdleCursor())\n\tcommand <- paste('save(\"', activeDataSet(), '\", file=\"', file, '\")', sep=\"\")\n\tjustDoIt(command)\n\tlogger(command)\n}\n\nRemoveRows <- function(){\n\tdataSet <- activeDataSet()\n\tinitializeDialog(title=gettextRcmdr(\"Remove Rows from Active Data Set\"))\n\tremoveVariable <- tclVar(gettextRcmdr(\"\"))\n\tremoveFrame <- tkframe(top)\n\tremoveEntry <- ttkentry(removeFrame, width=\"60\", textvariable=removeVariable)\n\tremoveScroll <- ttkscrollbar(removeFrame, orient=\"horizontal\",\n\t\t\tcommand=function(...) tkxview(removeEntry, ...))\n\ttkconfigure(removeEntry, xscrollcommand=function(...) tkset(removeScroll, ...))\n\tnewDataSetName <- tclVar(gettextRcmdr(\"<same as active data set>\"))\n\tdataSetNameFrame <- tkframe(top)\n\tdataSetNameEntry <- ttkentry(dataSetNameFrame, width=\"25\", textvariable=newDataSetName)\n\tonOK <- function(){\n\t\tnewName <- trim.blanks(tclvalue(newDataSetName))\n\t\tif (newName == gettextRcmdr(\"<same as active data set>\")) newName <- ActiveDataSet()\n\t\tif (!is.valid.name(newName)){\n\t\t\terrorCondition(recall=RemoveRows,\n\t\t\t\t\tmessage=paste('\"', newName, '\" ', gettextRcmdr(\"is not a valid name.\"), sep=\"\"))\n\t\t\treturn()\n\t\t}\n\t\tif (is.element(newName, listDataSets())) {\n\t\t\tif (\"no\" == tclvalue(checkReplace(newName, type=gettextRcmdr(\"Data set\")))){\n\t\t\t\tcloseDialog()\n\t\t\t\tRemoveRows()\n\t\t\t\treturn()\n\t\t\t}\n\t\t}\n\t\tremove <- tclvalue(removeVariable)\n\t\tif (remove==\"\"){\n\t\t\terrorCondition(recall=RemoveRows,\n\t\t\t\t\tmessage=\"No rows to remove\")\n\t\t\tcloseDialog()\n\t\t\treturn()\n\t\t}\n\t\tremoveRows <- paste(\"c(\", gsub(\" \", \",\", remove), \")\", sep=\"\")\n\t\tremove <- try(eval(parse(text=removeRows)), silent=TRUE)\n\t\tif (class(remove) == \"try-error\"){\n\t\t\terrorCondition(recall=RemoveRows,\n\t\t\t\t\tmessage=remove)\n\t\t\tcloseDialog()\n\t\t\treturn()\n\t\t}\n\t\tcloseDialog()\n\t\tremoveRows <- if (is.numeric(remove)) paste(\"-\", removeRows, sep=\"\") \n\t\t\t\telse paste(\"!(rownames(\", ActiveDataSet(), \") %in% \", removeRows, \")\", sep=\"\")\n\t\tcommand <- paste(newName, \" <- \", ActiveDataSet(), \"[\", removeRows, \",]\", sep=\"\")\n\t\tlogger(command)\n\t\tresult <- justDoIt(command)\n\t\tif (class(result)[1] !=  \"try-error\") activeDataSet(newName)\n\t\ttkfocus(CommanderWindow())\n\t}\n\tOKCancelHelp(helpSubject=\"[.data.frame\")\n\ttkgrid(labelRcmdr(removeFrame, text=gettextRcmdr(\"Indices or quoted names of row(s) to remove\"),\n\t\t\t\t\tforeground=getRcmdr(\"title.color\"), font=\"RcmdrTitleFont\"), sticky=\"w\")\n\ttkgrid(removeEntry, sticky=\"w\")\n\ttkgrid(removeScroll, sticky=\"ew\")\n\ttkgrid(removeFrame, sticky=\"w\")\n\ttkgrid(labelRcmdr(dataSetNameFrame, text=gettextRcmdr(\"Name for new data set\")), sticky=\"w\")\n\ttkgrid(dataSetNameEntry, sticky=\"w\")\n\ttkgrid(dataSetNameFrame, sticky=\"w\")\n\ttkgrid(buttonsFrame, sticky=\"w\")\n\tdialogSuffix()\n}\n\nmergeDataSets <- function(){\n    dataSets <- listDataSets()\n    .activeDataSet <- ActiveDataSet()\n    initializeDialog(title=gettextRcmdr(\"Merge Data Sets\"))\n    dsname <- tclVar(\"MergedDataset\")\n    dsnameFrame <- tkframe(top)\n    entryDsname <- ttkentry(dsnameFrame, width=\"20\", textvariable=dsname)\n    dataSet1Box <- variableListBox(top, dataSets, title=gettextRcmdr(\"First Data Set (pick one)\"),\n                                   initialSelection=if (is.null(.activeDataSet)) NULL else which(.activeDataSet == dataSets) - 1)\n    dataSet2Box <- variableListBox(top, dataSets, title=gettextRcmdr(\"Second Data Set (pick one)\"))\n    commonVar <- tclVar(\"0\")\n    commonFrame <- tkframe(top)\n    commonButton <- ttkcheckbutton(commonFrame, variable=commonVar)    \n    radioButtons(top, \"direction\", buttons=c(\"rows\", \"columns\"), \n                 labels=gettextRcmdr(c(\"Merge rows\", \"Merge columns\")), title=gettextRcmdr(\"Direction of Merge\"))\n    onOK <- function(){\n        dsnameValue <- trim.blanks(tclvalue(dsname))\n        if (dsnameValue == \"\") {\n            errorCondition(recall=mergeDataSets,\n                           message=gettextRcmdr(\"You must enter the name of a data set.\"))\n            return()\n        }\n        if (!is.valid.name(dsnameValue)) {\n            errorCondition(recall=mergeDataSets,\n                           message=paste('\"', dsnameValue, '\" ', gettextRcmdr(\"is not a valid name.\"), sep=\"\"))\n            return()\n        }\n        if (is.element(dsnameValue, listDataSets())) {\n            if (\"no\" == tclvalue(checkReplace(dsnameValue, gettextRcmdr(\"Data set\")))){\n                closeDialog()\n                mergeDataSets()\n                return()\n            }\n        }\n        name1 <- getSelection(dataSet1Box)\n        name2 <- getSelection(dataSet2Box)\n        if (length(name1) == 0){\n            errorCondition(recall=mergeDataSets,\n                           message=gettextRcmdr(\"You must select a data set.\"))\n            return()\n        }\n        if (length(name2) == 0){\n            errorCondition(recall=mergeDataSets,\n                           message=gettextRcmdr(\"You must select a data set.\"))\n            return()\n        }\n        if (name1 == name2){\n            errorCondition(recall=mergeDataSets,\n                           message=gettextRcmdr(\"You cannot merge a data set with itself.\"))\n            return()\n        }\n        common <- if (tclvalue(commonVar) == \"1\") TRUE else FALSE\n        direction <- tclvalue(directionVariable)\n        if (direction == \"rows\"){\n            command <- paste(dsnameValue, \" <- mergeRows(\", name1, \", \", name2,\n                             \", common.only=\", common, \")\", sep=\"\")\n            doItAndPrint(command)\t\n        }\n        else {\n            command <- paste(dsnameValue, \" <- merge(\", name1, \", \", name2,\n                             \", all=\", !common, ', by=\"row.names\")', sep=\"\")\n            doItAndPrint(command)\n            command <- paste(\"rownames(\", dsnameValue, \") <- \", dsnameValue, \"$Row.names\", sep=\"\")\n            doItAndPrint(command)\n            command <- paste(dsnameValue, \"$Row.names <- NULL\", sep=\"\")\n            doItAndPrint(command)\n        }\n        activeDataSet(dsnameValue)\n        closeDialog()\n        tkfocus(CommanderWindow())\n    }\n    OKCancelHelp(helpSubject=\"mergeRows\")\n    tkgrid(labelRcmdr(dsnameFrame, text=gettextRcmdr(\"Name for merged data set:  \")), entryDsname)\n    tkgrid(dsnameFrame, sticky=\"w\", columnspan=2)\n    tkgrid(getFrame(dataSet1Box), getFrame(dataSet2Box), sticky=\"nw\")\n    tkgrid(commonButton, labelRcmdr(commonFrame, text=gettextRcmdr(\"Merge only common\\nrows or columns\")), \n           sticky=\"nw\")\n    tkgrid(directionFrame, commonFrame, sticky=\"sw\")\n    tkgrid(buttonsFrame, sticky=\"w\", columnspan=2)\n    dialogSuffix()\n}\n\nAggregate <- function(){\n  .activeDataSet <- ActiveDataSet()\n  initializeDialog(title=gettextRcmdr(\"Aggregate Observations\"))\n  dsname <- tclVar(\"AggregatedData\")\n  dsnameFrame <- tkframe(top)\n  entryDsname <- ttkentry(dsnameFrame, width=\"20\", textvariable=dsname)\n  variablesBox <- variableListBox(top, Variables(), \n                                  title=gettextRcmdr(\"Variables to aggregate\\n(pick one or more)\"),\n                                  selectmode=\"multiple\")\n  byBox <- variableListBox(top, Factors(), \n                           title=gettextRcmdr(\"Aggregate by\\n(pick one or more)\"),\n                           selectmode=\"multiple\")\n  radioButtons(name=\"statistic\", buttons=c(\"mean\", \"sum\"), labels=gettextRcmdr(c(\"Mean\", \"Sum\")), \n               title=gettextRcmdr(\"Statistic\"))\n  otherFrame <- tkframe(statisticFrame)\n  otherVariable <- tclVar(\"\")\n  otherButton <- ttkradiobutton(otherFrame, variable=statisticVariable, value=\"other\", \n                                text=gettextRcmdr(\"Other (specify)  \"))\n  otherEntry <- ttkentry(otherFrame, width=\"20\", textvariable=otherVariable)   \n  tkgrid(otherButton,  otherEntry, sticky=\"w\")\n  tkgrid(otherFrame, sticky=\"w\")\n  onOK <- function(){\n    dsnameValue <- trim.blanks(tclvalue(dsname))\n    if (dsnameValue == \"\") {\n      errorCondition(recall=Aggregate,\n                     message=gettextRcmdr(\"You must enter the name of a data set.\"))\n      return()\n    }\n    if (!is.valid.name(dsnameValue)) {\n      errorCondition(recall=Aggregate,\n                     message=paste('\"', dsnameValue, '\" ', gettextRcmdr(\"is not a valid name.\"), sep=\"\"))\n      return()\n    }\n    if (is.element(dsnameValue, listDataSets())) {\n      if (\"no\" == tclvalue(checkReplace(dsnameValue, gettextRcmdr(\"Data set\")))){\n        Aggregate()\n        return()\n      }\n    }\n    variables <- getSelection(variablesBox)\n    byVariables <- getSelection(byBox)\n    if (length(variables) == 0){\n      errorCondition(recall=Aggregate,\n                     message=gettextRcmdr(\"You must select at least one variable to aggregate.\"))\n      return()\n    }\n    if (length(byVariables) == 0){\n      errorCondition(recall=Aggregate,\n                     message=gettextRcmdr(\"You must select at least one variable to aggregate by.\"))\n      return()\n    }\n    if (any(byVariables %in% variables)){\n      errorCondition(recall=Aggregate,\n                     message=gettextRcmdr(\"Variables to aggregate and those to aggregate by must be different.\"))\n      return()\n    }\n    statistic <- tclvalue(statisticVariable)\n    if (statistic == \"other\") statistic <- tclvalue(otherVariable)\nresponse <- if (length(variables) > 1) {\n  paste(\"cbind(\", paste(variables, collapse=\", \"), \")\", sep=\"\")\n} else variables\nrhs <- paste(byVariables, collapse=\" + \")\ncommand <- paste(dsnameValue, \"<- aggregate(\", response ,\" ~ \", rhs, \", data=\", .activeDataSet, \", FUN=\", \n                 statistic, \")\", sep=\"\")\ndoItAndPrint(command)\nif (exists(dsnameValue) && is.data.frame(eval(parse(text=dsnameValue)))) activeDataSet(dsnameValue)\ncloseDialog()\ntkfocus(CommanderWindow())\n  }\n  OKCancelHelp(helpSubject=\"aggregate\")\n  tkgrid(labelRcmdr(dsnameFrame, text=gettextRcmdr(\"Name for aggregated data set:  \")), entryDsname)\n  tkgrid(dsnameFrame, sticky=\"w\", columnspan=2)\n  tkgrid(getFrame(variablesBox), getFrame(byBox), sticky=\"nw\")\n  tkgrid(statisticFrame, sticky=\"w\", columnspan=2)\n  tkgrid(buttonsFrame, sticky=\"w\", columnspan=2)\n  dialogSuffix()\n}\n\ndropUnusedFactorLevels <- function(){\n    dataSet <- activeDataSet()\n    initializeDialog(title=gettextRcmdr(\"Drop Unused Factor Levels\"))\n    allfactorsVariable <- tclVar(\"0\")\n    allFrame <- tkframe(top)\n    allfactorsCheckBox <- ttkcheckbutton(allFrame, variable = allfactorsVariable)\n    variablesBox <- variableListBox(top, Factors(),\n        title=gettextRcmdr(\"Factors(s) to drop levels (pick one or more)\"), selectmode=\"multiple\",\n        initialSelection=NULL)\n    onOK <- function(){\n        all <- tclvalue(allfactorsVariable)\n        variables <- getSelection(variablesBox)\n        closeDialog()\n        if (all == 0 && length(variables) == 0) {\n            errorCondition(recall=deleteVariable, message=gettextRcmdr(\"You must select one or more variables.\"))\n            return()\n        }\n        response <- tclvalue(RcmdrTkmessageBox(message=gettextRcmdr(\"Drop unused factor levels\\nPlease confirm.\"), \n            icon=\"warning\", type=\"okcancel\", default=\"cancel\"))\n        if (response == \"cancel\") {\n            onCancel()\n            return()\n        }\n        if (all == 1) command <- paste(dataSet, \" <- droplevels(\", dataSet, \")\", sep=\"\")\n        else{\n            command <- paste(dataSet, \" <- within(\", dataSet, \", {\", sep=\"\")\n            for (variable in variables){\n                command <- paste(command, \"\\n  \", variable, \" <- droplevels(\", variable, \")\", sep=\"\")\n            }\n            command <- paste(command, \"\\n})\")\n        }\n        doItAndPrint(command)\n        activeDataSet(dataSet, flushModel=FALSE, flushDialogMemory=FALSE)\n        tkfocus(CommanderWindow())\n    }\n    OKCancelHelp(helpSubject=\"droplevels\")\n    tkgrid(allfactorsCheckBox, labelRcmdr(allFrame, text=gettextRcmdr(\"all factors\")), sticky=\"w\")\n    tkgrid(allFrame, sticky=\"w\")\n    tkgrid(labelRcmdr(top, text=gettextRcmdr(\"OR\"), fg=\"red\"), sticky=\"w\")\n    tkgrid(getFrame(variablesBox), sticky=\"nw\")\n    tkgrid(buttonsFrame, sticky=\"w\")\n    dialogSuffix()\n}\n\nviewData <- function(){\n    defaults <- list (initial.allVariables = \"1\", initial.variables = NULL, \n                      initial.subset=gettextRcmdr(\"<all cases>\"))\n    dialog.values <- getDialog (\"viewData\", defaults)\n    dataSet <- activeDataSet()\n    initializeDialog(title=gettextRcmdr(\"View Data\"))\n    allVariablesFrame <- tkframe(top)\n    allVariables <- tclVar(dialog.values$initial.allVariables)\n    allVariablesCheckBox <- ttkcheckbutton(allVariablesFrame, variable=allVariables)\n    variablesBox <- variableListBox(top, Variables(), selectmode=\"multiple\",\n                                    initialSelection= varPosn (dialog.values$initial.variables), \n                                    title=gettextRcmdr(\"Variables (select one or more)\"))\n    subsetVariable <- tclVar(gettextRcmdr(dialog.values$initial.subset))\n    subsetFrame <- tkframe(top)\n    subsetEntry <- ttkentry(subsetFrame, width=\"20\", textvariable=subsetVariable)\n    subsetScroll <- ttkscrollbar(subsetFrame, orient=\"horizontal\",\n                                 command=function(...) tkxview(subsetEntry, ...))\n    tkconfigure(subsetEntry, xscrollcommand=function(...) tkset(subsetScroll, ...))\n    onOK <- function(){\n        selectVars <- if (tclvalue(allVariables) == \"1\") {\n            x <- \"\"\n            x\n        }\n        else {\n            x <- getSelection(variablesBox)\n            if (0 == length(x)) {\n                errorCondition(recall=viewData,\n                               message=gettextRcmdr(\"No variables were selected.\"))\n                return()\n            }\n            paste(\", select=c(\", paste(x, collapse=\",\"), \")\", sep=\"\")\n        }\n        closeDialog()\n        cases <- tclvalue(subsetVariable)\n        selectCases <- if (cases == gettextRcmdr(\"<all cases>\")) \"\"\n        else paste(\", subset=\", cases, sep=\"\")\n        view.height <- max(getRcmdr(\"output.height\") + getRcmdr(\"log.height\"), 10)\n        ncols <- ncol(get(dataSet))\n        suppress <- if(getRcmdr(\"suppress.X11.warnings\")) \", suppress.X11.warnings=FALSE\" else \"\"\n        result <- try(assign(dataSet, eval(parse(text=paste(\"subset(\", dataSet, \n                                                      selectCases, selectVars, \")\", sep=\"\")))),\n                      silent=TRUE)\n        if (class(result)[1] ==  \"try-error\"){\n            errorCondition(recall=viewData,\n                           message=gettextRcmdr(\"Bad subset expression.\"))\n            return()\n        }\n        if (nrow(get(dataSet)) == 0){\n            errorCondition(recall=viewData,\n                           message=gettextRcmdr(\"No data to show.\"))\n            return()\n        }\n        command <- if (ncols <= getRcmdr(\"showData.threshold\")){\n            paste(\"showData(\", dataSet, \", \n                  placement='-20+200', font=getRcmdr('logFont'), maxwidth=\",\n                  getRcmdr(\"log.width\"), \", maxheight=\", view.height, suppress, \")\", sep=\"\")\n        }\n        else paste(\"View(\", dataSet, \")\", sep=\"\")\n        result <- try(eval(parse(text=command)), silent=TRUE)\n        if (class(result)[1] ==  \"try-error\"){\n            errorCondition(recall=viewData,\n                           message=gettextRcmdr(\"View data error.\"))\n            return()\n        }\n        putDialog (\"viewData\", list(initial.allVariables = tclvalue(allVariables), \n                                    initial.variables = if (x[1] == \"\") NULL else x, initial.subset=cases))\n        tkfocus(CommanderWindow())\n    }\n    OKCancelHelp(helpSubject=\"showData\", helpPackage=\"relimp\", reset=\"viewData\")\n    tkgrid(allVariablesCheckBox, labelRcmdr(allVariablesFrame, text=gettextRcmdr(\"Include all variables\")),\n           sticky=\"w\")\n    tkgrid(allVariablesFrame, sticky=\"w\")\n    tkgrid(labelRcmdr(top, text=gettextRcmdr(\"   OR\"), fg=\"red\"), sticky=\"w\")\n    tkgrid(getFrame(variablesBox), sticky=\"nw\")\n    tkgrid(labelRcmdr(subsetFrame, text=gettextRcmdr(\"Subset expression\")), sticky=\"w\")\n    tkgrid(subsetEntry, sticky=\"w\")\n    tkgrid(subsetScroll, sticky=\"ew\")\n    tkgrid(subsetFrame, sticky=\"w\")\n    tkgrid(buttonsFrame, sticky=\"w\")\n    dialogSuffix()\n}\n\nsortDataSet <- function(){\n    dataSet <- activeDataSet()\n    initializeDialog(title=gettextRcmdr(\"Sort Active Data Set\"))\n    variablesBox <- variableListBox(top, Variables(), selectmode=\"multiple\",\n                                    initialSelection=NULL, \n                                    title=gettextRcmdr(\"Sort Keys (select one or more)\"))\n    radioButtons(name=\"direction\",\n                 buttons=c(\"increasing\", \"decreasing\"),\n                 values=c(\"FALSE\", \"TRUE\"),\n                 labels=gettextRcmdr(c(\"Increasing\", \"Decreasing\")), \n                 title=gettextRcmdr(\"Sort Direction\"))\n    newDataSetName <- tclVar(gettextRcmdr(\"<same as active data set>\"))\n    dataSetNameFrame <- tkframe(top)\n    dataSetNameEntry <- ttkentry(dataSetNameFrame, width=\"25\", textvariable=newDataSetName)\n    onOK <- function(){\n        newName <- trim.blanks(tclvalue(newDataSetName))\n        if (newName == gettextRcmdr(\"<same as active data set>\")) newName <- ActiveDataSet()\n        if (!is.valid.name(newName)){\n            errorCondition(recall=sortDataSet,\n                           message=paste('\"', newName, '\" ', gettextRcmdr(\"is not a valid name.\"), sep=\"\"))\n            return()\n        }\n        if (is.element(newName, listDataSets())) {\n            if (\"no\" == tclvalue(checkReplace(newName, type=gettextRcmdr(\"Data set\")))){\n                closeDialog()\n                sortDataSet()\n                return()\n            }\n        }\n        x <- getSelection(variablesBox)\n        if (0 == length(x)) {\n            errorCondition(recall=sortDataSet,\n                           message=gettextRcmdr(\"No variables were selected.\"))\n            return()\n        }\n        direction <- tclvalue(directionVariable)\n        closeDialog()\n        if (length(x) > 1){\n            initializeDialog(subdialog, title=gettextRcmdr(\"Reorder Sort Keys\"))\n            nvalues <- length(x)\n            order <- 1:nvalues\n            onOKsub <- function() {\n                closeDialog(subdialog)\n                opt <- options(warn=-1)\n                for (i in 1:nvalues){\n                    order[i] <- as.numeric(eval(parse(text=paste(\"tclvalue(keyOrder\", i, \")\", sep=\"\"))))\n                }\n                options(opt)\n                if (any(sort(order) != 1:nvalues) || any(is.na(order))){\n                    errorCondition(recall=sortDataSet,\n                                   message=paste(gettextRcmdr(\"Order of keys must include all integers from 1 to \"), \n                                                 nvalues, sep=\"\"))\n                    return()\n                }\n                x <- x[order(order)]\n                doItAndPrint(paste(newName, \" <- with(\", dataSet, \", \", dataSet, \"[order(\", \n                                   paste(x, collapse=\", \"), \", decreasing=\", direction, \"), ])\", sep=\"\"))\n                activeDataSet(newName)\n            }\n            subOKCancelHelp()\n            tkgrid(labelRcmdr(subdialog, text=gettextRcmdr(\"Sort Keys\"), fg=getRcmdr(\"title.color\"), font=\"RcmdrTitleFont\"),\n                   labelRcmdr(subdialog, text=gettextRcmdr(\"Order\"), fg=getRcmdr(\"title.color\"), font=\"RcmdrTitleFont\"), sticky=\"w\")\n            for (i in 1:length(x)){\n                valVar <- paste(\"keyOrder\", i, sep=\"\")\n                assign(valVar, tclVar(i))\n                assign(paste(\"entry\", i, sep=\"\"), ttkentry(subdialog, width=\"2\",\n                                                           textvariable=get(valVar)))\n                tkgrid(labelRcmdr(subdialog, text=x[i]), get(paste(\"entry\", i, sep=\"\")), sticky=\"w\")\n            }\n            tkgrid(subButtonsFrame, sticky=\"w\", columnspan=2)\n            dialogSuffix(subdialog, focus=entry1, force.wait=TRUE)\n        }\n        else {\n            doItAndPrint(paste(newName, \" <- with(\", dataSet, \", \", dataSet, \"[order(\", x, \", decreasing=\", direction, \"), ])\", sep=\"\"))\n            activeDataSet(newName)\n        }\n\n        tkfocus(CommanderWindow())\n    }\n    OKCancelHelp(helpSubject=\"order\")\n    tkgrid(getFrame(variablesBox), sticky=\"nw\")\n    tkgrid(directionFrame, sticky=\"w\")\n    tkgrid(labelRcmdr(dataSetNameFrame, text=gettextRcmdr(\"Name for new data set\")), sticky=\"w\")\n    tkgrid(dataSetNameEntry, sticky=\"w\")\n    tkgrid(dataSetNameFrame, sticky=\"w\")\n    tkgrid(buttonsFrame, sticky=\"w\")\n    dialogSuffix()\n    }\n",
    "created" : 1478718609866.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2755983000",
    "id" : "6958FEE0",
    "lastKnownWriteTime" : 1472135132,
    "last_content_update" : 1472135132,
    "path" : "D:/R-package-sources/Rcmdr-svn/Rcmdr-current/R/data-menu.R",
    "project_path" : "R/data-menu.R",
    "properties" : {
        "chunk_rendered_width" : "650"
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}